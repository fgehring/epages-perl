.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "UMLCLASS 1"
.TH UMLCLASS 1 "2013-01-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
umlclass.pl \- Utility to generate UML class diagrams from Perl source or runtime
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $ umlclass.pl \-M Foo \-o foo.png \-p "^Foo::"
\&
\&    $ umlclass.pl \-o bar.gif \-p "Bar::|Baz::" lib/Bar.pm lib/*/*.pm
\&
\&    $ umlclass.pl \-o blah.png \-p Blah \-r ./blib
\&
\&    $ umlclass.pl \-\-without\-inherited\-methods \-o blah.png \-r lib
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple command-line frontend for the UML::Class::Simple module.
.PP
I'll illustrate the usage of this tool via some real-world examples.
.SS "Draw Stevan's Moose"
.IX Subsection "Draw Stevan's Moose"
.Vb 1
\&  $ umlclass.pl \-M Moose \-o samples/moose_small.png \-p "^(Class::MOP|Moose::)" \-s 4x8
.Ve
.PP
This command will generate a simple class diagram in \s-1PNG\s0 format for the Moose module
with classes having names matching the regex \f(CW"^(Class::MOP|Moose::)"\fR. The image's
width is 4 inches while its height is 8 inches.
.PP
We need the \-M option here since \f(CW\*(C`umlclass.pl\*(C'\fR needs to preload Moose into the
memory so as to inspect it at runtime.
.PP
The graphical output is given below:
.PP
(See also <http://perlcabal.org/agent/images/moose_small.png>.)
.PP
Yes, the image above looks very fuzzy since the whole stuff is huge. If you strip
the \-s option, then the resulting image will enlarge automatically:
.PP
.Vb 1
\&  $ umlclass.pl \-M Moose \-o samples/moose_big.png \-p "^(Class::MOP|Moose::)"
.Ve
.PP
The image obtained is really really large, I won't show it here, but you
can browse it in your favorite picture browser from
<http://perlcabal.org/agent/images/moose_big.png>.
.PP
Before trying out these commands yourself, please make sure that you have 
Moose already installed. (It's also on \s-1CPAN\s0, btw.)
.SS "Perl libraries that use Moose"
.IX Subsection "Perl libraries that use Moose"
Perl classes that inherit from Moose will have tons of \*(L"meta methods\*(R" like
\&\f(CW\*(C`before\*(C'\fR, \f(CW\*(C`after\*(C'\fR, \f(CW\*(C`has\*(C'\fR, and \f(CW\*(C`meta\*(C'\fR, which are not very interesting
while plotting the class diagram. So it's common practice to specify
the \f(CW\*(C`\-\-without\-inherited\-methods\*(C'\fR option like this:
.PP
.Vb 1
\&  $ umlclass.pl \-\-without\-inherited\-methods \-o uml.png \-r lib
.Ve
.PP
If you also add \f(CW\*(C`\-\-moose\-roles\*(C'\fR, extra edges will appear in the
graph, in an alternate color, representing the relationships between roles
and their consumers.
.SS "Draw Alias's \s-1PPI\s0"
.IX Subsection "Draw Alias's PPI"
.Vb 1
\&  $ umlclass.pl \-M PPI \-o samples/ppi_small.png \-p "^PPI::" \-s 10x10
.Ve
.PP
(See also <http://perlcabal.org/agent/images/ppi_small.png>.)
.PP
Or the full-size version:
.PP
.Vb 1
\&  $ umlclass.pl \-M PPI \-o samples/ppi_big.png \-p "^PPI::"
.Ve
.PP
(See <http://perlcabal.org/agent/images/ppi_big.png>.)
.PP
\&\s-1BTW\s0, \s-1PPI\s0 is a prerequisite of this module.
.SS "Draw \s-1FAST\s0.pm from UML::Class::Simple's Test Suite"
.IX Subsection "Draw FAST.pm from UML::Class::Simple's Test Suite"
.Vb 1
\&  $ umlclass.pl \-M FAST \-o samples/fast.png \-s 5x10 \-r t/FAST/lib
.Ve
.PP
This is an example of drawing classes contained in Perl source files.
.SS "Draw Modules of Your Own"
.IX Subsection "Draw Modules of Your Own"
Suppose that you're a \s-1CPAN\s0 author too and want to produce a class diagram for \fIall\fR
the classes contained in your lib/ directory. The following command can do all the
hard work for you:
.PP
.Vb 1
\&    $ umlclass.pl \-o mylib.png \-r lib
.Ve
.PP
or just plot the packages in the specified .pm files:
.PP
.Vb 1
\&    $ umlclass.pl \-o a.png lib/foo.pm lib/bar/baz.pm
.Ve
.PP
or even specify a pattern (in perl regex) to filter out the packages you want to draw:
.PP
.Vb 1
\&    $ umlclass.pl \-o a.png \-p "^Foo::" lib/foo.pm
.Ve
.PP
Quite handy, isn't it? ;\-)
.SH "IMPORTANT ISSUES"
.IX Header "IMPORTANT ISSUES"
Never feed plain module names to \fIumlclass.pl\fR, for intance,
.PP
.Vb 1
\&  $ umlclass.pl Scalar::Defer  # DO NOT DO THIS!
.Ve
.PP
will lead you to the following error message:
.PP
.Vb 1
\&  error: input file Scalar::Defer not found.
.Ve
.PP
Use \f(CW\*(C`\-M\*(C'\fR and \f(CW\*(C`\-p\*(C'\fR options to achieve your goals:
.PP
.Vb 1
\&  $ umlclass.pl \-M Scalar::Defer \-p "Scalar::Defer"
.Ve
.PP
In this example, I must warn you that you may miss the
packages which belong to Scalar::Defer but don't have \*(L"Scalar::Defer\*(R"
in their names. I'm sorry for that. \fIumlclass.pl\fR is not \fIthat\fR
smart.
.PP
The safest ways to do this are
.IP "1." 4
Don't specify the \f(CW\*(C`\-p regex\*(C'\fR option and generate a large image which shows
every classes including \s-1CORE\s0 modules, figure out the appropriate class
name pattern yourself, and rerun \f(CW\*(C`umlclass.pl\*(C'\fR with the right regex pattern.
.IP "2." 4
Grab the Scalar::Defer's tarball, and do something like this:
.Sp
.Vb 1
\&   $ umlclass.pl \-r Scalar\-Defer\-0.07/lib
.Ve
.PP
It's worth mentioning that when .pl or .pm files are passing as the command line
arguments, \fIonly\fR the classes \fIdefined\fR in these files will be drawn. This is
a feature. :)
.PP
For \fI.pm\fR files on your disk, simply pass them as the command line
arguments. For instance:
.PP
.Vb 1
\&   $ umlclass.pl \-o bar.gif lib/Bar.pm lib/*/*.pm
.Ve
.PP
or tell \fIumlclass.pl\fR to iterate through the directories for you:
.PP
.Vb 1
\&   $ umlclass.pl \-o blah.png \-r ./lib
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-color color" 4
.IX Item "--color color"
.PD 0
.IP "\-c color" 4
.IX Item "-c color"
.PD
Sets the node color. Defaults to \f(CW\*(C`#f1e1f4\*(C'\fR.
.Sp
You can either specify \s-1RGB\s0 values like \f(CW\*(C`#rrggbb\*(C'\fR in hex form, or
color names like "\f(CW\*(C`grey\*(C'\fR\*(L" and \*(R"\f(CW\*(C`red\*(C'\fR".
.IP "\-\-dot path" 4
.IX Item "--dot path"
Tell it where the graphviz \*(L"dot\*(R" program is
.IP "\-\-exclude path" 4
.IX Item "--exclude path"
.PD 0
.IP "\-E path" 4
.IX Item "-E path"
.PD
excludes modules that were installed to \f(CW\*(C`path\*(C'\fR from
the drawing. multiple \f(CW\*(C`\-E\*(C'\fR options are supported.
.IP "\-\-help" 4
.IX Item "--help"
.PD 0
.IP "\-h" 4
.IX Item "-h"
.PD
Shows the help message.
.IP "\-\-include path" 4
.IX Item "--include path"
.PD 0
.IP "\-I path" 4
.IX Item "-I path"
.PD
Draws \fIonly\fR the classes that were installed to
\&\f(CW\*(C`path\*(C'\fR in the drawing. multiple \f(CW\*(C`\-I\*(C'\fR options are supported.
.IP "\-M module" 4
.IX Item "-M module"
Preloads the module which contains the classes you want to depict. For example,
.Sp
.Vb 1
\&    $ umlclass.pl \-M PPI \-o ppi.png \-p "^PPI::"
.Ve
.Sp
Multiple \f(CW\*(C`\-M\*(C'\fR options are accepted. For instance:
.Sp
.Vb 1
\&    $ umlclass.pl \-M Foo \-M Bar::Baz \-p "Class::"
.Ve
.IP "\-\-no\-methods" 4
.IX Item "--no-methods"
Don't display method names in the output.
.IP "\-\-no\-inheritance" 4
.IX Item "--no-inheritance"
Don't show the inheritance relationships in the output.  Not terribly useful
unless you are using \f(CW\*(C`Moose\*(C'\fR and asking for \f(CW\*(C`\-\-moose\-roles\*(C'\fR.
.IP "\-\-out outfile" 4
.IX Item "--out outfile"
.PD 0
.IP "\-o outfile" 4
.IX Item "-o outfile"
.PD
Specifies the output file name. Note that the file extension will be honored.
If you specify "\f(CW\*(C`\-o foo.png\*(C'\fR", a \s-1PNG\s0 image named \fIfoo.png\fR will be generated,
and if you specify "\f(CW\*(C`\-o foo.dot\*(C'\fR", the dot source file named \fIfoo.dot\fR will
be obtained.
If you specify "\f(CW\*(C`\-o foo.xmi\*(C'\fR\*(L", the \s-1XMI\s0 model file will be generated.
Likewise, \*(R"\f(CW\*(C`\-o foo.yml\*(C'\fR" will lead to a \s-1YAML\s0 file holding the whole
internal \s-1DOM\s0 data.
.Sp
A typical usage is as follows:
.Sp
.Vb 1
\&    $ umlclass.pl \-o foo.yml lib/Foo.pm
\&
\&    # ...edit the foo.yml so as to adjust the class info
\&    # feed the updated foo.dot back
\&    $ umlclass.pl \-o foo.dot foo.yml
\&
\&    # ...edit the foo.dot so as to adjust the graphviz dot source
\&    # now feed the updated foo.dot back
\&    $ umlclass.pl \-o foo.png foo.dot
.Ve
.Sp
You see, \fIumlclass.pl\fR allows you to control the behaviors at several different
levels. I really like this freedom, since tools can't always do exactly what I want.
.Sp
If no \f(CW\*(C`\-o\*(C'\fR option was specified, \fIa.png\fR will be assumed.
.IP "\-\-pattern regex" 4
.IX Item "--pattern regex"
.PD 0
.IP "\-p regex" 4
.IX Item "-p regex"
.PD
Specifies the pattern (perl regex) used to filter out the class names to be drawn.
.IP "\-\-public\-only" 4
.IX Item "--public-only"
.PD 0
.IP "\-P" 4
.IX Item "-P"
.PD
Shows public methods only.
.IP "\-\-recursive" 4
.IX Item "--recursive"
.PD 0
.IP "\-r" 4
.IX Item "-r"
.PD
Processes subdirectories of input directories recursively.
.IP "\-\-moose\-roles" 4
.IX Item "--moose-roles"
If a package appears to be a Moose::Role, determine which other
packages consume that role, and add that information to the graph
in a different color from the inheritance hierarchy.  Depending on
the particular input classes and your personal artistic tastes,
this may substantially alter the usefulness and/or cleanliness of
the resulting diagram.  For large package hierarchies, it is
recommended to combine this with \fB\-\-no\-inheritance\fR.
.IP "\-\-size" 4
.IX Item "--size"
.PD 0
.IP "\-s <w>x<h>" 4
.IX Item "-s <w>x<h>"
.PD
Specifies the width and height of the resulting image. For example:
.Sp
.Vb 1
\&    \-s 3.6x7
\&
\&    \-\-size 5x6
.Ve
.Sp
where the unit is inches instead of pixels.
.IP "\-\-without\-inherited\-methods" 4
.IX Item "--without-inherited-methods"
Do not show methods from parent classes.
.Sp
All inherited and imported methods will be excluded. Note that if a method
is overridden in the current subclass, it will still be included even if
it appears in one of its ancestors.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
If the user passes plain module names like \*(L"Foo::Bar\*(R", then its (and only its)
ancestors and subclasses will be drawn. (This is suggested by Christopher Malon.)
.SH "AUTHORS"
.IX Header "AUTHORS"
Agent Zhang <agentzh@gmail.com>,
Maxim Zenin <max@foggy.ru>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 by Agent Zhang. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify it under
the same terms as perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
UML::Class::Simple.
