.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Formatter::HTML 3"
.TH TAP::Formatter::HTML 3 "2014-08-08" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Formatter::HTML \- TAP Test Harness output delegate for html output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& ##
\& ## command\-line usage (alpha):
\& ##
\& prove \-m \-Q \-P HTML=outfile:out.html,css_uri:style.css,js_uri:foo.js,force_inline_css:0
\&
\& # backwards compat usage:
\& prove \-m \-Q \-\-formatter=TAP::Formatter::HTML >output.html
\&
\& # for more detail:
\& perldoc App::Prove::Plugin::HTML
\&
\& ##
\& ## perl usage:
\& ##
\& use TAP::Harness;
\&
\& my @tests = glob( \*(Aqt/*.t\*(Aq );
\& my $harness = TAP::Harness\->new({ formatter_class => \*(AqTAP::Formatter::HTML\*(Aq,
\&                                   merge => 1 });
\& $harness\->runtests( @tests );
\& # prints HTML to STDOUT by default
\&
\& # or if you really don\*(Aqt want STDERR merged in:
\& my $harness = TAP::Harness\->new({ formatter_class => \*(AqTAP::Formatter::HTML\*(Aq });
\&
\& # to use a custom formatter:
\& my $fmt = TAP::Formatter::HTML\->new;
\& $fmt\->css_uris([])\->inline_css( $my_css )
\&     \->js_uris([\*(Aqhttp://mysite.com/jquery.js\*(Aq, \*(Aqhttp://mysite.com/custom.js\*(Aq])
\&     \->inline_js( \*(Aq$(div.summary).hide()\*(Aq );
\&
\& my $harness = TAP::Harness\->new({ formatter => $fmt, merge => 1 });
\&
\& # to output HTML to a file[handle]:
\& $fmt\->output_fh( $fh );
\& $fmt\->output_file( \*(Aq/tmp/foo.html\*(Aq );
\&
\& # you can use your own customized templates too:
\& $fmt\->template(\*(Aqcustom.tt2\*(Aq)
\&     \->template_processor( Template\->new )
\&     \->force_inline_css(0)
\&     \->force_inline_js(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides \s-1HTML\s0 output formatting for TAP::Harness (a replacement
for Test::Harness.  It is largely based on ideas from
TAP::Test::HTMLMatrix (which was built on Test::Harness and thus had a
few limitations \- hence this module).  For sample output, see:
.PP
http://www.spurkis.org/TAP\-Formatter\-HTML/test\-output.html <http://www.spurkis.org/TAP-Formatter-HTML/test-output.html>
.PP
This module is targeted at all users of automated test suites.  It's meant to
make reading test results easier, giving you a visual summary of your test suite
and letting you drill down into individual failures (which will hopefully make
testing more likely to happen at your organization ;\-).
.PP
The design goals are:
.IP "\(bu" 4
\&\fIeasy to use\fR
.Sp
Once you've got your test report, it should be obvious how to use it.
.IP "\(bu" 4
\&\fIhelpful\fR
.Sp
It should be helpful by pointing out \fIwhere\fR & \fIwhy\fR your test suite is
breaking.  If you've written your tests well, it should give you enough info to
start tracking down the issue.
.IP "\(bu" 4
\&\fIeasy to install\fR
.Sp
Eg: should be a clean install from \s-1CPAN\s0, and you shouldn't need to modify your
existing test suite to get up & running, though \fIyou will need to stop using
Test::Harness unfortunately\fR.
.IP "\(bu" 4
\&\fIwork out of the box\fR
.Sp
You shouldn't need to do any custom-coding to get it working \- the default
configuration & templates should be enough to get started with.  Once installed
it should be a matter of running:
.Sp
.Vb 1
\& % prove \-m \-Q \-\-formatter=TAP::Formatter::HTML >output.html
.Ve
.Sp
From your project's home dir, and opening the resulting file.
.IP "\(bu" 4
\&\fIeasy to configure\fR
.Sp
You should be able to configure & customize it to suit your needs.  As such,
css, javascript and templates are all configurable.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&  my $fmt = $class\->new({ %args });
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
All chaining accessors:
.PP
\fIverbosity\fR
.IX Subsection "verbosity"
.PP
.Vb 1
\&  $fmt\->verbosity( [ $v ] )
.Ve
.PP
Verbosity level, as defined in \*(L"new\*(R" in TAP::Harness:
.PP
.Vb 5
\&     1   verbose        Print individual test results (and more) to STDOUT.
\&     0   normal
\&    \-1   quiet          Suppress some test output (eg: test failures).
\&    \-2   really quiet   Suppress everything to STDOUT but the HTML report.
\&    \-3   silent         Suppress all output to STDOUT, including the HTML report.
.Ve
.PP
Note that the report is also available via \*(L"html\*(R".  You can also provide a
custom \*(L"output_fh\*(R" (aka \*(L"output_file\*(R") that will be used instead of
\&\*(L"stdout\*(R", even if \fIsilent\fR is on.
.PP
\fIstdout\fR
.IX Subsection "stdout"
.PP
.Vb 1
\&  $fmt\->stdout( [ \e*FH ] );
.Ve
.PP
An IO::Handle filehandle for catching standard output.  Defaults to \f(CW\*(C`STDOUT\*(C'\fR.
.PP
\fIoutput_fh\fR
.IX Subsection "output_fh"
.PP
.Vb 1
\&  $fmt\->output_fh( [ \e*FH ] );
.Ve
.PP
An IO::Handle filehandle for printing the \s-1HTML\s0 report to.  Defaults to the
same object as \*(L"stdout\*(R".
.PP
\&\fBNote:\fR If \*(L"verbosity\*(R" is set to \f(CW\*(C`silent\*(C'\fR, printing to \f(CW\*(C`output_fh\*(C'\fR will
still occur.  (that is, assuming you've opened a different file, \fBnot\fR
\&\f(CW\*(C`STDOUT\*(C'\fR).
.PP
\fIoutput_file\fR
.IX Subsection "output_file"
.PP
.Vb 1
\&  $fmt\->output_file( $file_name )
.Ve
.PP
Not strictly an accessor \- this is a shortcut for setting \*(L"output_fh\*(R",
equivalent to:
.PP
.Vb 1
\&  $fmt\->output_fh( IO::File\->new( $file_name, \*(Aqw\*(Aq ) );
.Ve
.PP
You can set this with the \f(CW\*(C`TAP_FORMATTER_HTML_OUTFILE=/path/to/file\*(C'\fR
environment variable
.PP
\fIescape_output\fR
.IX Subsection "escape_output"
.PP
.Vb 1
\&  $fmt\->escape_output( [ $boolean ] );
.Ve
.PP
If set, all output to \*(L"stdout\*(R" is escaped.  This is probably only useful
if you're testing the formatter.
Defaults to \f(CW0\fR.
.PP
\fIhtml\fR
.IX Subsection "html"
.PP
.Vb 1
\&  $fmt\->html( [ \e$html ] );
.Ve
.PP
This is a reference to the scalar containing the html generated on the last
test run.  Useful if you have \*(L"verbosity\*(R" set to \f(CW\*(C`silent\*(C'\fR, and have not
provided a custom \*(L"output_fh\*(R" to write the report to.
.PP
\fItests\fR
.IX Subsection "tests"
.PP
.Vb 1
\&  $fmt\->tests( [ \e@test_files ] )
.Ve
.PP
A list of test files we're running, set by TAP::Parser.
.PP
\fIsession_class\fR
.IX Subsection "session_class"
.PP
.Vb 1
\&  $fmt\->session_class( [ $class ] )
.Ve
.PP
Class to use for TAP::Parser test sessions.  You probably won't need to use
this unless you're hacking or sub-classing the formatter.
Defaults to TAP::Formatter::HTML::Session.
.PP
\fIsessions\fR
.IX Subsection "sessions"
.PP
.Vb 1
\&  $fmt\->sessions( [ \e@sessions ] )
.Ve
.PP
Test sessions added by TAP::Parser.  You probably won't need to use this
unless you're hacking or sub-classing the formatter.
.PP
\fItemplate_processor\fR
.IX Subsection "template_processor"
.PP
.Vb 1
\&  $fmt\->template_processor( [ $processor ] )
.Ve
.PP
The template processor to use.
Defaults to a \s-1TT2\s0 Template processor with the following config:
.PP
.Vb 3
\&  COMPILE_DIR  => catdir( tempdir(), \*(AqTAP\-Formatter\-HTML\*(Aq ),
\&  COMPILE_EXT  => \*(Aq.ttc\*(Aq,
\&  INCLUDE_PATH => parent directory TAP::Formatter::HTML was loaded from
.Ve
.PP
Note: \s-1INCLUDE_PATH\s0 used to be set to: \f(CW\*(C`join(\*(Aq:\*(Aq, @INC)\*(C'\fR but this was causing
issues on systems with > 64 dirs in \f(CW@INC\fR.  See \s-1RT\s0 #74364 for details.
.PP
\fItemplate\fR
.IX Subsection "template"
.PP
.Vb 1
\&  $fmt\->template( [ $file_name ] )
.Ve
.PP
The template file to load.
Defaults to \f(CW\*(C`TAP/Formatter/HTML/default_report.tt2\*(C'\fR.
.PP
You can set this with the \f(CW\*(C`TAP_FORMATTER_HTML_TEMPLATE=/path/to.tt\*(C'\fR environment
variable.
.PP
\fIcss_uris\fR
.IX Subsection "css_uris"
.PP
.Vb 1
\&  $fmt\->css_uris( [ \e@uris ] )
.Ve
.PP
A list of \s-1URI\s0s (or strings) to include as external stylesheets in <style>
tags in the head of the document.
Defaults to:
.PP
.Vb 1
\&  [\*(Aqfile:TAP/Formatter/HTML/default_report.css\*(Aq];
.Ve
.PP
You can set this with the \f(CW\*(C`TAP_FORMATTER_HTML_CSS_URIS=/path/to.css:/another/path.css\*(C'\fR
environment variable.
.PP
If you're using Win32, please see \*(L"\s-1WIN32\s0 \s-1URIS\s0\*(R".
.PP
\fIjs_uris\fR
.IX Subsection "js_uris"
.PP
.Vb 1
\&  $fmt\->js_uris( [ \e@uris ] )
.Ve
.PP
A list of \s-1URI\s0s (or strings) to include as external stylesheets in <script>
tags in the head of the document.
Defaults to:
.PP
.Vb 1
\&  [\*(Aqfile:TAP/Formatter/HTML/jquery\-1.2.6.pack.js\*(Aq];
.Ve
.PP
You can set this with the \f(CW\*(C`TAP_FORMATTER_HTML_JS_URIS=/path/to.js:/another/path.js\*(C'\fR
environment variable.
.PP
If you're using Win32, please see \*(L"\s-1WIN32\s0 \s-1URIS\s0\*(R".
.PP
\fIinline_css\fR
.IX Subsection "inline_css"
.PP
.Vb 1
\&  $fmt\->inline_css( [ $css ] )
.Ve
.PP
If set, the formatter will include the \s-1CSS\s0 code in a <style> tag in the head of
the document.
.PP
\fIinline_js\fR
.IX Subsection "inline_js"
.PP
.Vb 1
\&  $fmt\->inline_js( [ $javascript ] )
.Ve
.PP
If set, the formatter will include the JavaScript code in a <script> tag in the
head of the document.
.PP
\fIminify\fR
.IX Subsection "minify"
.PP
.Vb 1
\&  $fmt\->minify( [ $boolean ] )
.Ve
.PP
If set, the formatter will attempt to reduce the size of the generated report,
they can get pretty big if you're not careful!  Defaults to \f(CW1\fR (true).
.PP
\&\fBNote:\fR This currently just means... \fIremove tabs at start of a line\fR.  It
may be extended in the future.
.PP
\fIabs_file_paths\fR
.IX Subsection "abs_file_paths"
.PP
.Vb 1
\&  $fmt\->abs_file_paths( [ $ boolean ] )
.Ve
.PP
If set, the formatter will attempt to convert any relative \fIfile\fR \s-1JS\s0 & css
\&\s-1URI\s0's listed in \*(L"css_uris\*(R" & \*(L"js_uris\*(R" to absolute paths.  This is handy if
you'll be sending moving the \s-1HTML\s0 output around on your harddisk, (but not so
handy if you move it to another machine \- see \*(L"force_inline_css\*(R").
Defaults to \fI1\fR.
.PP
\fIforce_inline_css\fR
.IX Subsection "force_inline_css"
.PP
.Vb 1
\&  $fmt\->force_inline_css( [ $boolean ] )
.Ve
.PP
If set, the formatter will attempt to slurp in any \fIfile\fR css \s-1URI\s0's listed in
\&\*(L"css_uris\*(R", and append them to \*(L"inline_css\*(R".  This is handy if you'll be
sending the output around \- that way you don't have to send a \s-1CSS\s0 file too.
Defaults to \fI1\fR.
.PP
You can set this with the \f(CW\*(C`TAP_FORMATTER_HTML_FORCE_INLINE_CSS=0|1\*(C'\fR environment
variable.
.PP
\fIforce_inline_js( [ \f(CI$boolean\fI ] )\fR
.IX Subsection "force_inline_js( [ $boolean ] )"
.PP
If set, the formatter will attempt to slurp in any \fIfile\fR javascript \s-1URI\s0's listed in
\&\*(L"js_uris\*(R", and append them to \*(L"inline_js\*(R".  This is handy if you'll be
sending the output around \- that way you don't have to send javascript files too.
.PP
Note that including jquery inline doesn't work with some browsers, haven't
investigated why.  Defaults to \fI0\fR.
.PP
You can set this with the \f(CW\*(C`TAP_FORMATTER_HTML_FORCE_INLINE_JS=0|1\*(C'\fR environment
variable.
.PP
\fIcolor\fR
.IX Subsection "color"
.PP
This method is for \f(CW\*(C`TAP::Harness\*(C'\fR \s-1API\s0 compatibility only.  It does nothing.
.SS "\s-1API\s0 \s-1METHODS\s0"
.IX Subsection "API METHODS"
\fIsummary\fR
.IX Subsection "summary"
.PP
.Vb 1
\&  $html = $fmt\->summary( $aggregator )
.Ve
.PP
\&\f(CW\*(C`summary\*(C'\fR produces a summary report after all tests are run.  \f(CW$aggregator\fR
should be a TAP::Parser::Aggregator.
.PP
This calls:
.PP
.Vb 1
\&  $fmt\->template_processor\->process( $params )
.Ve
.PP
Where \f(CW$params\fR is a data structure containing:
.PP
.Vb 6
\&  report      => %test_report
\&  js_uris     => @js_uris
\&  css_uris    => @js_uris
\&  inline_js   => $inline_js
\&  inline_css  => $inline_css
\&  formatter   => %formatter_info
.Ve
.PP
The \f(CW\*(C`report\*(C'\fR is the most complicated data structure, and will sooner or later
be documented in \*(L"\s-1CUSTOMIZING\s0\*(R".
.SH "CUSTOMIZING"
.IX Header "CUSTOMIZING"
This section is not yet written.  Please look through the code if you want to
customize the templates, or sub-class.
.PP
You can use environment variables to customize the behaviour of \s-1TFH:\s0
.PP
.Vb 6
\&  TAP_FORMATTER_HTML_OUTFILE=/path/to/file
\&  TAP_FORMATTER_HTML_FORCE_INLINE_CSS=0|1
\&  TAP_FORMATTER_HTML_FORCE_INLINE_JS=0|1
\&  TAP_FORMATTER_HTML_CSS_URIS=/path/to.css:/another/path.css
\&  TAP_FORMATTER_HTML_JS_URIS=/path/to.js:/another/path.js
\&  TAP_FORMATTER_HTML_TEMPLATE=/path/to.tt
.Ve
.PP
This should save you from having to write custom code for simple cases.
.SH "WIN32 URIS"
.IX Header "WIN32 URIS"
This module tries to do the right thing when fed Win32 File \fIpaths\fR as File
URIs to both \*(L"css_uris\*(R" and \*(L"js_uris\*(R", eg:
.PP
.Vb 2
\&  C:\esome\epath
\&  file:///C:\esome\epath
.Ve
.PP
While I could lecture you what a valid file \s-1URI\s0 is and point you at:
.PP
http://blogs.msdn.com/ie/archive/2006/12/06/file\-uris\-in\-windows.aspx
.PP
Which basically says the above are invalid URIs, and you should use:
.PP
.Vb 2
\&  file:///C:/some/path
\&  # ie: no backslashes
.Ve
.PP
I also realize it's convenient to chuck in a Win32 file path, as you can on
Unix.  So if you're running under Win32, \f(CW\*(C`TAP::Formatter::HTML\*(C'\fR will look for
a signature \f(CW\*(AqX:\e\*(Aq\fR, \f(CW\*(Aq\e\*(Aq\fR or \f(CW\*(Aqfile:\*(Aq\fR at the start of each \s-1URI\s0 to see if
you are referring to a file or another type of \s-1URI\s0.
.PP
Note that you must use '\f(CW\*(C`file:///C:\eblah\*(C'\fR' with \fI3 slashes\fR otherwie '\f(CW\*(C`C:\*(C'\fR'
will become your \fIhost\fR, which is probably not what you want.  See
URI::file for more details.
.PP
I realize this is a pretty basic algorithm, but it should handle most cases.
If it doesn't work for you, you can always construct a valid File \s-1URI\s0 instead.
.SH "BUGS"
.IX Header "BUGS"
Please use http://rt.cpan.org to report any issues.  Patches are welcome.
.SH "CONTRIBUTING"
.IX Header "CONTRIBUTING"
Use github:
.PP
https://github.com/spurkis/TAP\-Formatter\-HTML <https://github.com/spurkis/TAP-Formatter-HTML>
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Purkis <spurkis@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2008\-2012 Steve Purkis <spurkis@cpan.org>, S Purkis Consulting Ltd.
All rights reserved.
.PP
This module is released under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Examples in the \f(CW\*(C`examples\*(C'\fR directory and here:
.PP
http://www.spurkis.org/TAP\-Formatter\-HTML/test\-output.html <http://www.spurkis.org/TAP-Formatter-HTML/test-output.html>,
http://www.spurkis.org/TAP\-Formatter\-HTML/DBD\-SQLite\-example.html <http://www.spurkis.org/TAP-Formatter-HTML/DBD-SQLite-example.html>,
http://www.spurkis.org/TAP\-Formatter\-HTML/Template\-example.html <http://www.spurkis.org/TAP-Formatter-HTML/Template-example.html>
.PP
prove \- TAP::Harness's new cmdline utility.  It's great, use it!
.PP
App::Prove::Plugin::HTML \- the prove interface for this module.
.PP
Test::TAP::HTMLMatrix \- the inspiration for this module.  Many good ideas
were borrowed from it.
.PP
TAP::Formatter::Console \- the default \s-1TAP\s0 formatter used by TAP::Harness
