.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Fu::File 3"
.TH File::Fu::File 3 "2011-04-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Fu::File \- a filename object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use File::Fu;
\&
\&  my $file = File::Fu\->file("path/to/file");
\&  $file %= \*(Aq.extension\*(Aq;
\&  $file\->e and warn "$file exists";
\&
\&  $file\->l and warn "$file is a link to ", $file\->readlink;
.Ve
.SH "Constructor"
.IX Header "Constructor"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $file = File::Fu::File\->new($path);
\&
\&  my $file = File::Fu::File\->new(@path);
.Ve
.SS "new_direct"
.IX Subsection "new_direct"
.Vb 4
\&  my $file = File::Fu::File\->new_direct(
\&    dir => $dir_obj,
\&    file => $name
\&  );
.Ve
.SH "Class Constants"
.IX Header "Class Constants"
.SS "dir_class"
.IX Subsection "dir_class"
Return the corresponding dir class for this file object.
.PP
.Vb 1
\&  my $dc = $class\->dir_class;
.Ve
.SS "is_dir"
.IX Subsection "is_dir"
Always false for a file.
.SS "is_file"
.IX Subsection "is_file"
Always true for a file.
.SH "Parts"
.IX Header "Parts"
.SS "basename"
.IX Subsection "basename"
Returns a new object representing only the file part of the name.
.PP
.Vb 1
\&  my $obj = $file\->basename;
.Ve
.SH "Methods"
.IX Header "Methods"
.SS "stringify"
.IX Subsection "stringify"
.Vb 1
\&  my $string = $file\->stringify;
.Ve
.SS "append"
.IX Subsection "append"
Append a string only to the filename part.
.PP
.Vb 1
\&  $file\->append(\*(Aq.gz\*(Aq);
\&
\&  $file %= \*(Aq.gz\*(Aq;
.Ve
.PP
(Yeah... I tried to use .=, but overloading hates me.)
.SS "map"
.IX Subsection "map"
.Vb 1
\&  $file\->map(sub {...});
\&
\&  $file &= sub {...};
.Ve
.SS "absolute"
.IX Subsection "absolute"
Get an absolute name (without checking the filesystem.)
.PP
.Vb 1
\&  my $abs = $file\->absolute;
.Ve
.SS "absolutely"
.IX Subsection "absolutely"
Get an absolute name (resolved on the filesytem.)
.PP
.Vb 1
\&  my $abs = $file\->absolutely;
.Ve
.SH "Doing stuff"
.IX Header "Doing stuff"
.SS "open"
.IX Subsection "open"
Open the file with \f(CW$mode\fR ('<', 'r', '>', 'w', etc) \*(-- see IO::File.
.PP
.Vb 1
\&  my $fh = $file\->open($mode, $permissions);
.Ve
.PP
Throws an error if anything goes wrong or if the resulting filehandle
happens to be a directory.
.SS "piped_open"
.IX Subsection "piped_open"
Opens a read pipe.  The file is appended to \f(CW@command\fR.
.PP
.Vb 1
\&  my $fh = $file\->piped_open(@command);
.Ve
.SS "touch"
.IX Subsection "touch"
Update the timestamp of a file (or create it.)
.PP
.Vb 1
\&  $file\->touch;
.Ve
.SS "link"
.IX Subsection "link"
.Vb 1
\&  my $link = $file\->link($name);
.Ve
.SS "symlink"
.IX Subsection "symlink"
.Vb 1
\&  my $link = $file\->symlink($linkname);
.Ve
.PP
Note that symlinks are relative to where they live.
.PP
.Vb 4
\&  my $dir = File::Fu\->dir("foo");
\&  my $file = $dir+\*(Aqfile\*(Aq;
\&  # $file\->symlink($dir+\*(Aqlink\*(Aq); is a broken link
\&  my $link = $file\->basename\->symlink($dir+\*(Aqlink\*(Aq);
.Ve
.SS "unlink"
.IX Subsection "unlink"
.Vb 1
\&  $file\->unlink;
.Ve
.SS "readlink"
.IX Subsection "readlink"
.Vb 1
\&  my $to = $file\->readlink;
.Ve
.SS "read"
.IX Subsection "read"
Read the entire file into memory (or swap!)
.PP
.Vb 1
\&  my @lines = $file\->read;
\&
\&  my $file = $file\->read;
.Ve
.PP
If File::Slurp is available, options to read_file will be passed along.
See \*(L"read_file\*(R" in File::Slurp.
.SS "write"
.IX Subsection "write"
Write the file's contents.
.PP
.Vb 1
\&  $file\->write($content);
.Ve
.PP
If File::Slurp is available, \f(CW$content\fR may be either a scalar, scalar
ref, or array ref.
.PP
.Vb 1
\&  $file\->write($content, %args);
.Ve
.SS "copy"
.IX Subsection "copy"
.Vb 1
\&  $file\->copy($dest);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Wilhelm @ <ewilhelm at cpan dot org>
.PP
http://scratchcomputing.com/
.SH "BUGS"
.IX Header "BUGS"
If you found this module on \s-1CPAN\s0, please report any bugs or feature
requests through the web interface at <http://rt.cpan.org>.  I will be
notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.PP
If you pulled this development version from my /svn/, please contact me
directly.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2008 Eric L. Wilhelm, All Rights Reserved.
.SH "NO WARRANTY"
.IX Header "NO WARRANTY"
Absolutely, positively \s-1NO\s0 \s-1WARRANTY\s0, neither express or implied, is
offered with this software.  You use this software at your own risk.  In
case of loss, no person or entity owes you anything whatsoever.  You
have been warned.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
