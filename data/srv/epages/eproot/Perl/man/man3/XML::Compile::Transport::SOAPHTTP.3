.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::Transport::SOAPHTTP 3"
.TH XML::Compile::Transport::SOAPHTTP 3 "2017-01-11" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::Transport::SOAPHTTP \- exchange XML\-SOAP via HTTP
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& XML::Compile::Transport::SOAPHTTP
\&   is a XML::Compile::Transport
\&   is a XML::Compile::SOAP::Extension
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use XML::Compile::Transport::SOAPHTTP;
\&
\& my $http = XML::Compile::Transport::SOAPHTTP\->new(@options);
\& my $send = $http\->compileClient(@options2);
\&
\& my $call = $wsdl\->compileClient
\&   ( operation => \*(Aqsome\-port\-name\*(Aq
\&   , transport => $send
\&   );
\&
\& my ($xmlout, $trace) = $call\->($xmlin);
\&
\& $wsdl\->compileCalls(transport => $send);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module handles the exchange of (\s-1XML\s0) messages, according to the
rules of \s-1SOAP\s0 (any version).  The module does not known how to parse
or compose \s-1XML\s0, but only worries about the \s-1HTTP\s0 aspects.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in XML::Compile::Transport.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in XML::Compile::Transport.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in XML::Compile::Transport.
.IP "XML::Compile::Transport::SOAPHTTP\->\fBnew\fR(%options)" 4
.IX Item "XML::Compile::Transport::SOAPHTTP->new(%options)"
Create a SOAP-over-HTTP handler, implemented as a wrapper around
LWP::UserAgent.
.Sp
If you need to change UserAgent settings (for instance at runtime),
you can always directly access the internal \f(CW\*(C`LWP::UserAgent\*(C'\fR object
via \fIuserAgent()\fR.
.Sp
\&\fBWarning:\fR The \f(CW\*(C`keep_alive\*(C'\fR and \f(CW\*(C`timeout\*(C'\fR options are only used when
an default internal \f(CW\*(C`LWP::UserAgent\*(C'\fR is created; this is only once in a
program.  Later instantiations of this ::SOAPHTTP will share that default
agent, even though these passed parameters have different parameters.
If that is not what you want, then pass your own \f(CW\*(C`user_agent\*(C'\fR object to
the constructor to avoid the use of the default.
.Sp
.Vb 6
\& \-Option    \-\-Defined in             \-\-Default
\&  address     XML::Compile::Transport  \*(Aqhttp://localhost\*(Aq
\&  charset     XML::Compile::Transport  \*(Aqutf\-8\*(Aq
\&  keep_alive                           <true>
\&  timeout                              180
\&  user_agent                           <created when needed>
.Ve
.RS 4
.IP "address => URI|ARRAY\-of\-URI" 2
.IX Item "address => URI|ARRAY-of-URI"
.PD 0
.IP "charset => \s-1STRING\s0" 2
.IX Item "charset => STRING"
.IP "keep_alive => \s-1BOOLEAN\s0" 2
.IX Item "keep_alive => BOOLEAN"
.PD
When connection can be re-used.
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
The maximum time for a single connection before the client will close it.
The server may close it earlier.  Do not set the timeout too long, because
you want objects to be cleaned-up.
.IP "user_agent => LWP::UserAgent object" 2
.IX Item "user_agent => LWP::UserAgent object"
If you do not pass your own user agent, a default will be created for you.
.RE
.RS 4
.RE
.SS "\s-1WSDL11\s0"
.IX Subsection "WSDL11"
Extends \*(L"\s-1WSDL11\s0\*(R" in XML::Compile::Transport.
.ie n .IP "$obj\->\fBwsdl11Init\fR($wsdl, $args)" 4
.el .IP "\f(CW$obj\fR\->\fBwsdl11Init\fR($wsdl, \f(CW$args\fR)" 4
.IX Item "$obj->wsdl11Init($wsdl, $args)"
.PD 0
.ie n .IP "XML::Compile::Transport::SOAPHTTP\->\fBwsdl11Init\fR($wsdl, $args)" 4
.el .IP "XML::Compile::Transport::SOAPHTTP\->\fBwsdl11Init\fR($wsdl, \f(CW$args\fR)" 4
.IX Item "XML::Compile::Transport::SOAPHTTP->wsdl11Init($wsdl, $args)"
.PD
Inherited, see \*(L"\s-1WSDL11\s0\*(R" in XML::Compile::SOAP::Extension
.SS "\s-1SOAP11\s0"
.IX Subsection "SOAP11"
Extends \*(L"\s-1SOAP11\s0\*(R" in XML::Compile::Transport.
.ie n .IP "$obj\->\fBsoap11ClientWrapper\fR($operation, $call, $args)" 4
.el .IP "\f(CW$obj\fR\->\fBsoap11ClientWrapper\fR($operation, \f(CW$call\fR, \f(CW$args\fR)" 4
.IX Item "$obj->soap11ClientWrapper($operation, $call, $args)"
Inherited, see \*(L"\s-1SOAP11\s0\*(R" in XML::Compile::SOAP::Extension
.ie n .IP "$obj\->\fBsoap11HandlerWrapper\fR($operation, $callback, $args)" 4
.el .IP "\f(CW$obj\fR\->\fBsoap11HandlerWrapper\fR($operation, \f(CW$callback\fR, \f(CW$args\fR)" 4
.IX Item "$obj->soap11HandlerWrapper($operation, $callback, $args)"
Inherited, see \*(L"\s-1SOAP11\s0\*(R" in XML::Compile::SOAP::Extension
.ie n .IP "$obj\->\fBsoap11OperationInit\fR($operation, $args)" 4
.el .IP "\f(CW$obj\fR\->\fBsoap11OperationInit\fR($operation, \f(CW$args\fR)" 4
.IX Item "$obj->soap11OperationInit($operation, $args)"
.PD 0
.ie n .IP "XML::Compile::Transport::SOAPHTTP\->\fBsoap11OperationInit\fR($operation, $args)" 4
.el .IP "XML::Compile::Transport::SOAPHTTP\->\fBsoap11OperationInit\fR($operation, \f(CW$args\fR)" 4
.IX Item "XML::Compile::Transport::SOAPHTTP->soap11OperationInit($operation, $args)"
.PD
Inherited, see \*(L"\s-1SOAP11\s0\*(R" in XML::Compile::SOAP::Extension
.SS "\s-1SOAP12\s0"
.IX Subsection "SOAP12"
Extends \*(L"\s-1SOAP12\s0\*(R" in XML::Compile::Transport.
.ie n .IP "$obj\->\fBsoap12ClientWrapper\fR($operation, $call, $args)" 4
.el .IP "\f(CW$obj\fR\->\fBsoap12ClientWrapper\fR($operation, \f(CW$call\fR, \f(CW$args\fR)" 4
.IX Item "$obj->soap12ClientWrapper($operation, $call, $args)"
Inherited, see \*(L"\s-1SOAP12\s0\*(R" in XML::Compile::SOAP::Extension
.ie n .IP "$obj\->\fBsoap12HandlerWrapper\fR($operation, $callback, $args)" 4
.el .IP "\f(CW$obj\fR\->\fBsoap12HandlerWrapper\fR($operation, \f(CW$callback\fR, \f(CW$args\fR)" 4
.IX Item "$obj->soap12HandlerWrapper($operation, $callback, $args)"
Inherited, see \*(L"\s-1SOAP12\s0\*(R" in XML::Compile::SOAP::Extension
.ie n .IP "$obj\->\fBsoap12OperationInit\fR($operation, $args)" 4
.el .IP "\f(CW$obj\fR\->\fBsoap12OperationInit\fR($operation, \f(CW$args\fR)" 4
.IX Item "$obj->soap12OperationInit($operation, $args)"
.PD 0
.ie n .IP "XML::Compile::Transport::SOAPHTTP\->\fBsoap12OperationInit\fR($operation, $args)" 4
.el .IP "XML::Compile::Transport::SOAPHTTP\->\fBsoap12OperationInit\fR($operation, \f(CW$args\fR)" 4
.IX Item "XML::Compile::Transport::SOAPHTTP->soap12OperationInit($operation, $args)"
.PD
Inherited, see \*(L"\s-1SOAP12\s0\*(R" in XML::Compile::SOAP::Extension
.SS "Accessors"
.IX Subsection "Accessors"
Extends \*(L"Accessors\*(R" in XML::Compile::Transport.
.ie n .IP "$obj\->\fBaddress\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaddress\fR()" 4
.IX Item "$obj->address()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::Transport
.ie n .IP "$obj\->\fBaddresses\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaddresses\fR()" 4
.IX Item "$obj->addresses()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::Transport
.ie n .IP "$obj\->\fBcharset\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcharset\fR()" 4
.IX Item "$obj->charset()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::Transport
.ie n .IP "$obj\->\fBdefaultUserAgent\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultUserAgent\fR()" 4
.IX Item "$obj->defaultUserAgent()"
.PD 0
.IP "XML::Compile::Transport::SOAPHTTP\->\fBdefaultUserAgent\fR()" 4
.IX Item "XML::Compile::Transport::SOAPHTTP->defaultUserAgent()"
.PD
[3.07] Returns the used LWP::UserAgent, available after the compilation
of the \s-1SOAP\s0 call(s).
.ie n .IP "$obj\->\fBuserAgent\fR( [$agent|<undef, %options>] )" 4
.el .IP "\f(CW$obj\fR\->\fBuserAgent\fR( [$agent|<undef, \f(CW%options\fR>] )" 4
.IX Item "$obj->userAgent( [$agent|<undef, %options>] )"
Returns the User Agent which will be used.  You may change the
configuration of the \f(CW$agent\fR (the returned LWP::UserAgent object)
or provide one yourself.  See also new(user_agent).
.Sp
Changes to the agent configuration can be made before or after the
compilation, or even inbetween \s-1SOAP\s0 calls.
.SS "Handlers"
.IX Subsection "Handlers"
Extends \*(L"Handlers\*(R" in XML::Compile::Transport.
.ie n .IP "$obj\->\fBcompileClient\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileClient\fR(%options)" 4
.IX Item "$obj->compileClient(%options)"
Compile an \s-1HTTP\s0 client handler.  Returned is a subroutine which is called
with a text represenation of the \s-1XML\s0 request, or an XML::LibXML tree.
In \s-1SCALAR\s0 context, an XML::LibXML parsed tree of the answer message
is returned.  In \s-1LIST\s0 context, that answer is followed by a \s-1HASH\s0 which
contains trace information.
.Sp
.Vb 10
\& \-Option    \-\-Defined in             \-\-Default
\&  action                               \*(Aq\*(Aq
\&  header                               <created>
\&  hook        XML::Compile::Transport  <undef>
\&  kind                                 \*(Aqrequest\-response\*(Aq
\&  method                               \*(AqPOST\*(Aq
\&  mime_type                            <depends on soap version>
\&  mpost_id                             42
\&  soap                                 \*(AqSOAP11\*(Aq
\&  xml_format  XML::Compile::Transport  0
.Ve
.RS 4
.IP "action => \s-1URI\s0" 2
.IX Item "action => URI"
.PD 0
.IP "header => HTTP::Headers object" 2
.IX Item "header => HTTP::Headers object"
.PD
Versions of XML::Compile, XML::Compile::SOAP, and \s-1LWP\s0 will be
added to simplify bug reports.
.IP "hook => \s-1CODE\s0" 2
.IX Item "hook => CODE"
.PD 0
.IP "kind => \s-1DIRECTION\s0" 2
.IX Item "kind => DIRECTION"
.PD
What kind of interactie, based on the four types defined by \s-1\fIWSDL\s0\fR\|(1):
\&\f(CW\*(C`notification\-operation\*(C'\fR (server initiated, no answer required),
\&\f(CW\*(C`one\-way\*(C'\fR (client initiated, no answer required), \f(CW\*(C`request\-response\*(C'\fR
(client initiated, the usual in both directions), \f(CW\*(C`solicit\-response\*(C'\fR (server
initiated \*(L"challenge\*(R").
.IP "method => '\s-1POST\s0'|'M\-POST'" 2
.IX Item "method => 'POST'|'M-POST'"
With \f(CW\*(C`POST\*(C'\fR, you get the standard \s-1HTTP\s0 exchange.  The \f(CW\*(C`M\-POST\*(C'\fR is
implements the (Microsoft) \s-1HTTP\s0 Extension Framework.  Some servers
accept both, other require a specific request.
.IP "mime_type => \s-1STRING\s0" 2
.IX Item "mime_type => STRING"
.PD 0
.IP "mpost_id => \s-1INTEGER\s0" 2
.IX Item "mpost_id => INTEGER"
.PD
With method \f(CW\*(C`M\-POST\*(C'\fR, the header extension fields require (any) number
to be grouped.
.IP "soap => '\s-1SOAP11\s0'|'\s-1SOAP12\s0'|OBJECT" 2
.IX Item "soap => 'SOAP11'|'SOAP12'|OBJECT"
.PD 0
.IP "xml_format => 0|1|2" 2
.IX Item "xml_format => 0|1|2"
.RE
.RS 4
.PD
.Sp
example: create a client
.Sp
.Vb 3
\& my $trans = XML::Compile::Transport::SOAPHTTP\->new
\&   ( address => \*(Aqhttp://www.stockquoteserver.com/StockQuote\*(Aq
\&   );
\&
\& my $call = $trans\->compileClient
\&   ( action  => \*(Aqhttp://example.com/GetLastTradePrice\*(Aq
\&   );
\&
\& # $request and $answer are XML::LibXML trees!
\& # see XML::Compile::SOAP::Client::compileClient() for wrapper which
\& # converts from and to Perl data structures.
\&
\& my ($answer, $trace) = $call\->($request);
\& my $answer = $call\->($request); # drop $trace info immediately
.Ve
.RE
.ie n .IP "$obj\->\fBheaderAddVersions\fR($header)" 4
.el .IP "\f(CW$obj\fR\->\fBheaderAddVersions\fR($header)" 4
.IX Item "$obj->headerAddVersions($header)"
.PD 0
.IP "XML::Compile::Transport::SOAPHTTP\->\fBheaderAddVersions\fR($header)" 4
.IX Item "XML::Compile::Transport::SOAPHTTP->headerAddVersions($header)"
.PD
Adds some lines about module versions, which may help debugging
or error reports.  This is called when a new client or server
is being created.
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\s0\*(R" in XML::Compile::Transport.
.SH "Helpers"
.IX Header "Helpers"
Extends \*(L"Helpers\*(R" in XML::Compile::Transport.
.IP "XML::Compile::Transport::SOAPHTTP\->\fBregister\fR($uri)" 4
.IX Item "XML::Compile::Transport::SOAPHTTP->register($uri)"
Inherited, see \*(L"Helpers\*(R" in XML::Compile::Transport
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-SOAP distribution version 3.21,
built on January 11, 2017. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR .
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2017 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
