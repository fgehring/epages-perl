.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CreditCard 3"
.TH CreditCard 3 "2009-09-28" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"Business::CreditCard" \- Validate/generate credit card checksums/names
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Business::CreditCard;
\& 
\&    print validate("5276 4400 6542 1319");
\&    print cardtype("5276 4400 6542 1319");
\&    print generate_last_digit("5276 4400 6542 131");
.Ve
.PP
Business::CreditCard is available at a \s-1CPAN\s0 site near you.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These subroutines tell you whether a credit card number is
self-consistent \*(-- whether the last digit of the number is a valid
checksum for the preceding digits.
.PP
The \fIvalidate()\fR subroutine returns 1 if the card number provided passes
the checksum test, and 0 otherwise.
.PP
The \fIcardtype()\fR subroutine returns a string containing the type of
card.  The list of possible return values is more comprehensive than it used
to be, but additions are still most welcome.
.PP
Possible return values are:
.PP
.Vb 12
\&  VISA card
\&  MasterCard
\&  Discover card
\&  American Express card
\&  enRoute
\&  JCB
\&  BankCard
\&  Switch
\&  Solo
\&  China Union Pay
\&  Laser
\&  Unknown
.Ve
.PP
\&\*(L"Not a credit card\*(R" is returned on obviously invalid data values.
.PP
Versions before 0.31 may also have returned \*(L"Diner's Club/Carte Blanche\*(R" (these
cards are now recognized as \*(L"Discover card\*(R").
.PP
As of 0.30, \fIcardtype()\fR will accept a partial card masked with \*(L"x\*(R", \*(L"X', \*(R".\*(L",
\&\*(R"*\*(L" or \*(R"_".  Only the first 2\-6 digits and the length are significant;
whitespace and dashes are removed.  To recognize just Visa, MasterCard and
Amex, you only need the first two digits; to recognize almost all cards
except some Switch cards, you need the first four digits, and to recognize
all cards including the remaining Switch cards, you need the first six
digits.
.PP
The \fIgenerate_last_digit()\fR subroutine computes and returns the last
digit of the card given the preceding digits.  With a 16\-digit card,
you provide the first 15 digits; the subroutine returns the sixteenth.
.PP
This module does \fInot\fR tell you whether the number is on an actual
card, only whether it might conceivably be on a real card.  To verify
whether a card is real, or whether it's been stolen, or to actually process
charges, you need a Merchant account.  See Business::OnlinePayment.
.PP
These subroutines will also work if you provide the arguments
as numbers instead of strings, e.g. \f(CW\*(C`validate(5276440065421319)\*(C'\fR.
.SH "PROCESSING AGREEMENTS"
.IX Header "PROCESSING AGREEMENTS"
Credit card issuers have recently been forming agreements to process cards on
other networks, in which one type of card is processed as another card type.
.PP
By default, Business::CreditCard returns the type the card should be treated as
in the \s-1US\s0 and Canada.  You can change this to return the type the card should
be treated as in a different country by setting
\&\f(CW$Business::CreditCard::Country\fR to your two-letter country code.  This
is probably what you want to determine if you accept the card, or which
merchant agreement it is processed through.
.PP
You can also set \f(CW$Business::CreditCard::Country\fR to a false value such
as the empty string to return the \*(L"base\*(R" card type.  This is probably only
useful for informational purposes when used along with the default type.
.PP
Here are the currently known agreements:
.IP "Most Diner's club is now identified as Discover.  (This supercedes the earlier identification of some Diner's club cards as MasterCard inside the \s-1US\s0 and Canada.)" 4
.IX Item "Most Diner's club is now identified as Discover.  (This supercedes the earlier identification of some Diner's club cards as MasterCard inside the US and Canada.)"
.PD 0
.IP "\s-1JCB\s0 cards in the 3528\-3589 range are identified as Discover inside the \s-1US\s0 and Canada." 4
.IX Item "JCB cards in the 3528-3589 range are identified as Discover inside the US and Canada."
.IP "China Union Pay cards are identified as Discover cards outside China." 4
.IX Item "China Union Pay cards are identified as Discover cards outside China."
.PD
.SH "NOTE ON INTENDED PURPOSE"
.IX Header "NOTE ON INTENDED PURPOSE"
This module is for verifying \fIreal world\fR \fBcredit cards\fR.  It is \fB\s-1NOT\s0\fR a
pedantic implementation of the \s-1ISO\s0 7812 standard, a general-purpose \s-1LUHN\s0
implementation, or intended for use with \*(L"creditcard-like account numbers\*(R".
.SH "AUTHOR"
.IX Header "AUTHOR"
Jon Orwant
.PP
The Perl Journal and \s-1MIT\s0 Media Lab
.PP
orwant@tpj.com
.PP
Current maintainer is Ivan Kohler <ivan\-business\-creditcard@420.am>.
Please don't bother Jon with emails about this module.
.PP
Lee Lawrence <LeeL@aspin.co.uk>, Neale Banks <neale@lowendale.com.au> and
Max Becker <Max.Becker@firstgate.com> contributed support for additional card
types.  Lee also contributed a working test.pl.  Alexandr Ciornii
<alexchorny@gmail.com> contributed code cleanups.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 1995,1996,1997 Jon Orwant
Copyright (C) 2001\-2006 Ivan Kohler
Copyright (C) 2007\-2009 Freeside Internet Services, Inc.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Business::CreditCard::Object is a wrapper around Business::CreditCard
providing an \s-1OO\s0 interface.  Assistance integrating this into the base
Business::CreditCard distribution is welcome.
.PP
Business::OnlinePayment is a framework for processing online payments
including modules for various payment gateways.
