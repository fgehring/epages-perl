.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "UML::Class::Simple 3"
.TH UML::Class::Simple 3 "2013-01-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
UML::Class::Simple \- Render simple UML class diagrams, by loading the code
.SH "VERSION"
.IX Header "VERSION"
This document describes \f(CW\*(C`UML::Class::Simple\*(C'\fR 0.19 released by 26 January 2013.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use UML::Class::Simple;
\&
\&    # produce a class diagram for Alias\*(Aqs PPI
\&    # which has already installed to your perl:
\&
\&    @classes = classes_from_runtime("PPI", qr/^PPI::/);
\&    $painter = UML::Class::Simple\->new(\e@classes);
\&    $painter\->as_png(\*(Aqppi.png\*(Aq);
\&
\&    # produce a class diagram for your CPAN module on the disk
\&
\&    @classes = classes_from_files([\*(Aqlib/Foo.pm\*(Aq, \*(Aqlib/Foo/Bar.pm\*(Aq]);
\&    $painter = UML::Class::Simple\->new(\e@classes);
\&
\&    # we can explicitly specify the image size
\&    $painter\->size(5, 3.6); # in inches
\&
\&    # ...and change the default title background color:
\&    $painter\->node_color(\*(Aq#ffffff\*(Aq); # defaults to \*(Aq#f1e1f4\*(Aq
\&
\&    # only show public methods and properties
\&    $painter\->public_only(1);
\&
\&    # hide all methods from parent classes
\&    $painter\->inherited_methods(0);
\&
\&    $painter\->as_png(\*(Aqmy_module.png\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`UML::Class::Simple\*(C'\fR is a Perl \s-1CPAN\s0 module that generates \s-1UML\s0 class
diagrams (\s-1PNG\s0 format, \s-1GIF\s0 format, \s-1XMI\s0 format, or dot source) automatically
from Perl 5 source or Perl 5 runtime.
.PP
Perl developers can use this module to obtain pretty class diagrams
for arbitrary existing Perl class libraries (including modern perl \s-1OO\s0
modules based on Moose.pm), by only a single command. Companies can
also use the resulting pictures to visualize the project hierarchy and
embed them into their documentation.
.PP
The users no longer need to drag a mouse on the screen so as to draw
figures themselves or provide any specs other than the source code of
their own libraries that they want to depict. This module does all the
jobs for them! :)
.PP
Methods created on-the-fly (in \s-1BEGIN\s0 or some such) can be inspected. Accessors created by modules Class::Accessor, Class::Accessor::Fast, and
Class::Accessor::Grouped are recognized as \*(L"properties\*(R" rather than \*(L"methods\*(R". Intelligent distingishing between Perl methods and properties other than that is not provided.
.PP
You know, I was really impressed by the outputs of UML::Sequence, so I
decided to find something to (automatically) get pretty class diagrams
too. The images from Autodia's Graphviz backend didn't quite fit my needs
when I was making some slides for my presentations.
.PP
I think most of the time you just want to use the command-line utility
umlclass.pl offered by this module (just like me). See the
documentation of umlclass.pl for details.
.SH "SAMPLE OUTPUTS"
.IX Header "SAMPLE OUTPUTS"
.IP "\s-1PPI\s0" 4
.IX Item "PPI"
<http://perlcabal.org/agent/images/ppi_small.png>
.Sp
(See also \fIsamples/ppi_small.png\fR in the distribution.)
.IP "Moose" 4
.IX Item "Moose"
<http://perlcabal.org/agent/images/moose_small.png>
.Sp
(See also \fIsamples/moose_small.png\fR in the distribution.)
.IP "\s-1FAST\s0" 4
.IX Item "FAST"
<http://perlcabal.org/agent/images/fast.png>
.Sp
(See also \fIsamples/fast.png\fR in the distribution.)
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.ie n .IP "classes_from_runtime($module_to_load, $regex?)" 4
.el .IP "classes_from_runtime($module_to_load, \f(CW$regex\fR?)" 4
.IX Item "classes_from_runtime($module_to_load, $regex?)"
.PD 0
.ie n .IP "classes_from_runtime(\e@modules_to_load, $regex?)" 4
.el .IP "classes_from_runtime(\e@modules_to_load, \f(CW$regex\fR?)" 4
.IX Item "classes_from_runtime(@modules_to_load, $regex?)"
.PD
Returns a list of class (or package) names by inspecting the perl runtime environment.
\&\f(CW$module_to_load\fR is the \fImain\fR module name to load while \f(CW$regex\fR is
a perl regex used to filter out interesting package names.
.Sp
The second argument can be omitted.
.ie n .IP "classes_from_files($pmfile, $regex?)" 4
.el .IP "classes_from_files($pmfile, \f(CW$regex\fR?)" 4
.IX Item "classes_from_files($pmfile, $regex?)"
.PD 0
.ie n .IP "classes_from_files(\e@pmfiles, $regex?)" 4
.el .IP "classes_from_files(\e@pmfiles, \f(CW$regex\fR?)" 4
.IX Item "classes_from_files(@pmfiles, $regex?)"
.PD
Returns a list of class (or package) names by scanning through the perl source files
given in the first argument. \f(CW$regex\fR is used to filter out interesting package names.
.Sp
The second argument can be omitted.
.IP "exclude_by_paths" 4
.IX Item "exclude_by_paths"
Excludes package names via specifying one or more paths where the corresponding
modules were installed into. For example:
.Sp
.Vb 1
\&    @classes = exclude_by_paths(\e@classes, \*(AqC:/perl/lib\*(Aq);
\&
\&    @classes = exclude_by_paths(\e@classes, \*(Aq/home/foo\*(Aq, \*(Aq/System/Library\*(Aq);
.Ve
.IP "grep_by_paths" 4
.IX Item "grep_by_paths"
Filters out package names via specifying one or more paths where the corresponding
modules were installed into. For instance:
.Sp
.Vb 1
\&    @classes = grep_by_paths(\e@classes, \*(Aq/home/malon\*(Aq, \*(Aq./blib/lib\*(Aq);
.Ve
.PP
All these subroutines are exported by default.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """$obj\->new( [@class_names] )""" 4
.el .IP "\f(CW$obj\->new( [@class_names] )\fR" 4
.IX Item "$obj->new( [@class_names] )"
Create a new \f(CW\*(C`UML::Class::Simple\*(C'\fR instance with the specified class name list.
This list can either be constructed manually or by the utility functions
\&\f(CW\*(C`classes_from_runtime\*(C'\fR and \f(CW\*(C`classes_from_files\*(C'\fR.
.ie n .IP """$obj\->as_png($filename?)""" 4
.el .IP "\f(CW$obj\->as_png($filename?)\fR" 4
.IX Item "$obj->as_png($filename?)"
Generate \s-1PNG\s0 image file when \f(CW$filename\fR is given. It returns
binary data when \f(CW$filename\fR is not given.
.ie n .IP """$obj\->as_gif($filename?)""" 4
.el .IP "\f(CW$obj\->as_gif($filename?)\fR" 4
.IX Item "$obj->as_gif($filename?)"
Similar to \f(CW\*(C`as_png\*(C'\fR, bug generate a GIF-format image. Note that, for many graphviz installations, \f(CW\*(C`gif\*(C'\fR support is disabled by default. So you'll probably see the following error message:
.Sp
.Vb 4
\&    Format: "gif" not recognized. Use one of: bmp canon cmap cmapx cmapx_np
\&        dia dot fig gtk hpgl ico imap imap_np ismap jpe jpeg jpg mif mp
\&        pcl pdf pic plain plain\-ext png ps ps2 svg svgz tif tiff vml
\&        vmlz vtx xdot xlib
.Ve
.ie n .IP """$obj\->as_dom()""" 4
.el .IP "\f(CW$obj\->as_dom()\fR" 4
.IX Item "$obj->as_dom()"
Return the internal \s-1DOM\s0 tree used to generate dot and png. The tree's structure
looks like this:
.Sp
.Vb 10
\&  {
\&    \*(Aqclasses\*(Aq => [
\&                   {
\&                     \*(Aqsubclasses\*(Aq => [],
\&                     \*(Aqmethods\*(Aq => [],
\&                     \*(Aqname\*(Aq => \*(AqPPI::Structure::List\*(Aq,
\&                     \*(Aqproperties\*(Aq => []
\&                   },
\&                   {
\&                     \*(Aqsubclasses\*(Aq => [
\&                                       \*(AqPPI::Structure::Block\*(Aq,
\&                                       \*(AqPPI::Structure::Condition\*(Aq,
\&                                       \*(AqPPI::Structure::Constructor\*(Aq,
\&                                       \*(AqPPI::Structure::ForLoop\*(Aq,
\&                                       \*(AqPPI::Structure::Unknown\*(Aq
\&                                     ],
\&                     \*(Aqmethods\*(Aq => [
\&                                    \*(Aq_INSTANCE\*(Aq,
\&                                    \*(Aq_set_finish\*(Aq,
\&                                    \*(Aqbraces\*(Aq,
\&                                    \*(Aqcontent\*(Aq,
\&                                    \*(Aqnew\*(Aq,
\&                                    \*(Aqrefaddr\*(Aq,
\&                                    \*(Aqstart\*(Aq,
\&                                    \*(Aqtokens\*(Aq
\&                                  ],
\&                     \*(Aqname\*(Aq => \*(AqPPI::Structure\*(Aq,
\&                     \*(Aqproperties\*(Aq => []
\&                   },
\&                   ...
\&                ]
\&  }
.Ve
.Sp
You can adjust the data structure and feed it back to \f(CW$obj\fR via
the \f(CW\*(C`set_dom\*(C'\fR method.
.ie n .IP """$obj\->set_dom($dom)""" 4
.el .IP "\f(CW$obj\->set_dom($dom)\fR" 4
.IX Item "$obj->set_dom($dom)"
Set the internal \s-1DOM\s0 structure to \f(CW$obj\fR. This will be used to
generate the dot source and thus the \s-1PNG/GIF\s0 images.
.ie n .IP """$obj\->as_dot()""" 4
.el .IP "\f(CW$obj\->as_dot()\fR" 4
.IX Item "$obj->as_dot()"
Return the Graphviz dot source code generated by \f(CW$obj\fR.
.ie n .IP """$obj\->set_dot($dot)""" 4
.el .IP "\f(CW$obj\->set_dot($dot)\fR" 4
.IX Item "$obj->set_dot($dot)"
Set the dot source code used by \f(CW$obj\fR.
.ie n .IP """$obj\->as_xmi($filename)""" 4
.el .IP "\f(CW$obj\->as_xmi($filename)\fR" 4
.IX Item "$obj->as_xmi($filename)"
Generate \s-1XMI\s0 model file when \f(CW$filename\fR is given. It returns
XML::LibXML::Document object when \f(CW$filename\fR is not given.
.ie n .IP """can_run($path)""" 4
.el .IP "\f(CWcan_run($path)\fR" 4
.IX Item "can_run($path)"
Copied from IPC::Cmd to test if \f(CW$path\fR is a runnable program. This code
is copyright by IPC::Cmd's author.
.ie n .IP """$prog = $obj\->dot_prog()""" 4
.el .IP "\f(CW$prog = $obj\->dot_prog()\fR" 4
.IX Item "$prog = $obj->dot_prog()"
.PD 0
.ie n .IP """$obj\->dot_prog($prog)""" 4
.el .IP "\f(CW$obj\->dot_prog($prog)\fR" 4
.IX Item "$obj->dot_prog($prog)"
.PD
Get or set the dot program path.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.ie n .IP """$obj\->size($width, $height)""" 4
.el .IP "\f(CW$obj\->size($width, $height)\fR" 4
.IX Item "$obj->size($width, $height)"
.PD 0
.ie n .IP """($width, $height) = $obj\->size""" 4
.el .IP "\f(CW($width, $height) = $obj\->size\fR" 4
.IX Item "($width, $height) = $obj->size"
.PD
Set/get the size of the output images, in inches.
.ie n .IP """$obj\->public_only($bool)""" 4
.el .IP "\f(CW$obj\->public_only($bool)\fR" 4
.IX Item "$obj->public_only($bool)"
.PD 0
.ie n .IP """$bool = $obj\->public_only""" 4
.el .IP "\f(CW$bool = $obj\->public_only\fR" 4
.IX Item "$bool = $obj->public_only"
.PD
When the \f(CW\*(C`public_only\*(C'\fR property is set to true, only public methods or properties
are shown. It defaults to false.
.ie n .IP """$obj\->inherited_methods($bool)""" 4
.el .IP "\f(CW$obj\->inherited_methods($bool)\fR" 4
.IX Item "$obj->inherited_methods($bool)"
.PD 0
.ie n .IP """$bool = $obj\->inherited_methods""" 4
.el .IP "\f(CW$bool = $obj\->inherited_methods\fR" 4
.IX Item "$bool = $obj->inherited_methods"
.PD
When the \f(CW\*(C`inherited_methods\*(C'\fR property is set to false, then all methods,
inherited from parent classes, are not shown.
It defaults to true.
.ie n .IP """$obj\->node_color($color)""" 4
.el .IP "\f(CW$obj\->node_color($color)\fR" 4
.IX Item "$obj->node_color($color)"
.PD 0
.ie n .IP """$color = $obj\->node_color""" 4
.el .IP "\f(CW$color = $obj\->node_color\fR" 4
.IX Item "$color = $obj->node_color"
.PD
Set/get the background color for the class nodes. It defaults to \f(CW\*(Aq#f1e1f4\*(Aq\fR.
.ie n .IP """$obj\->moose_roles($bool)""" 4
.el .IP "\f(CW$obj\->moose_roles($bool)\fR" 4
.IX Item "$obj->moose_roles($bool)"
When this property is set to true values, then relationships between Moose::Role packages and their consumers
will be drawn in the output. Default to false.
.ie n .IP """$obj\->display_methods($bool)""" 4
.el .IP "\f(CW$obj\->display_methods($bool)\fR" 4
.IX Item "$obj->display_methods($bool)"
When this property is set to false, then class methods will not be shown in the output. Default to true.
.ie n .IP """$obj\->display_inheritance($bool)""" 4
.el .IP "\f(CW$obj\->display_inheritance($bool)\fR" 4
.IX Item "$obj->display_inheritance($bool)"
When this property is set to false, then the class inheritance relationship
will not be drawn in the output. Default to false.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
Please download and intall a recent Graphviz release from its home:
.PP
<http://www.graphviz.org/>
.PP
\&\f(CW\*(C`UML::Class::Simple\*(C'\fR requires the \s-1HTML\s0 label feature which is only
available on versions of Graphviz that are newer than mid-November 2003.
In particular, it is not part of release 1.10.
.PP
Add Graphviz's \fIbin/\fR path to your \s-1PATH\s0 environment. This module needs its
\&\fIdot\fR utility.
.PP
Grab this module from the \s-1CPAN\s0 mirror near you and run the following commands:
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
For windows users, use \f(CW\*(C`nmake\*(C'\fR instead of \f(CW\*(C`make\*(C'\fR.
.PP
Note that it's recommended to use the \f(CW\*(C`cpan\*(C'\fR utility to install \s-1CPAN\s0 modules.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.IP "\(bu" 4
It's pretty hard to distinguish perl methods from properties (actually they're both
implemented by subs in perl). Currently only accessors created by Class::Accessor, Class::Accessor::Fast, and Class::Accessor::Grouped are provided. (Thanks to the patches from Adam Lounds and Dave Howorth!) If you have any other good idea on this issue, please drop me a line ;)
.IP "\(bu" 4
Only the inheritance relationships are shown in the images. I believe
other subtle
relations may mess up the Graphviz layouter. Hence the \*(L"::Simple\*(R" suffix in
this module name.
.IP "\(bu" 4
Unlike Autodia, at this moment only Graphviz and \s-1XMI\s0 backends are provided.
.IP "\(bu" 4
There's no way to recognize \fIreal\fR perl classes automatically. After all, Perl 5's
classes are implemented by packages. I think Perl 6 will make my life much easier.
.IP "\(bu" 4
To prevent potential naming confusion. I'm using Perl's \f(CW\*(C`::\*(C'\fR namespace
separator
in the class diagrams instead of dot (\f(CW\*(C`.\*(C'\fR) chosen by the \s-1UML\s0 standard.
One can argue that following \s-1UML\s0 standards is more important since people
in the same team may
use different programming languages, but I think it's not the case for
the majority (including myself) ;\-)
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Add more unit tests.
.IP "\(bu" 4
Add support for more image formats, such as \f(CW\*(C`as_ps\*(C'\fR, \f(CW\*(C`as_jpg\*(C'\fR, and etc.
.IP "\(bu" 4
Plot class relationships other than inheritance on the user's request.
.IP "\(bu" 4
Provide backends other than Graphviz.
.PP
Please send me your wish list by emails or preferably via the \s-1CPAN\s0 \s-1RT\s0 site.
I'll add them here or even implement them promptly if I'm also interested
in your (crazy) ideas. ;\-)
.SH "BUGS"
.IX Header "BUGS"
There must be some serious bugs lurking somewhere;
if you found one, please report
it to <http://rt.cpan.org> or contact the author directly.
.SH "ACKNOWLEDGEMENT"
.IX Header "ACKNOWLEDGEMENT"
I must thank Adam Kennedy (Alias) for writing the excellent \s-1PPI\s0 and
Class::Inspector modules. umlclass.pl uses the former to extract
package names from user's \fI.pm\fR files or the latter to retrieve the function list of a
specific package.
.PP
I'm also grateful to Christopher Malon since he has (unintentionally)
motivated me to turn the original hack into this \s-1CPAN\s0 module. ;\-)
.SH "SOURCE CONTROL"
.IX Header "SOURCE CONTROL"
You can always grab the latest version from the following GitHub
repository:
.PP
https://github.com/agentzh/uml\-class\-simple\-pm <https://github.com/agentzh/uml-class-simple-pm>
.PP
It has anonymous access to all.
.PP
If you have the tuits to help out with this module, please let me know.
I have a dream to keep sending out commit bits like Audrey Tang. ;\-)
.SH "AUTHORS"
.IX Header "AUTHORS"
Yichun \*(L"agentzh\*(R" Zhang (\s-1XXX\s0) \f(CW\*(C`<agentzh@gmail.com>\*(C'\fR, CloudFlare Inc.
.PP
Maxim Zenin \f(CW\*(C`<max@foggy.ru>\*(C'\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006\-2013 by Yichun Zhang (\s-1XXX\s0), CloudFlare Inc.
Copyright (c) 2007\-2013 by Maxim Zenin.
.PP
This library is free software; you can redistribute it and/or modify it under
the same terms as perl itself, either Artistic and \s-1GPL\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
umlclass.pl, Autodia, UML::Sequence, \s-1PPI\s0, Class::Inspector, XML::LibXML.
