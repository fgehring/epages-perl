.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Iconv 3"
.TH Iconv 3 "2007-10-17" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Iconv \- Perl interface to iconv() codeset conversion function
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Text::Iconv;
\&  $converter = Text::Iconv\->new("fromcode", "tocode");
\&  $converted = $converter\->convert("Text to convert");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBText::Iconv\fR module provides a Perl interface to the \fIiconv()\fR
function as defined by the Single \s-1UNIX\s0 Specification.
.PP
The \fIconvert()\fR method converts the encoding of characters in the input
string from the \fIfromcode\fR codeset to the \fItocode\fR codeset, and
returns the result.
.PP
Settings of \fIfromcode\fR and \fItocode\fR and their permitted combinations
are implementation-dependent.  Valid values are specified in the
system documentation; the \fIiconv\fR\|(1) utility should also provide a \fB\-l\fR
option that lists all supported codesets.
.SS "Utility methods"
.IX Subsection "Utility methods"
\&\fBText::Iconv\fR objects also provide the following methods:
.PP
\&\fIretval()\fR returns the return value of the underlying \fIiconv()\fR function
for the last conversion; according to the Single \s-1UNIX\s0 Specification,
this value indicates \*(L"the number of non-identical conversions
performed.\*(R"  Note, however, that iconv implementations vary widely in
the interpretation of this specification.
.PP
This method can be called after calling \fIconvert()\fR, e.g.:
.PP
.Vb 2
\&  $result = $converter\->convert("lorem ipsum dolor sit amet");
\&  $retval = $converter\->retval;
.Ve
.PP
When called before the first call to \fIconvert()\fR, or if an error occured
during the conversion, \fIretval()\fR returns \fBundef\fR.
.PP
\&\fIget_attr()\fR: This method is only available with \s-1GNU\s0 libiconv, otherwise
it throws an exception.  The \fIget_attr()\fR method allows you to query
various attributes which influence the behavior of \fIconvert()\fR.  The
currently supported attributes are \fItrivialp\fR, \fItransliterate\fR, and
\&\fIdiscard_ilseq\fR, e.g.:
.PP
.Vb 1
\&  $state = $converter\->get_attr("transliterate");
.Ve
.PP
See \fIiconvctl\fR\|(3) for details.  To ensure portability to other iconv
implementations you should first check for the availability of this
method using \fBeval {}\fR, e.g.:
.PP
.Vb 9
\&    eval { $conv\->get_attr("trivialp") };
\&    if ($@)
\&    {
\&      # get_attr() is not available
\&    }
\&    else
\&    {
\&      # get_attr() is available
\&    }
.Ve
.PP
This method should be considered experimental.
.PP
\&\fIset_attr()\fR: This method is only available with \s-1GNU\s0 libiconv, otherwise
it throws an exception.  The \fIset_attr()\fR method allows you to set
various attributes which influence the behavior of \fIconvert()\fR.  The
currently supported attributes are \fItransliterate\fR and
\&\fIdiscard_ilseq\fR, e.g.:
.PP
.Vb 1
\&  $state = $converter\->set_attr("transliterate");
.Ve
.PP
See \fIiconvctl\fR\|(3) for details.  To ensure portability to other iconv
implementations you should first check for the availability of this
method using \fBeval {}\fR, cf. the description of \fIset_attr()\fR above.
.PP
This method should be considered experimental.
.SH "ERRORS"
.IX Header "ERRORS"
If the conversion can't be initialized an exception is raised (using
\&\fIcroak()\fR).
.SS "Handling of conversion errors"
.IX Subsection "Handling of conversion errors"
\&\fIText::Iconv\fR provides a class attribute \fBraise_error\fR and a
corresponding class method for setting and getting its value.  The
handling of errors during conversion depends on the setting of this
attribute.  If \fBraise_error\fR is set to a true value, an exception is
raised; otherwise, the \fIconvert()\fR method only returns \fBundef\fR.  By
default \fBraise_error\fR is false.  Example usage:
.PP
.Vb 3
\&  Text::Iconv\->raise_error(1);     # Conversion errors raise exceptions
\&  Text::Iconv\->raise_error(0);     # Conversion errors return undef
\&  $a = Text::Iconv\->raise_error(); # Get current setting
.Ve
.SS "Per-object handling of conversion errors"
.IX Subsection "Per-object handling of conversion errors"
As an experimental feature, \fIText::Iconv\fR also provides an instance
attribute \fBraise_error\fR and a corresponding method for setting and
getting its value.  If \fBraise_error\fR is \fBundef\fR, the class-wide
settings apply.  If \fBraise_error\fR is 1 or 0 (true or false), the
object settings override the class-wide settings.
.PP
Consult \fIiconv\fR\|(3) for details on errors that might occur.
.SS "Conversion of \fBundef\fP"
.IX Subsection "Conversion of undef"
Converting \fBundef\fR, e.g.,
.PP
.Vb 1
\&  $converted = $converter\->convert(undef);
.Ve
.PP
always returns \fBundef\fR.  This is not considered an error.
.SH "NOTES"
.IX Header "NOTES"
The supported codesets, their names, the supported conversions, and
the quality of the conversions are all system-dependent.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Piotrowski <mxp@dynalabs.de>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIiconv\fR\|(1), \fIiconv\fR\|(3)
