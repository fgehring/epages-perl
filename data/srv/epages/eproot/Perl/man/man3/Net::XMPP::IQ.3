.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::XMPP::IQ 3"
.TH Net::XMPP::IQ 3 "2011-04-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::XMPP::IQ \- XMPP Info/Query Module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  Net::XMPP::IQ is a companion to the Net::XMPP module. It
\&  provides the user a simple interface to set and retrieve all
\&  parts of an XMPP IQ.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 4
\&  Net::XMPP::IQ differs from the other Net::XMPP::* modules in that
\&  the XMLNS of the query is split out into a submodule under
\&  IQ.  For specifics on each module please view the documentation
\&  for the Net::XMPP::Namespaces module.
\&
\&  A Net::XMPP::IQ object is passed to the callback function for the
\&  message.  Also, the first argument to the callback functions is the
\&  session ID from XML::Stream.  There are some cases where you might
\&  want this information, like if you created a Client that connects to
\&  two servers at once, or for writing a mini server.
\&
\&    use Net::XMPP;
\&
\&    sub iq {
\&      my ($sid,$IQ) = @_;
\&      .
\&      .
\&      my $reply = $IQ\->Reply();
\&      my $replyQuery\->GetQuery();
\&      .
\&    }
\&
\&  You now have access to all of the retrieval functions available.
\&
\&  To create a new iq to send to the server:
\&
\&    use Net::XMPP;
\&
\&    $IQ = new Net::XMPP::IQ();
\&    $IQType = $IQ\->NewChild( type );
\&    $IQType\->SetXXXXX("yyyyy");
\&
\&  Now you can call the creation functions for the IQ, and for the
\&  <query/> on the new query object itself.  See below for the <iq/>
\&  functions, and in each query module for those functions.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "General functions"
.IX Subsection "General functions"
.Vb 5
\&  Reply(%args) \- Creates a return <iq/> with the to and from
\&                 filled in correctly, and a query object already
\&                 added in.  The %args that you pass are passed
\&                 to SetIQ() and will overwrite the IQ settings
\&                 that Reply sets.
.Ve
.SS "Retrieval functions"
.IX Subsection "Retrieval functions"
.Vb 5
\&  GetTo()      \- returns either a string with the JID, or a
\&  GetTo("jid")   Net::XMPP::JID object for the person who is
\&                 going to receive the <iq/>.  To get the JID
\&                 object set the string to "jid", otherwise leave
\&                 blank for the text string.
\&
\&                 $to    = $IQ\->GetTo();
\&                 $toJID = $IQ\->GetTo("jid");
\&
\&  GetFrom()      \-  returns either a string with the JID, or a
\&  GetFrom("jid")    Net::XMPP::JID object for the person who
\&                    sent the <iq/>.  To get the JID object set
\&                    the string to "jid", otherwise leave blank for the
\&                    text string.
\&
\&                    $from    = $IQ\->GetFrom();
\&                    $fromJID = $IQ\->GetFrom("jid");
\&
\&  GetType() \- returns a string with the type <iq/> this is.
\&
\&              $type = $IQ\->GetType();
\&
\&  GetID() \- returns an integer with the id of the <iq/>.
\&
\&            $id = $IQ\->GetID();
\&
\&  GetError() \- returns a string with the text description of the error.
\&
\&               $error = $IQ\->GetError();
\&
\&  GetErrorCode() \- returns a string with the code of error.
\&
\&                   $errorCode = $IQ\->GetErrorCode();
\&
\&  GetQuery() \- returns a Net::XMPP::Stanza object that contains the data
\&               in the query of the <iq/>.  Basically, it returns the
\&               first child in the <iq/>.
\&
\&               $query = $IQ\->GetQuery();
\&
\&  GetQueryXMLNS() \- returns a string with the namespace of the query
\&                    for this <iq/>, if one exists.
\&
\&                    $xmlns = $IQ\->GetQueryXMLNS();
.Ve
.SS "Creation functions"
.IX Subsection "Creation functions"
.Vb 8
\&  SetIQ(to=>string|JID,    \- set multiple fields in the <iq/> at one
\&        from=>string|JID,    time.  This is a cumulative and over
\&        id=>string,          writing action.  If you set the "to"
\&        type=>string,        attribute twice, the second setting is
\&        errorcode=>string,   what is used.  If you set the status, and
\&        error=>string)       then set the priority then both will be in
\&                             the <iq/> tag.  For valid settings read the
\&                             specific Set functions below.
\&
\&                             $IQ\->SetIQ(type=>"get",
\&                                        to=>"bob\e@jabber.org");
\&
\&                             $IQ\->SetIQ(to=>"bob\e@jabber.org",
\&                                        errorcode=>403,
\&                                        error=>"Permission Denied");
\&
\&  SetTo(string) \- sets the to attribute.  You can either pass a string
\&  SetTo(JID)      or a JID object.  They must be a valid Jabber
\&                  Identifiers or the server will return an error message.
\&                  (ie.  bob@jabber.org, etc...)
\&
\&                  $IQ\->SetTo("bob\e@jabber.org");
\&
\&  SetFrom(string) \- sets the from attribute.  You can either pass a
\&  SetFrom(JID)      string or a JID object.  They must be a valid JIDs
\&                    or the server will return an error message.
\&                    (ie.  bob@jabber.org, etc...)
\&
\&                    $IQ\->SetFrom("me\e@jabber.org");
\&
\&  SetType(string) \- sets the type attribute.  Valid settings are:
\&
\&                    get      request information
\&                    set      set information
\&                    result   results of a get
\&                    error    there was an error
\&
\&                    $IQ\->SetType("set");
\&
\&  SetErrorCode(string) \- sets the error code of the <iq/>.
\&
\&                         $IQ\->SetErrorCode(403);
\&
\&  SetError(string) \- sets the error string of the <iq/>.
\&
\&                     $IQ\->SetError("Permission Denied");
\&
\&  NewChild(string) \- creates a new Net::XMPP::Stanza object with the
\&                     namespace in the string.  In order for this
\&                     function to work with a custom namespace, you
\&                     must define and register that namespace with the
\&                     IQ module.  For more information please read the
\&                     documentation for Net::XMPP::Stanza.
\&
\&                     $queryObj = $IQ\->NewChild("jabber:iq:auth");
\&                     $queryObj = $IQ\->NewChild("jabber:iq:roster");
\&
\&  Reply(hash) \- creates a new IQ object and populates the to/from
\&                fields.  If you specify a hash the same as with SetIQ
\&                then those values will override the Reply values.
\&
\&                $iqReply = $IQ\->Reply();
\&                $iqReply = $IQ\->Reply(type=>"result");
.Ve
.SS "Removal functions"
.IX Subsection "Removal functions"
.Vb 1
\&  RemoveTo() \- removes the to attribute from the <iq/>.
\&
\&               $IQ\->RemoveTo();
\&
\&  RemoveFrom() \- removes the from attribute from the <iq/>.
\&
\&                 $IQ\->RemoveFrom();
\&
\&  RemoveID() \- removes the id attribute from the <iq/>.
\&
\&               $IQ\->RemoveID();
\&
\&  RemoveType() \- removes the type attribute from the <iq/>.
\&
\&                 $IQ\->RemoveType();
\&
\&  RemoveError() \- removes the <error/> element from the <iq/>.
\&
\&                  $IQ\->RemoveError();
\&
\&  RemoveErrorCode() \- removes the code attribute from the <error/>
\&                      element in the <iq/>.
\&
\&                      $IQ\->RemoveErrorCode();
.Ve
.SS "Test functions"
.IX Subsection "Test functions"
.Vb 2
\&  DefinedTo() \- returns 1 if the to attribute is defined in the <iq/>,
\&                0 otherwise.
\&
\&                $test = $IQ\->DefinedTo();
\&
\&  DefinedFrom() \- returns 1 if the from attribute is defined in the
\&                  <iq/>, 0 otherwise.
\&
\&                  $test = $IQ\->DefinedFrom();
\&
\&  DefinedID() \- returns 1 if the id attribute is defined in the <iq/>,
\&                0 otherwise.
\&
\&                $test = $IQ\->DefinedID();
\&
\&  DefinedType() \- returns 1 if the type attribute is defined in the
\&                  <iq/>, 0 otherwise.
\&
\&                  $test = $IQ\->DefinedType();
\&
\&  DefinedError() \- returns 1 if <error/> is defined in the <iq/>,
\&                   0 otherwise.
\&
\&                   $test = $IQ\->DefinedError();
\&
\&  DefinedErrorCode() \- returns 1 if the code attribute is defined in
\&                       <error/>, 0 otherwise.
\&
\&                       $test = $IQ\->DefinedErrorCode();
\&
\&  DefinedQuery() \- returns 1 if there is at least one namespaced
\&                   child in the object.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ryan Eatmon
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is free software, you can redistribute it and/or modify it
under the \s-1LGPL\s0.
