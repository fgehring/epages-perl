.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Manip::Holidays 3"
.TH Date::Manip::Holidays 3 "2011-06-03" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Manip::Holidays \- describes holidays and events
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This describes the Holidays and Events sections of the config file,
and how they are used.
.PP
Holidays and events are specific days that are named. Holidays are
used in business mode calculations, events are not. Events may be used
for other calendaring operations.
.SH "HOLIDAYS"
.IX Header "HOLIDAYS"
The holiday section of the config file is used to define holidays.  Each
line is of the form:
.PP
.Vb 1
\&   STRING = HOLIDAY
.Ve
.PP
\&\s-1HOLIDAY\s0 is the name of the holiday (or it can be blank in which case
the day will still be treated as a holiday... for example the day
after Thanksgiving is often a work holiday though it is not named).
.PP
\&\s-1STRING\s0 is a string which can be parsed to give a valid date. It can be any
of the following forms:
.IP "\fBA full date\fR" 4
.IX Item "A full date"
Specific holidays can be set which occur only a single time.
.Sp
.Vb 1
\&   May 5, 2000                     = A one\-time\-only holiday
.Ve
.Sp
Any format parseable by Date::Manip::Date::parse_date can be used.
.IP "\fBA date without a year\fR" 4
.IX Item "A date without a year"
Some holidays occur every year on the same day. These can be defined
using the simple lines:
.Sp
.Vb 3
\&   Jan 1                           = New Year\*(Aqs Day
\&   Jul 4th                         = Independence Day
\&   fourth Thu in Nov               = Thanksgiving
.Ve
.Sp
These dates must be written in a form which can be parsed as a full
date by simply adding the year to the end of the string. Please refer
to the Date::Manip::Date documentation to see what forms will
work. \s-1ISO\s0 8601 dates will not work since the year comes first.
.Sp
Any format parseable by Date::Manip::Date::parse_date can be used.
.IP "\fBRecurrence\fR" 4
.IX Item "Recurrence"
The dates can be specified using recurrences:
.Sp
.Vb 2
\&   1*0:0:0:0:0:0*EASTER            = Easter
\&   1*11:0:11:0:0:0*DWD             = Veteran\*(Aqs Day
.Ve
.Sp
In cases where you are interested in business type calculations, you'll
want to define most holidays using recurrences, since they can define
when a holiday is celebrated in the financial world.  For example,
Christmas might be defined as:
.Sp
.Vb 1
\&   Dec 25               = Christmas
.Ve
.Sp
but if it falls on a weekend, there won't be a business holiday
associated with it. It could be defined using a recurrence:
.Sp
.Vb 1
\&   1*12:0:24:0:0:0*DWD  = Christmas
.Ve
.Sp
so that if Christmas falls on a weekend, a holiday will be taken
on the Friday before or the Monday after the weekend.
.Sp
You can use the fully specified format of a recurrence:
.Sp
.Vb 1
\&  1*2:0:1:0:0:0***Jan 1 1999*Dec 31 2002 = Feb 2 from 1999\-2002
.Ve
.SH "OTHER HOLIDAY CONSIDERATIONS"
.IX Header "OTHER HOLIDAY CONSIDERATIONS"
.IP "\fBRecurrences which change years\fR" 4
.IX Item "Recurrences which change years"
It is now valid to have a recurrence defined for New Year's day which
pushes the holiday to the previous year.
.Sp
For example, the most useful definition of New Year's day is:
.Sp
.Vb 1
\&   1*1:0:1:0:0:0*DWD               = New Year\*(Aqs Day
.Ve
.Sp
which means to choose the closest working day to observe the
holiday, even though this might mean that the holiday is observed
on the previous year.
.IP "\fBOrder of definitions is preserved\fR" 4
.IX Item "Order of definitions is preserved"
The order of the definitions is preserved. In other words, when looking
at the holidays for a year, previously defined holidays (in the order
given in the config file) are correctly handled.
.Sp
As an example, if you wanted to define both Christmas and Boxing days
(Boxing is the day after Christmas, and is celebrated in some parts of
the world), and you wanted to celebrate Christmas on a business day on
or after Dec 25, and Boxing day as the following work day, you could do
it in one of the following ways:
.Sp
.Vb 2
\&   1*12:0:25:0:0:0*NWD  = Christmas
\&   1*12:0:26:0:0:0*NWD  = Boxing
.Ve
.Sp
or
.Sp
.Vb 2
\&   1*12:0:25:0:0:0*NWD  = Christmas
\&   1*12:0:25:0:0:0*NWD  = Boxing
.Ve
.Sp
Holidays go into affect the minute they are parsed which is why the
second example works (though for clarity, the first one is
preferable).  The first recurrence defined the first business day on
or after Dec 25 as Christmas.  The second one then defines the
business day after that as Boxing day.  Since the definitions are
stored as a list (\s-1NOT\s0 a hash as they were in Date::Manip 5.xx), using
the same recurrence twice does not cause a problem.
.SH "EVENTS"
.IX Header "EVENTS"
The Events section of the config file is similar to the Holiday section.
It is used to name certain days or times, but there are a few important
differences:
.IP "\fBEvents can be assigned to any time and duration\fR" 4
.IX Item "Events can be assigned to any time and duration"
All holidays are exactly 1 day long.  They are assigned to a period
of time from midnight to midnight.
.Sp
Events can be based at any time of the day, and may be of any duration.
.IP "\fBEvents don't affect business mode calculations\fR" 4
.IX Item "Events don't affect business mode calculations"
Unlike holidays, events are completely ignored when doing business
mode calculations.
.PP
Whereas holidays were added with business mode math in mind, events
were added with calendar and scheduling applications in mind.
.PP
Every line in the events section is of the form:
.PP
.Vb 1
\&   EVENT = NAME
.Ve
.PP
where \s-1NAME\s0 is the name of the event, and \s-1EVENT\s0 defines when it occurs
and its duration.  An \s-1EVENT\s0 can be defined in the following ways:
.PP
.Vb 4
\&   Date
\&   YMD
\&   YM
\&   Recur
\&
\&   Date  ; Date
\&   YMD   ; YMD
\&   YM    ; YM
\&   Date  ; Delta
\&   Recur ; Delta
.Ve
.PP
Date refers to a full date/time (and is any string that can be parsed
by Date::Manip::Date::parse). \s-1YMD\s0 is any string which can be parsed by
Date::Manip::Date::parse_date. \s-1YM\s0 is any string which can be parsed by
the parse_date method to give a date in the current year. Recur is a
partial or fully specified recurrence. Delta is any string that can be
parsed to form a delta.
.PP
With the \*(L"Date\*(R" form, or the \*(L"Recur\*(R" form, the event starts at the
time (or times) specified by the date or recurrence, and last 1 hour
long.  With the \*(L"\s-1YMD\s0\*(R" and \*(L"\s-1YM\s0\*(R" forms, the event occurs on the given
day, and lasts all day.
.PP
With all of the two part forms (\*(L"Date;Date\*(R", \*(L"\s-1YM\s0;YM\*(R", etc.), the event
starts at the first date and goes to the second date, or goes an
amount of time specified by the delta.
.PP
The \*(L"\s-1YMD\s0;YMD\*(R" and \*(L"\s-1YM\s0;YM\*(R" forms means that the event lasts from the
start of the first date to the end of the second. In the Date;Date
form, the event goes from the first date to the second date
inclusive. In other words, both dates are in the event. In the
\&\*(L"Date;Delta\*(R" and \*(L"Recur;Delta\*(R" forms, the Delta tells the length of
the event. Also, in the Date;Date form, the second date may \s-1NOT\s0 be
expressed as a delta.
.PP
Currently, having an event longer than 1 year is \s-1NOT\s0 supported, but no
checking is done for this.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
None known.
.SH "BUGS AND QUESTIONS"
.IX Header "BUGS AND QUESTIONS"
Please refer to the Date::Manip::Problems documentation for
information on submitting bug reports or questions to the author.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Manip        \- main module documentation
.SH "LICENSE"
.IX Header "LICENSE"
This script is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
