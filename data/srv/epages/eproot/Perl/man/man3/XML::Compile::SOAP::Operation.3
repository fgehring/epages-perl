.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::SOAP::Operation 3"
.TH XML::Compile::SOAP::Operation 3 "2011-06-20" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::SOAP::Operation \- base\-class for possible interactions
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& XML::Compile::SOAP::Operation is extended by
\&   XML::Compile::SOAP11::Operation
\&   XML::Compile::SOAP12::Operation
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # created by XML::Compile::WSDL11
\& my $op = $wsdl\->operation(\*(AqGetStockPrices\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These objects are created by XML::Compile::WSDL11, grouping information
about a certain specific message interchange between a client and
a server.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "XML::Compile::SOAP::Operation\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "XML::Compile::SOAP::Operation->new(OPTIONS)"
.Vb 7
\& \-Option   \-\-Default
\&  action     undef
\&  endpoints  []
\&  kin        <required>
\&  nam        <required>
\&  schemas    <required>
\&  transport  \*(AqHTTP\*(Aq
.Ve
.RS 4
.IP "action => \s-1STRING\s0" 2
.IX Item "action => STRING"
Some string which is refering to the action which is taken.  For \s-1SOAP\s0
protocols, this defines the soapAction header.
.IP "endpoints => ADDRESS|ARRAY" 2
.IX Item "endpoints => ADDRESS|ARRAY"
Where to contact the server.
.IP "kin => d" 2
.IX Item "kin => d"
This returns the type of operation this is.  There are four kinds, which
are returned as strings \f(CW\*(C`one\-way\*(C'\fR, \f(CW\*(C`request\-response\*(C'\fR, \f(CW\*(C`sollicit\-response\*(C'\fR,
and \f(CW\*(C`notification\*(C'\fR.  The latter two are initiated by a server, the former
two by a client.
.IP "nam => e" 2
.IX Item "nam => e"
.PD 0
.IP "schemas => XML::Compile::Cache" 2
.IX Item "schemas => XML::Compile::Cache"
.IP "transport => URI|'\s-1HTTP\s0'" 2
.IX Item "transport => URI|'HTTP'"
.PD
\&\f(CW\*(C`HTTP\*(C'\fR is short for \f(CW\*(C`http://schemas.xmlsoap.org/soap/http/\*(C'\fR, which
is a constant to indicate that transport should use the HyperText
Transfer Protocol.
.RE
.RS 4
.RE
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBbindingName\fR" 4
.el .IP "\f(CW$obj\fR\->\fBbindingName\fR" 4
.IX Item "$obj->bindingName"
.PD 0
.ie n .IP "$obj\->\fBclientClass\fR" 4
.el .IP "\f(CW$obj\fR\->\fBclientClass\fR" 4
.IX Item "$obj->clientClass"
.PD
Returns the class name which implements the Client side for this protocol.
.ie n .IP "$obj\->\fBendPoints\fR" 4
.el .IP "\f(CW$obj\fR\->\fBendPoints\fR" 4
.IX Item "$obj->endPoints"
Returns the list of alternative URLs for the end-point, which should
be defined within the service's port declaration.
.ie n .IP "$obj\->\fBkind\fR" 4
.el .IP "\f(CW$obj\fR\->\fBkind\fR" 4
.IX Item "$obj->kind"
.PD 0
.ie n .IP "$obj\->\fBname\fR" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR" 4
.IX Item "$obj->name"
.ie n .IP "$obj\->\fBportName\fR" 4
.el .IP "\f(CW$obj\fR\->\fBportName\fR" 4
.IX Item "$obj->portName"
.ie n .IP "$obj\->\fBschemas\fR" 4
.el .IP "\f(CW$obj\fR\->\fBschemas\fR" 4
.IX Item "$obj->schemas"
.ie n .IP "$obj\->\fBserverClass\fR" 4
.el .IP "\f(CW$obj\fR\->\fBserverClass\fR" 4
.IX Item "$obj->serverClass"
.PD
Returns the class name which implements the Server side for this protocol.
.ie n .IP "$obj\->\fBserviceName\fR" 4
.el .IP "\f(CW$obj\fR\->\fBserviceName\fR" 4
.IX Item "$obj->serviceName"
.PD 0
.ie n .IP "$obj\->\fBsoapAction\fR" 4
.el .IP "\f(CW$obj\fR\->\fBsoapAction\fR" 4
.IX Item "$obj->soapAction"
.PD
Used for the \f(CW\*(C`soapAction\*(C'\fR header in \s-1HTTP\s0 transport, for routing
messages through firewalls.
.ie n .IP "$obj\->\fBversion\fR" 4
.el .IP "\f(CW$obj\fR\->\fBversion\fR" 4
.IX Item "$obj->version"
.PD 0
.ie n .IP "$obj\->\fBwsaAction\fR('\s-1INPUT\s0'|'\s-1OUTPUT\s0')" 4
.el .IP "\f(CW$obj\fR\->\fBwsaAction\fR('\s-1INPUT\s0'|'\s-1OUTPUT\s0')" 4
.IX Item "$obj->wsaAction('INPUT'|'OUTPUT')"
.PD
Only available when \f(CW\*(C`XML::Compile::SOAP::WSA\*(C'\fR is loaded. It specifies
the name of the operation in the \s-1WSA\s0 header.  With \f(CW\*(C`INPUT\*(C'\fR, it is the
Action to be used with a message sent to the server (input to the
server). The \f(CW\*(C`OUTPUT\*(C'\fR is used by the server in its message back.
.SS "Handlers"
.IX Subsection "Handlers"
.ie n .IP "$obj\->\fBcompileClient\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileClient\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->compileClient(OPTIONS)"
Returns one \s-1CODE\s0 reference which handles the conversion from a perl
data-structure into a request message, the transmission of the
request, the receipt of the answer, and the decoding of that answer
into a Perl data-structure.
.ie n .IP "$obj\->\fBcompileHandler\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileHandler\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->compileHandler(OPTIONS)"
Returns a code reference which translates in incoming \s-1XML\s0 message
into Perl a data-structure, then calls the callback.  The result of
the callback is encoded from Perl into \s-1XML\s0 and returned.
.Sp
.Vb 2
\& \-Option  \-\-Default
\&  callback  <required>
.Ve
.RS 4
.IP "callback => \s-1CODE\s0" 2
.IX Item "callback => CODE"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBcompileTransporter\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileTransporter\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->compileTransporter(OPTIONS)"
.PD
Create the transporter code for a certain specific target.
.Sp
.Vb 5
\& \-Option        \-\-Default
\&  endpoint        <from WSDL>
\&  server          undef
\&  transport_hook  undef
\&  transporter     <created>
.Ve
.RS 4
.IP "endpoint => URI|ARRAY\-of\-URI" 2
.IX Item "endpoint => URI|ARRAY-of-URI"
Overrule the destination address(es).
.IP "server => URI-HOST" 2
.IX Item "server => URI-HOST"
Overrule only the server part in the endpoint, not the whole endpoint.
This could be a string like \f(CW\*(C`username:password@myhost:4711\*(C'\fR.  Only
used when no explicit \f(CW\*(C`endpoint\*(C'\fR is provided.
.IP "transport_hook => \s-1CODE\s0" 2
.IX Item "transport_hook => CODE"
Passed to XML::Compile::Transport::compileClient(hook).  Can be
used to create off-line tests and last resort work-arounds.  See the
DETAILs chapter in the XML::Compile::Transport manual page.
.IP "transporter => \s-1CODE\s0" 2
.IX Item "transporter => CODE"
The routine which will be used to exchange the data with the server.
This code is created by an \fIXML::Compile::Transport::compileClient()\fR
extension. By default, a transporter compatible to the protocol
is created.  However, in most cases you want to reuse one (\s-1HTTP1\s0.1)
connection to a server.
.RE
.RS 4
.RE
.SS "Helpers"
.IX Subsection "Helpers"
.ie n .IP "$obj\->\fBexplain\fR(\s-1WSDL\s0, \s-1FORMAT\s0, \s-1DIRECTION\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBexplain\fR(\s-1WSDL\s0, \s-1FORMAT\s0, \s-1DIRECTION\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->explain(WSDL, FORMAT, DIRECTION, OPTIONS)"
Dump an annotated structure showing how the operation works, helping
developers to understand the schema. \s-1FORMAT\s0 is \f(CW\*(C`PERL\*(C'\fR or \f(CW\*(C`XML\*(C'\fR.
.Sp
The \s-1DIRECTION\s0 is \f(CW\*(C`INPUT\*(C'\fR, it will return the message which the client
sends to the server (input for the server). The \f(CW\*(C`OUTPUT\*(C'\fR message is
sent as response by the server.
.IP "XML::Compile::SOAP::Operation\->\fBregister\fR(\s-1URI\s0, \s-1ENVNS\s0)" 4
.IX Item "XML::Compile::SOAP::Operation->register(URI, ENVNS)"
Declare an operation type, but \s-1WSDL\s0 specific \s-1URI\s0 and envelope namespace.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-SOAP distribution version 2.24,
built on June 20, 2011. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Other distributions in this suite:
XML::Compile,
XML::Compile::SOAP,
XML::Compile::SOAP12,
XML::Compile::SOAP::Daemon,
XML::Compile::SOAP::WSA,
XML::Compile::C14N,
XML::Compile::WSS,
XML::Compile::Tester,
XML::Compile::Cache,
XML::Compile::Dumper,
XML::Compile::RPC,
XML::Rewrite,
XML::eXistDB,
and
XML::LibXML::Simple.
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
