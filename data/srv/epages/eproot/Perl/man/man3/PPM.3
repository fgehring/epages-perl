.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPM 3"
.TH PPM 3 "2008-06-09" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ppm \- PPM (Perl Package Management)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use PPM;
\&
\& PPM::InstallPackage("package" => $package, "location" => $location, "root" => $root);
\& PPM::RemovePackage("package" => $package, "force" => $force);
\& PPM::VerifyPackage("package" => $package, "location" => $location, "upgrade" => $upgrade);
\& PPM::QueryInstalledPackages("searchRE" => $searchRE, "searchtag" => $searchtag, "ignorecase" => $ignorecase);
\& PPM::InstalledPackageProperties();
\&
\& PPM::ListOfRepositories();
\& PPM::RemoveRepository("repository" => $repository, "save" => $save);
\& PPM::AddRepository("repository" => $repository, "location" => $location, "save" => $save);
\& PPM::RepositoryPackages("location" => $location);
\& PPM::RepositoryPackageProperties("package" => $package, "location" => $location);
\& PPM::RepositorySummary("location" => $location);
\&
\& PPM::GetPPMOptions();
\& PPM::SetPPMOptions("options" => %options, "save" => $save);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1PPM\s0 is a group of functions intended to simplify the tasks of locating,
installing, upgrading and removing software 'packages'.  It can determine
if the most recent version of a software package is installed on a system,
and can install or upgrade that package from a local or remote host.
.PP
\&\s-1PPM\s0 uses files containing a modified form of the Open Software Distribution
(\s-1OSD\s0) specification for information about software packages.
These description files, which are written in Extensible Markup
Language (\s-1XML\s0) code, are referred to as '\s-1PPD\s0' files.  Information about
\&\s-1OSD\s0 can be found at the W3C web site (at the time of this writing,
http://www.w3.org/TR/NOTE\-OSD.html).  The modifications to \s-1OSD\s0 used by \s-1PPM\s0
are documented in PPM::ppd.
.PP
\&\s-1PPD\s0 files for packages are generated from \s-1POD\s0 files using the pod2ppd
command.
.SH "USAGE"
.IX Header "USAGE"
.ie n .IP "PPM::InstallPackage(""package"" => $package, ""location"" => $location, ""root"" => $root);" 4
.el .IP "PPM::InstallPackage(``package'' => \f(CW$package\fR, ``location'' => \f(CW$location\fR, ``root'' => \f(CW$root\fR);" 4
.IX Item "PPM::InstallPackage(package => $package, location => $location, root => $root);"
Installs the specified package onto the local system.  'package' may
be a simple package name ('foo'), a pathname (P:\ePACKAGES\eFOO.PPD) or
a \s-1URL\s0 (HTTP://www.ActiveState.com/packages/foo.ppd).  In the case of a
simple package name, the function will look for the package's \s-1PPD\s0 file
at 'location', if provided; otherwise, it will use information stored
in the \s-1PPM\s0 data file (see 'Files' section below) to locate the \s-1PPD\s0 file
for the requested package.  The package's files will be installed under
the directory specified in 'root'; if not specified the default value
of 'root' will be used.
.Sp
The function uses the values stored in the \s-1PPM\s0 data file to determine the
local operating system, operating system version and \s-1CPU\s0 type.  If the \s-1PPD\s0
for this package contains implementations for different platforms, these
values will be used to determine which one is installed.
.Sp
\&\fIInstallPackage()\fR updates the \s-1PPM\s0 data file with information about the package
installation. It stores a copy of the \s-1PPD\s0 used for installation, as well
as the location from which this \s-1PPD\s0 was obtained.  This location will
become the default \s-1PPD\s0 location for this package.
.Sp
During an installation, the following actions are performed:
.Sp
.Vb 12
\&    \- the PPD file for the package is read
\&    \- a directory for this package is created in the directory specified in
\&      <BUILDDIR> in the PPM data file.
\&    \- the file specified with the <CODEBASE> tag in the PPD file is
\&      retrieved/copied into the directory created above.
\&    \- the package is unarchived in the directory created for this package
\&    \- individual files from the archive are installed in the appropriate
\&      directories of the local Perl installation.
\&    \- perllocal.pod is updated with the install information.
\&    \- if provided, the <INSTALL> script from the PPD is executed in the
\&      directory created above.
\&    \- information about the installation is stored in the PPM data file.
.Ve
.ie n .IP "PPM::RemovePackage(""package"" => $package, ""force"" => $force)" 4
.el .IP "PPM::RemovePackage(``package'' => \f(CW$package\fR, ``force'' => \f(CW$force\fR)" 4
.IX Item "PPM::RemovePackage(package => $package, force => $force)"
Removes the specified package from the system.  Reads the package's \s-1PPD\s0
(stored during installation) for removal details.  If 'force' is
specified, even a package required by \s-1PPM\s0 will be removed (useful
when installing an upgrade).
.ie n .IP "PPM::VerifyPackage(""package"" => $package, ""location"" => $location, ""upgrade"" => $upgrade)" 4
.el .IP "PPM::VerifyPackage(``package'' => \f(CW$package\fR, ``location'' => \f(CW$location\fR, ``upgrade'' => \f(CW$upgrade\fR)" 4
.IX Item "PPM::VerifyPackage(package => $package, location => $location, upgrade => $upgrade)"
Reads a \s-1PPD\s0 file for 'package', and compares the currently installed
version of 'package' to the version available according to the \s-1PPD\s0.
The \s-1PPD\s0 file is expected to be on a local directory or remote site
specified either in the \s-1PPM\s0 data file or in the 'location' argument.
The 'location' argument may be a directory location or a \s-1URL\s0.
The 'upgrade' argument forces an upgrade if the installed package is
not up-to-date.
.Sp
The \s-1PPD\s0 file for each package will initially be searched for at
\&'location', and if not found will then be searched for using the
locations specified in the \s-1PPM\s0 data file.
.ie n .IP "PPM::QueryInstalledPackages(""searchRE"" => $searchRE, ""searchtag"" => $searchtag, ""ignorecase"" => $ignorecase);" 4
.el .IP "PPM::QueryInstalledPackages(``searchRE'' => \f(CW$searchRE\fR, ``searchtag'' => \f(CW$searchtag\fR, ``ignorecase'' => \f(CW$ignorecase\fR);" 4
.IX Item "PPM::QueryInstalledPackages(searchRE => $searchRE, searchtag => $searchtag, ignorecase => $ignorecase);"
Returns a hash containing information about all installed packages.
By default, a list of all installed packages is returned.  If a regular
expression 'searchRE' is specified, only packages matching it are
returned.  If 'searchtag' is specified, the pattern match is applied
to the appropriate tag (e.g., \s-1ABSTRACT\s0).
.Sp
The data comes from the \s-1PPM\s0 data file, which contains installation
information about each installed package.
.IP "\fIPPM::InstalledPackageProperties()\fR;" 4
.IX Item "PPM::InstalledPackageProperties();"
Returns a hash with package names as keys, and package properties as
attributes.
.ie n .IP "PPM::RepositoryPackages(""location"" => $location);" 4
.el .IP "PPM::RepositoryPackages(``location'' => \f(CW$location\fR);" 4
.IX Item "PPM::RepositoryPackages(location => $location);"
Returns a hash, with 'location' being the key, and arrays of all packages
with package description (\s-1PPD\s0) files available at 'location' as its
elements.  'location' may be either a remote address or a directory path.
If 'location' is not specified, the default location as specified in
the \s-1PPM\s0 data file will be used.
.IP "\fIPPM::ListOfRepositories()\fR;" 4
.IX Item "PPM::ListOfRepositories();"
Returns a hash containing the name of the repository and its location.
These repositories will be searched if an explicit location is not
provided in any function needing to locate a \s-1PPD\s0.
.ie n .IP "PPM::RemoveRepository(""repository"" => $repository, ""save"" => $save);" 4
.el .IP "PPM::RemoveRepository(``repository'' => \f(CW$repository\fR, ``save'' => \f(CW$save\fR);" 4
.IX Item "PPM::RemoveRepository(repository => $repository, save => $save);"
Removes the repository named 'repository' from the list of available
repositories.  If 'save' is not specified, the change is for the current
session only.
.ie n .IP "PPM::AddRepository(""repository"" => $repository, ""location"" => $location, ""save"" => $save);" 4
.el .IP "PPM::AddRepository(``repository'' => \f(CW$repository\fR, ``location'' => \f(CW$location\fR, ``save'' => \f(CW$save\fR);" 4
.IX Item "PPM::AddRepository(repository => $repository, location => $location, save => $save);"
Adds the repository named 'repository' to the list of available repositories.
If 'save' is not specified, the change is for the current session only.
.ie n .IP "PPM::RepositoryPackageProperties(""package"" => $package, ""location"" => $location);" 4
.el .IP "PPM::RepositoryPackageProperties(``package'' => \f(CW$package\fR, ``location'' => \f(CW$location\fR);" 4
.IX Item "PPM::RepositoryPackageProperties(package => $package, location => $location);"
Reads the \s-1PPD\s0 file for 'package', from 'location' or the default repository,
and returns a hash with keys being the various tags from the \s-1PPD\s0 (e.g.
\&'\s-1ABSTRACT\s0', '\s-1AUTHOR\s0', etc.).
.ie n .IP "PPM::RepositorySummary(""location"" => $location);" 4
.el .IP "PPM::RepositorySummary(``location'' => \f(CW$location\fR);" 4
.IX Item "PPM::RepositorySummary(location => $location);"
Attempts to retrieve the summary file associated with the specified repository,
or from all repositories if 'location' is not specified.  The return value
is a hash with the key being the repository, and the data being another
hash of package name keys, and package detail data.
.IP "\fIPPM::GetPPMOptions()\fR;" 4
.IX Item "PPM::GetPPMOptions();"
Returns a hash containing values for all \s-1PPM\s0 internal options ('\s-1IGNORECASE\s0',
\&'\s-1CLEAN\s0', '\s-1CONFIRM\s0', '\s-1ROOT\s0', '\s-1BUILDDIR\s0', '\s-1DOWNLOADSTATUS\s0').
.ie n .IP "PPM::SetPPMOptions(""options"" => %options, ""save"" => $save);" 4
.el .IP "PPM::SetPPMOptions(``options'' => \f(CW%options\fR, ``save'' => \f(CW$save\fR);" 4
.IX Item "PPM::SetPPMOptions(options => %options, save => $save);"
Sets internal \s-1PPM\s0 options as specified in the 'options' hash, which is
expected to be the hash previously returned by a call to \fIGetPPMOptions()\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.ie n .IP "PPM::AddRepository(""repository"" => 'ActiveState', ""location"" => ""http://www.ActiveState.com/packages"", ""save"" => 1);" 4
.el .IP "PPM::AddRepository(``repository'' => 'ActiveState', ``location'' => ``http://www.ActiveState.com/packages'', ``save'' => 1);" 4
.IX Item "PPM::AddRepository(repository => 'ActiveState', location => http://www.ActiveState.com/packages, save => 1);"
Adds a repository to the list of available repositories, and saves it in
the \s-1PPM\s0 options file.
.ie n .IP "PPM::InstallPackage(""package"" => 'http://www.ActiveState.com/packages/foo.ppd');" 4
.el .IP "PPM::InstallPackage(``package'' => 'http://www.ActiveState.com/packages/foo.ppd');" 4
.IX Item "PPM::InstallPackage(package => 'http://www.ActiveState.com/packages/foo.ppd');"
Installs the software package 'foo' based on the information in the \s-1PPD\s0
obtained from the specified \s-1URL\s0.
.ie n .IP "PPM::VerifyPackage(""package"" => 'foo', ""upgrade"" => true)" 4
.el .IP "PPM::VerifyPackage(``package'' => 'foo', ``upgrade'' => true)" 4
.IX Item "PPM::VerifyPackage(package => 'foo', upgrade => true)"
Compares the currently installed version of the software package 'foo' to
the one available according to the \s-1PPD\s0 obtained from the package-specific
location provided in the \s-1PPM\s0 data file, and upgrades to a newer
version if available.  If a location for this specific package is not
given in \s-1PPM\s0 data file, a default location is searched.
.ie n .IP "PPM::VerifyPackage(""package"" => 'foo', ""location"" => 'P:\ePACKAGES', ""upgrade"" => true);" 4
.el .IP "PPM::VerifyPackage(``package'' => 'foo', ``location'' => 'P:\ePACKAGES', ``upgrade'' => true);" 4
.IX Item "PPM::VerifyPackage(package => 'foo', location => 'P:PACKAGES', upgrade => true);"
Compares the currently installed version of the software package 'foo'
to the one available according to the \s-1PPD\s0 obtained from the specified
directory, and upgrades to a newer version if available.
.ie n .IP "PPM::VerifyPackage(""package"" => 'PerlDB');" 4
.el .IP "PPM::VerifyPackage(``package'' => 'PerlDB');" 4
.IX Item "PPM::VerifyPackage(package => 'PerlDB');"
Verifies that package 'PerlDB' is up to date, using package locations specified
in the \s-1PPM\s0 data file.
.ie n .IP "PPM::RepositoryPackages(""location"" => http://www.ActiveState.com/packages);" 4
.el .IP "PPM::RepositoryPackages(``location'' => http://www.ActiveState.com/packages);" 4
.IX Item "PPM::RepositoryPackages(location => http://www.ActiveState.com/packages);"
Returns a hash keyed on 'location', with its elements being an array of
packages with \s-1PPD\s0 files available at the specified location.
.ie n .IP "%opts = \fIPPM::GetPPMOptions()\fR;" 4
.el .IP "\f(CW%opts\fR = \fIPPM::GetPPMOptions()\fR;" 4
.IX Item "%opts = PPM::GetPPMOptions();"
.PD 0
.ie n .IP "$options{'\s-1CONFIRM\s0'} = '0';" 4
.el .IP "\f(CW$options\fR{'\s-1CONFIRM\s0'} = '0';" 4
.IX Item "$options{'CONFIRM'} = '0';"
.ie n .IP "PPM::SetPPMOptions(""options"" => \e%opts, ""save"" => 1);" 4
.el .IP "PPM::SetPPMOptions(``options'' => \e%opts, ``save'' => 1);" 4
.IX Item "PPM::SetPPMOptions(options => %opts, save => 1);"
.PD
Sets and saves the value of the option '\s-1CONFIRM\s0' to '0'.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "HTTP_proxy" 4
.IX Item "HTTP_proxy"
If the environment variable 'HTTP_proxy' is set, then it will
be used as the address of a proxy for accessing the Internet.
If the environment variables 'HTTP_proxy_user' and 'HTTP_proxy_pass'
are set, they will be used as the login and password for the
proxy server.  If a proxy requires a certain User-Agent value
(e.g. \*(L"Mozilla/5.0\*(R"), this can be set using the 'HTTP_proxy_agent'
environment variable.
.SH "FILES"
.IX Header "FILES"
.IP "package.ppd" 4
.IX Item "package.ppd"
A description of a software package, in Perl Package Distribution (\s-1PPD\s0)
format.  More information on this file format can be found in \s-1PPM::XML::PPD\s0.
\&\s-1PPM\s0 stores a copy of the \s-1PPD\s0 it uses to install or upgrade any software
package.
.IP "ppm.xml \- \s-1PPM\s0 data file." 4
.IX Item "ppm.xml - PPM data file."
The \s-1XML\s0 format file in which \s-1PPM\s0 stores configuration and package
installation information.  This file is created when \s-1PPM\s0 is installed,
and under normal circumstances should never require modification other
than by \s-1PPM\s0 itself.  For more information on this file, refer to
PPM::XML::PPMConfig.
.SH "AUTHOR"
.IX Header "AUTHOR"
Murray Nesbitt, <\fImurray@cpan.org\fR>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
PPM::XML::PPMConfig
\&.
