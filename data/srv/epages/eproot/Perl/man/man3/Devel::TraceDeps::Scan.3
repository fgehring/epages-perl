.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::TraceDeps::Scan 3"
.TH Devel::TraceDeps::Scan 3 "2011-04-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::TraceDeps::Scan \- frontend and data access
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $scan = Devel::TraceDeps::Scan\->load($filehandle);
.Ve
.SH "Acquisition"
.IX Header "Acquisition"
.SS "scan"
.IX Subsection "scan"
.Vb 1
\&  my $scan = Devel::TraceDeps::Scan\->scan(file => $filename, %opts);
.Ve
.SH "Retrieval"
.IX Header "Retrieval"
.SS "load"
.IX Subsection "load"
\&\f(CW$source\fR may be a filename, or a reference to an open filehandle or
string.
.PP
.Vb 1
\&  my $scan = Devel::TraceDeps::Scan\->load($source);
.Ve
.SH "Querying the Data"
.IX Header "Querying the Data"
.SS "callers"
.IX Subsection "callers"
The list of all packages which called \fIuse()\fR, \fIrequire()\fR, or \fIdo()\fR.
.PP
.Vb 1
\&  my @callers = $scan\->callers;
.Ve
.SS "items"
.IX Subsection "items"
Return all of the use/require/do events.
.PP
.Vb 1
\&  my @items = $scan\->items;
.Ve
.SS "items_for"
.IX Subsection "items_for"
Return all of the use/require/do events for a given package.
.PP
.Vb 1
\&  my @items_for = $scan\->items_for($caller);
.Ve
.SS "required"
.IX Subsection "required"
A unique list of use/require/do items.
.PP
.Vb 1
\&  my @required = $scan\->required;
.Ve
.SS "loaded"
.IX Subsection "loaded"
Everything from \fIrequired()\fR which did not fail to load.
.PP
.Vb 1
\&  my @loaded = $scan\->loaded;
.Ve
.SH "Item objects"
.IX Header "Item objects"
\&\f(CW\*(C`Devel::TraceDeps::Scan::Item\*(C'\fR objects are returned by several of the
above methods.  The have the following attributes:
.IP "by" 4
.IX Item "by"
The package which required this item (caller).
.IP "trace" 4
.IX Item "trace"
A string of sequence numbers indicating the tree of this call.
.IP "file" 4
.IX Item "file"
Filename from \fIcaller()\fR.
.IP "line" 4
.IX Item "line"
Line number from \fIcaller()\fR.
.IP "req" 4
.IX Item "req"
The \fIrequire()\fRd module filename (as found in \f(CW\*(C`keys %INC\*(C'\fR \*(-- e.g.  'use
Foo::Bar' would appear as 'Foo/Bar.pm'.)
.Sp
This will typically be a relative path (within \f(CW@INC\fR), but might be
absolute or ever relative to './' (depending on how use/require/do was
called.
.IP "ver" 4
.IX Item "ver"
Item is a requirement for a minimum perl version.  If 'req' is empty,
look here.
.IP "did" 4
.IX Item "did"
The argument to do(\*(L"filename\*(R").
.IP "fail" 4
.IX Item "fail"
True if the \fIrequire()\fR failed.  This probably means that the file does
not exist (e.g. \f(CW\*(C`eval {require thing}\*(C'\fR or \f(CW\*(C`do("whatever")\*(C'\fR)
.IP "err" 4
.IX Item "err"
Any $@ or $! found.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Wilhelm @ <ewilhelm at cpan dot org>
.PP
http://scratchcomputing.com/
.SH "BUGS"
.IX Header "BUGS"
If you found this module on \s-1CPAN\s0, please report any bugs or feature
requests through the web interface at <http://rt.cpan.org>.  I will be
notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.PP
If you pulled this development version from my /svn/, please contact me
directly.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2008 Eric L. Wilhelm, All Rights Reserved.
.SH "NO WARRANTY"
.IX Header "NO WARRANTY"
Absolutely, positively \s-1NO\s0 \s-1WARRANTY\s0, neither express or implied, is
offered with this software.  You use this software at your own risk.  In
case of loss, no person or entity owes you anything whatsoever.  You
have been warned.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
