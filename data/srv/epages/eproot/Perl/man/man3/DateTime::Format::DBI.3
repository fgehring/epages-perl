.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Format::DBI 3"
.TH DateTime::Format::DBI 3 "2011-04-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Format::DBI \- Find a parser class for a database connection.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use DBI;
\&  use DateTime;
\&  use DateTime::Format::DBI;
\&
\&  my $db = DBI\->connect(\*(Aqdbi:...\*(Aq);
\&  my $db_parser = DateTime::Format::DBI\->new($dbh);
\&  my $dt = DateTime\->now();
\&
\&  $db\->do("UPDATE table SET dt=? WHERE foo=\*(Aqbar\*(Aq",undef,
\&    $db_parser\->format_datetime($dt);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module finds a \f(CW\*(C`DateTime::Format::*\*(C'\fR class that is suitable for the use with
a given \s-1DBI\s0 connection (and \f(CW\*(C`DBD::*\*(C'\fR driver).
.PP
It currently supports the following format modules:
\&\s-1IBM\s0 \s-1DB2\s0 (\s-1DB2\s0),
Microsoft \s-1SQL\s0 (\s-1MSSQL\s0), 
MySQL, 
Oracle,
PostgreSQL (Pg),
SQLite, and
Sybase.
.PP
\&\fB\s-1NOTE:\s0\fR This module provides a quick method to find the correct parser and
formatter class. However, this is usually not sufficient for full database
abstraction. You will also have to cater for differences in the syntax and
semantics of \s-1SQL\s0 datetime functions (and other \s-1SQL\s0 commands).
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
This module provides a single factory method:
.IP "\(bu" 4
new( \f(CW$dbh\fR )
.Sp
Creates a new \f(CW\*(C`DateTime::Format::*\*(C'\fR instance, the exact class of which depends
on the database driver used for the database connection referenced by \f(CW$dbh\fR.
.SH "PARSER/FORMATTER INTERFACE"
.IX Header "PARSER/FORMATTER INTERFACE"
\&\f(CW\*(C`DateTime::Format::DBI\*(C'\fR is just a front-end class factory that will return one
of the format classes based on the nature of your \f(CW$dbh\fR.
.PP
For information on the interface of the returned parser object, please see the
documentation for the class pertaining to your particular \f(CW$dbh\fR.
.PP
In general, parser classes for databases will implement the following methods.
For more information on the exact behaviour of these methods, see the
documentation of the parser class.
.IP "\(bu" 4
parse_datetime( \f(CW$string\fR )
.Sp
Given a string containing a date and/or time representation from the database
used, this method will return a new \f(CW\*(C`DateTime\*(C'\fR object.
.Sp
If given an improperly formatted string, this method may die.
.IP "\(bu" 4
format_datetime( \f(CW$dt\fR )
.Sp
Given a \f(CW\*(C`DateTime\*(C'\fR object, this method returns a string appropriate as input
for all or the most common date and date/time types of the database used.
.IP "\(bu" 4
parse_duration( \f(CW$string\fR )
.Sp
Given a string containing a duration representation from the database used,
this method will return a new \f(CW\*(C`DateTime::Duration\*(C'\fR object.
.Sp
If given an improperly formatted string, this method may die.
.Sp
Not all databases and format/formatter classes support durations; please use
UNIVERSAL::has to check for the availability of this method.
.IP "\(bu" 4
format_duration( \f(CW$du\fR )
.Sp
Given a \f(CW\*(C`DateTime::Duration\*(C'\fR object, this method returns a string appropriate
as input for the duration or interval type of the database used.
.Sp
Not all databases and parser/formatter classes support durations; please use
UNIVERSAL::has to check for the availability of this method.
.PP
Parser/formatter classes may additionally define methods like parse_\fItype\fR or
format_\fItype\fR (where \fItype\fR is derived from the \s-1SQL\s0 type); please see the
documentation of the individual format class for more information.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please report bugs and other requests to the rt tracker:
https://rt.cpan.org/Public/Dist/Display.html?Name=DateTime\-Format\-DBI <https://rt.cpan.org/Public/Dist/Display.html?Name=DateTime-Format-DBI>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Claus Fa\*:rber <CFAERBER@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2003\-2010 Claus Fa\*:rber.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file included with
this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DateTime, \s-1DBI\s0
.PP
datetime@perl.org mailing list
.PP
http://datetime.perl.org/
