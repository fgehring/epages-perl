.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::SOAP11::Encoding 3"
.TH XML::Compile::SOAP11::Encoding 3 "2017-01-11" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::SOAP11::Encoding \- SOAP encoding
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& ### This module may work for you... but may also
\& ### not work.  Progress has been made, but the
\& ### implementation is not complete and not well tested.
\&
\& # Add this to load the logic
\& use XML::Compile::SOAP11::Encoding simplify => 1;
\&
\& # The internals are used by the ::SOAP11 module, and
\& # probably should not be called by yourself.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module loads extra functionality into the XML::Compile::SOAP11
namespace: all kinds of methods which are used to SOAP-encode data.
.SH "METHODS"
.IX Header "METHODS"
.SS "Transcoding"
.IX Subsection "Transcoding"
\&\s-1SOAP\s0 defines encodings, especially for SOAP-RPC.
.PP
\fIEncoding\fR
.IX Subsection "Encoding"
.ie n .IP "$obj\->\fBarray\fR( <$name|undef>, $item_type, $elements, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBarray\fR( <$name|undef>, \f(CW$item_type\fR, \f(CW$elements\fR, \f(CW%options\fR )" 4
.IX Item "$obj->array( <$name|undef>, $item_type, $elements, %options )"
Arrays can be a mess: a mixture of anything and nothing.  Therefore,
you have to help the generation more than you may wish for.  This
method produces an one dimensional array, \fImultidim()\fR is used for
multi-dimensional arrays.
.Sp
The \f(CW$name\fR is the packed type of the array itself.  When undef,
the \f(CW\*(C`{soap\-enc\-ns}Array\*(C'\fR will be used (the action soap
encoding namespace will be used).
.Sp
The \f(CW$item_type\fR specifies the type of each element within the array.
This type is used to create the \f(CW\*(C`arrayType\*(C'\fR attribute, however
doesn't tell enough about the items themselves: they may be
extensions to that type.
.Sp
Each of the \f(CW$elements\fR (passed as \s-1ARRAY\s0) must be an XML::LibXML::Node,
either self-constructed, or produced by one of the builder methods in
this class, like \fIenc()\fR or \fItyped()\fR.
.Sp
Returned is the XML::LibXML::Element which represents the
array.
.Sp
.Vb 6
\& \-Option      \-\-Default
\&  array_type    <generated>
\&  id            <undef>
\&  nested_array  \*(Aq\*(Aq
\&  offset        0
\&  slice         <all remaining>
.Ve
.RS 4
.IP "array_type => \s-1STRING\s0" 2
.IX Item "array_type => STRING"
The arrayType attribute content.  When explicitly set to undef, the
attribute is not created.
.IP "id => \s-1STRING\s0" 2
.IX Item "id => STRING"
Assign an id to the array.  If not defined, than no id attribute is
added.
.IP "nested_array => \s-1STRING\s0" 2
.IX Item "nested_array => STRING"
The \s-1ARRAY\s0 type should reflect nested array structures if they are
homogeneous.  This is a really silly part of the specs, because there
is no need for it on any other comparible place in the specs... but ala.
.Sp
For instance: \f(CW\*(C`nested_array => \*(Aq[,]\*(Aq\*(C'\fR, means that this array
contains two-dimensional arrays.
.IP "offset => \s-1INTEGER\s0" 2
.IX Item "offset => INTEGER"
When a partial array is to be transmitted, the number of the base
element.
.IP "slice => \s-1INTEGER\s0" 2
.IX Item "slice => INTEGER"
When a partial array is to be transmitted, this is the length of
the slice to be sent (the number of elements starting with the \f(CW\*(C`offset\*(C'\fR
element)
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBelement\fR($type, $name, $value)" 4
.el .IP "\f(CW$obj\fR\->\fBelement\fR($type, \f(CW$name\fR, \f(CW$value\fR)" 4
.IX Item "$obj->element($type, $name, $value)"
Create an element.  The \f(CW$name\fR is for node, where a namespace component
is translated into a prefix.  When you wish for a \f(CW\*(C`type\*(C'\fR attribute,
use \fItyped()\fR.
.Sp
When the \f(CW$type\fR does not contain a namespace indication, it is taken
in the selected schema namespace.  If the \f(CW$value\fR already is a
XML::LibXML::Element, then that one is used (and the \f(CW$name\fR ignored).
.ie n .IP "$obj\->\fBenc\fR( $local, $value, [$id] )" 4
.el .IP "\f(CW$obj\fR\->\fBenc\fR( \f(CW$local\fR, \f(CW$value\fR, [$id] )" 4
.IX Item "$obj->enc( $local, $value, [$id] )"
In the \s-1SOAP\s0 specification, encoding types are defined: elements
which do not have a distinguishable name but use the type of the
data as name.  Yep, ugly!
.Sp
example:
.Sp
.Vb 4
\&  my $xml = $soap\->enc(\*(Aqint\*(Aq, 43);
\&  my $xml = $soap\->enc(int => 43);
\&  print $xml\->toString;
\&    # <SOAP\-ENC:int>43</SOAP\-ENC:int>
\&
\&  my $xml = $soap\->enc(\*(Aqint\*(Aq, 42, id => \*(Aqme\*(Aq);
\&  my $xml = $soap\->enc(int => 42, id => \*(Aqme\*(Aq);
\&  print $xml\->toString;
\&    # <SOAP\-ENC:int id="me">42</SOAP\-ENC:int>
.Ve
.ie n .IP "$obj\->\fBhref\fR( $name, $element, [$id] )" 4
.el .IP "\f(CW$obj\fR\->\fBhref\fR( \f(CW$name\fR, \f(CW$element\fR, [$id] )" 4
.IX Item "$obj->href( $name, $element, [$id] )"
Create a reference element with \f(CW$name\fR to the existing \f(CW$element\fR.  When the
\&\f(CW$element\fR does not have an \*(L"id\*(R" attribute yet, then \f(CW$id\fR will be used.  In
case not \f(CW$id\fR was specified, then one is generated.
.ie n .IP "$obj\->\fBmultidim\fR( <$name|undef>, $item_type, $elements, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBmultidim\fR( <$name|undef>, \f(CW$item_type\fR, \f(CW$elements\fR, \f(CW%options\fR )" 4
.IX Item "$obj->multidim( <$name|undef>, $item_type, $elements, %options )"
A multi-dimensional array, less flexible than a single dimensional
array, which can be created with \fIarray()\fR.
.Sp
The table of \f(CW$elements\fR (\s-1ARRAY\s0 of ARRAYs) must be full: in each of the
dimensions, the length of each row must be the same.  On the other
hand, it may be sparse (contain undefs).  The size of each dimension is
determined by the length of its first element.
.Sp
.Vb 2
\& \-Option\-\-Default
\&  id      undef
.Ve
.RS 4
.IP "id => \s-1STRING\s0" 2
.IX Item "id => STRING"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBnil\fR( [$type], $name )" 4
.el .IP "\f(CW$obj\fR\->\fBnil\fR( [$type], \f(CW$name\fR )" 4
.IX Item "$obj->nil( [$type], $name )"
.PD
Create an element with \f(CW$name\fR which explicitly has the \f(CW\*(C`xsi:nil\*(C'\fR attribute.
If the \f(CW$name\fR is full (has a namespace to it), it will be translated into
a \s-1QNAME\s0, otherwise, it is considered not namespace qualified.
.Sp
If a \f(CW$type\fR is given, then an explicit type parameter is added.
.ie n .IP "$obj\->\fBprefixed\fR( $type|<$ns,$local> )" 4
.el .IP "\f(CW$obj\fR\->\fBprefixed\fR( \f(CW$type\fR|<$ns,$local> )" 4
.IX Item "$obj->prefixed( $type|<$ns,$local> )"
Translate a \f(CW$ns\fR\-$local combination (which may be represented as
a packed \f(CW$type\fR) into a prefixed notation.
.ie n .IP "$obj\->\fBstartEncoding\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBstartEncoding\fR(%options)" 4
.IX Item "$obj->startEncoding(%options)"
.Vb 2
\& \-Option\-\-Default
\&  doc     <created internally with utf8>
.Ve
.RS 4
.IP "doc => XML::LibXML::Document node" 2
.IX Item "doc => XML::LibXML::Document node"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBstruct\fR($type, $childs)" 4
.el .IP "\f(CW$obj\fR\->\fBstruct\fR($type, \f(CW$childs\fR)" 4
.IX Item "$obj->struct($type, $childs)"
.PD
Create a structure, an element with children.  The \f(CW$childs\fR must be fully
prepared XML::LibXML::Element objects.
.ie n .IP "$obj\->\fBtyped\fR($type, $name, $value)" 4
.el .IP "\f(CW$obj\fR\->\fBtyped\fR($type, \f(CW$name\fR, \f(CW$value\fR)" 4
.IX Item "$obj->typed($type, $name, $value)"
A \*(L"typed\*(R" element shows its type explicitly, via the \*(L"xsi:type\*(R" attribute.
The \f(CW$value\fR will get processed via an auto-generated XML::Compile writer,
so validated.  The processing is cashed.
.Sp
When \f(CW$value\fR already is an XML::LibXML::Element, then no processing
nor value checking will be performed.  The \f(CW$name\fR will be ignored.
.Sp
If the \f(CW$type\fR is not qualified, then it is interpreted as basic type, as
defined by the selected schema.  If you explicitly
need a non-namespace typed item, then use an empty namespace.  In any
case, the type must be defined and the value is validated.
.Sp
example:
.Sp
.Vb 2
\& my $xml = $soap\->typed(int => count => 5);
\& my $xml = $soap\->typed(pack_type(SCHEMA1999, \*(Aqint\*(Aq), count => 5);
\&
\& my $xml = $soap\->typed(pack_type(\*(Aq\*(Aq, \*(Aqmine\*(Aq), a => 1);
\& my $xml = $soap\->typed(\*(Aq{}mine\*(Aq), a => 1); #same
.Ve
.PP
\fIDecoding\fR
.IX Subsection "Decoding"
.ie n .IP "$obj\->\fBrpcDecode\fR($xmlnodes)" 4
.el .IP "\f(CW$obj\fR\->\fBrpcDecode\fR($xmlnodes)" 4
.IX Item "$obj->rpcDecode($xmlnodes)"
Decode the elements found in the \f(CW$xmlnodes\fR (list of XML::LibXML::Node
objects).  Use Data::Dumper to figure-out what the produced output is:
it is a guess, so may not be perfect (do not use \s-1RPC\s0 but document style
soap for good results).
.Sp
The decoded data is returned.  When \*(L"simplify\*(R" is set, then the returned
data is compact but may be sloppy.  Otherwise, a \s-1HASH\s0 is returned
containing as much info as could be extracted from the tree.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-SOAP distribution version 3.21,
built on January 11, 2017. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR .
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2017 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
