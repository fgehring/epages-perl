.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rotate 3"
.TH Rotate 3 "2000-08-29" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Logfile::Rotate \- Perl module to rotate logfiles.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&   use Logfile::Rotate;
\&   my $log = new Logfile::Rotate( File   => \*(Aq/var/adm/syslog/syslog.log\*(Aq, 
\&                                  Count  => 7,
\&                                  Gzip  => \*(Aqlib\*(Aq,
\&                                  Post   => sub{ 
\&                                    open(IN, "/var/run/syslog.pid");
\&                                    kill("HUP", chomp(<IN>)); }
\&                                  Dir    => \*(Aq/var/log/old\*(Aq,
\&                                  Flock  => \*(Aqyes\*(Aq,
\&                                  Persist => \*(Aqyes\*(Aq,
\&                                );
\&
\&   # process log file 
\&
\&   $log\->rotate();
\&
\&   or
\&   
\&   my $log = new Logfile::Rotate( File  => \*(Aq/var/adm/syslog\*(Aq, 
\&                                  Gzip   => \*(Aq/usr/local/bin/gzip\*(Aq);
\&   
\&   # process log file 
\&
\&   $log\->rotate();
\&   undef $log;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I have used the name space of Logfile::Base package by \fIUlrich Pfeifer\fR, 
as the use of this module closely relates to the processing logfiles.
.IP "new" 4
.IX Item "new"
\&\f(CW\*(C`new\*(C'\fR accepts the following arguments, \f(CW\*(C`File\*(C'\fR, \f(CW\*(C`Count\*(C'\fR, \f(CW\*(C`Gzip\*(C'\fR,
\&\f(CW\*(C`Pre\*(C'\fR, \f(CW\*(C`Post\*(C'\fR, \f(CW\*(C`Flock\*(C'\fR and \f(CW\*(C`Dir\*(C'\fR with only \f(CW\*(C`File\*(C'\fR being mandatory.
\&\f(CW\*(C`new\*(C'\fR will open and lock the file, so you may co-ordinate the
processing of the file with rotating it.  The file is closed and
unlocked when the object is destroyed, so you can do this explicitly by
\&\f(CW\*(C`undef\*(C'\fR'ing the object.
.Sp
The \f(CW\*(C`Pre\*(C'\fR/\f(CW\*(C`Post\*(C'\fR arguments allow you to pass function references to
this method, which you may use as a callback for any processing you want
before or after the rotation. For example, you may notify the process
writing to the file that it has been rotated.
.Sp
The \f(CW\*(C`Pre\*(C'\fR function is passed the current filename to be rotated as an
argument and the \f(CW\*(C`Post\*(C'\fR function is passed the current filename that
was rotated and that file's new filename including any extension added
by compression previously.
.Sp
Both the \f(CW\*(C`Pre\*(C'\fR and \f(CW\*(C`Post\*(C'\fR function references you provide are executed
within an \f(CW\*(C`eval\*(C'\fR statement inside the \f(CW\*(C`rotate\*(C'\fR method.  If the \f(CW\*(C`eval\*(C'\fR
returns an error then the \f(CW\*(C`rotate\*(C'\fR method will croak at that point.
.Sp
The \f(CW\*(C`Signal\*(C'\fR argument is deprecated by the \f(CW\*(C`Post\*(C'\fR argument.
.Sp
The \f(CW\*(C`Flock\*(C'\fR argument allows you to specify whether the perl function
\&\f(CW\*(C`flock\*(C'\fR is used to lock the file during the rotation operation.
Apparently flock causes problems on some platforms and this option has
been added to allow you to control the programs behaviour.  By default
the file will be locked using \f(CW\*(C`flock\*(C'\fR.
.Sp
The \f(CW\*(C`Persist\*(C'\fR argument allows you to control whether the program will
try and set the current log file ownership and permissions on any new
files that may be created by the rotation.  In some circumstances the
program doing the file rotation may not have sufficient permission to
\&\f(CW\*(C`chown\*(C'\fR on the file.  By default the program will try and preserve
ownership and permissions.
.IP "\fIrotate()\fR" 4
.IX Item "rotate()"
This method will copy the file passed in \f(CW\*(C`new\*(C'\fR to a file of the same
name, with a numeric extension and truncate the original file to zero
length.  The numeric extension will range from 1 up to the value
specified by Count, or 7 if none is defined, with 1 being the most
recent file.  When Count is reached, the older file is discarded in a
\&\s-1FIFO\s0 (first in, first out) fashion. If the argument \f(CW\*(C`Dir\*(C'\fR was given, 
all old files will be placed in the specified directory.
.Sp
The \f(CW\*(C`Post\*(C'\fR function is the last step executed by the rotate method so
the return code of rotate will be the return code of the function you
proved, or 1 by default.
.Sp
The copy function is implemented by using the File::Copy package, but
I have had a few people suggest that they would prefer File::Move.
I'm still not decided on this as you would loose data if the move should
fail.
.SS "Optional Compression"
.IX Subsection "Optional Compression"
If available \f(CW\*(C`rotate\*(C'\fR will also compress the file with the 
gzip program or the program passed as the \f(CW\*(C`Gzip\*(C'\fR argument.
.PP
You may now also use \f(CW\*(C`lib\*(C'\fR as a value for the \f(CW\*(C`Gzip\*(C'\fR argument.  This
directs the program to load the \f(CW\*(C`Compress::Zlib\*(C'\fR module, if available
and use it do the compression within perl.  \fBThis avoids the security
issues associated with spawning external programs and is the recommended
value for this option.\fR
.PP
If no argument is defined it will first check to see if the
\&\f(CW\*(C`Compress::Zlib\*(C'\fR module can be loaded then check the perl Config to
determine if gzip is available on your system. In this case the gzip
must be in your current path to succeed, and accept the \f(CW\*(C`\-f\*(C'\fR option.
.PP
See the \*(L"\s-1WARNING\s0\*(R" section below.
.SS "Optional Relocation Directory"
.IX Subsection "Optional Relocation Directory"
If you specify an argument for \f(CW\*(C`Dir\*(C'\fR then the file being rotated will
be relocated to the directory specified.  Along with any other files
that may have been rotated previously.  If the directory name specified
does not exist then it will be created with \f(CW0750\fR permissions.  If you
wish to have other permissions on the directory then I would recommend
you create the directory before using this module.
.PP
See the \*(L"\s-1WARNING\s0\*(R" section below.
.SH "WARNING"
.IX Header "WARNING"
If a system call is made to \fIgzip\fR this makes this module vulnerable to
security problems if a rogue gzip is in your path or \fIgzip\fR has been
sabotaged.  For this reason a \s-1STRONGLY\s0 \s-1RECOMMEND\s0 you \s-1DO\s0 \s-1NOT\s0 use this
module while you are \s-1ROOT\s0.
.PP
For a more secure alternative install the \f(CW\*(C`Compress::Zlib\*(C'\fR module and
use the \fBlib\fR value for the \f(CW\*(C`Gzip\*(C'\fR argument.
.PP
If you specify an argument for \f(CW\*(C`Dir\*(C'\fR and the directory name you pass
does not exist, this module \fBwill create\fR the directory with
permissions \f(CW0750\fR.
.SH "DEPENDANCIES"
.IX Header "DEPENDANCIES"
See File::Copy.
.PP
If \f(CW\*(C`Gzip\*(C'\fR is being used it must create files with an extension 
of \f(CW\*(C`.gz\*(C'\fR for the file to be picked by the rotate cycle.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-99 Paul Gampe. All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1AUTHORS\s0 \s-1OR\s0 \s-1DISTRIBUTORS\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1TO\s0 \s-1ANY\s0 \s-1PARTY\s0
\&\s-1FOR\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0, \s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0
\&\s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THIS\s0 \s-1SOFTWARE\s0, \s-1ITS\s0 \s-1DOCUMENTATION\s0, \s-1OR\s0 \s-1ANY\s0
\&\s-1DERIVATIVES\s0 \s-1THEREOF\s0, \s-1EVEN\s0 \s-1IF\s0 \s-1THE\s0 \s-1AUTHORS\s0 \s-1HAVE\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0
\&\s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0 \s-1DAMAGE\s0.
.PP
\&\s-1THE\s0 \s-1AUTHORS\s0 \s-1AND\s0 \s-1DISTRIBUTORS\s0 \s-1SPECIFICALLY\s0 \s-1DISCLAIM\s0 \s-1ANY\s0 \s-1WARRANTIES\s0,
\&\s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0
\&\s-1MERCHANTABILITY\s0, \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0, \s-1AND\s0
NON-INFRINGEMENT. \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \s-1ON\s0 \s-1AN\s0 ``\s-1AS\s0 \s-1IS\s0'' \s-1BASIS\s0, \s-1AND\s0
\&\s-1THE\s0 \s-1AUTHORS\s0 \s-1AND\s0 \s-1DISTRIBUTORS\s0 \s-1HAVE\s0 \s-1NO\s0 \s-1OBLIGATION\s0 \s-1TO\s0 \s-1PROVIDE\s0
\&\s-1MAINTENANCE\s0, \s-1SUPPORT\s0, \s-1UPDATES\s0, \s-1ENHANCEMENTS\s0, \s-1OR\s0 \s-1MODIFICATIONS\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Copy, Logfile::Base, flock
\&\fIChanges\fR file for change history and credits for contributions.
.SH "RETURN"
.IX Header "RETURN"
All functions return 1 on success, 0 on failure.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Gampe <paulg@apnic.net>
