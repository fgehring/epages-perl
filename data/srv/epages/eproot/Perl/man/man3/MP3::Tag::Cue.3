.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MP3::Tag::Cue 3"
.TH MP3::Tag::Cue 3 "2009-11-28" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MP3::Tag::Cue \- Module for parsing .cue files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  my $db = MP3::Tag::Cue\->new($filename, $track);       # Name of audio file
\&  my $db = MP3::Tag::Cue\->new_from($record, $track); # Contents of .cue file
\&
\&  ($title, $artist, $album, $year, $comment, $track) = $db\->parse();
.Ve
.PP
see MP3::Tag
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MP3::Tag::Cue is designed to be called from the MP3::Tag module.
.PP
It parses the content of a \fI.cue\fR file.
.PP
The \fI.cue\fR file is looked for in the same directory as audio file; one of the
following conditions must be satisfied:
.IP "\(bu" 4
The \*(L"audio\*(R" file is specified is actually a \fI.cue\fR file;
.IP "\(bu" 4
There is exactly one \fI.cue\fR file in the directory of audio file;
.IP "\(bu" 4
There is exactly one \fI.cue\fR file in the directory of audio file
with basename which is a beginning of the name of audio file.
.IP "\(bu" 4
There is exactly one \fI.cue\fR file in the directory of audio file
with basename which matches (case-insensitive) a beginning of the
name of audio file.
.PP
If no \fI.cue\fR file is found in the directory of audio file, the same process
is repeated once one directory uplevel, with the name of the file's directory
used instead of the file name.  E.g., with the files like this
.PP
.Vb 2
\&   Foo/bar.cue
\&   Foo/bar/04.wav
.Ve
.PP
audio file \fIFoo/bar/04.wav\fR will be associated with \fIFoo/bar.cue\fR.
.IP "\fIparse()\fR" 4
.IX Item "parse()"
.Vb 2
\&  ($title, $artist, $album, $year, $comment, $track) =
\&     $db\->parse($what);
.Ve
.Sp
\&\fIparse_filename()\fR extracts information about artist, title, track number,
album and year from the \fI.cue\fR file.  \f(CW$what\fR is optional; it maybe title,
track, artist, album, year, genre or comment. If \f(CW$what\fR is defined \fIparse()\fR will return
only this element.
.Sp
Additionally, \f(CW$what\fR can take values \f(CW\*(C`artist_collection\*(C'\fR (returns the value of
artist in the whole-disk-info field \f(CW\*(C`PERFORMER\*(C'\fR, \f(CW\*(C`songwriter\*(C'\fR.
.IP "\fItitle()\fR" 4
.IX Item "title()"
.Vb 1
\& $title = $db\->title();
.Ve
.Sp
Returns the title, obtained from the \f(CW\*(AqTracktitle\*(Aq\fR entry of the file.
.IP "\fIartist()\fR" 4
.IX Item "artist()"
.Vb 1
\& $artist = $db\->artist();
.Ve
.Sp
Returns the artist name, obtained from the \f(CW\*(AqPerformer\*(Aq\fR or
\&\f(CW\*(AqAlbumperformer\*(Aq\fR entries (the first which is present) of the file.
.IP "\fItrack()\fR" 4
.IX Item "track()"
.Vb 1
\& $track = $db\->track();
.Ve
.Sp
Returns the track number, stored during object creation, or queried from
the parent.
.IP "\fIyear()\fR" 4
.IX Item "year()"
.Vb 1
\& $year = $db\->year();
.Ve
.Sp
Returns the year, obtained from the \f(CW\*(AqYear\*(Aq\fR entry of the file.  (Often
not present.)
.IP "\fIalbum()\fR" 4
.IX Item "album()"
.Vb 1
\& $album = $db\->album();
.Ve
.Sp
Returns the album name, obtained from the \f(CW\*(AqAlbumtitle\*(Aq\fR entry of the file.
.IP "\fIcomment()\fR" 4
.IX Item "comment()"
.Vb 1
\& $comment = $db\->comment();
.Ve
.Sp
Returns the \f(CW\*(AqREM COMMENT\*(Aq\fR entry of the file.  (Often not present.)
.IP "\fIgenre()\fR" 4
.IX Item "genre()"
.Vb 1
\& $genre = $db\->genre($filename);
.Ve
