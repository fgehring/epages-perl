.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Stream 3"
.TH XML::Stream 3 "2010-01-08" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Stream \- Creates an XML Stream connection and parses return data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  XML::Stream is an attempt at solidifying the use of XML via streaming.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 5
\&  This module provides the user with methods to connect to a remote
\&  server, send a stream of XML to the server, and receive/parse an XML
\&  stream from the server.  It is primarily based work for the Etherx XML
\&  router developed by the Jabber Development Team.  For more information
\&  about this project visit http://xmpp.org/protocols/streams/.
\&
\&  XML::Stream gives the user the ability to define a central callback
\&  that will be used to handle the tags received from the server.  These
\&  tags are passed in the format defined at instantiation time.
\&  the closing tag of an object is seen, the tree is finished and passed
\&  to the call back function.  What the user does with it from there is up
\&  to them.
\&
\&  For a detailed description of how this module works, and about the data
\&  structure that it returns, please view the source of Stream.pm and
\&  look at the detailed description at the end of the file.
\&
\&
\&  NOTE: The parser that XML::Stream::Parser provides, as are most Perl
\&  parsers, is synchronous.  If you are in the middle of parsing a
\&  packet and call a user defined callback, the Parser is blocked until
\&  your callback finishes.  This means you cannot be operating on a
\&  packet, send out another packet and wait for a response to that packet.
\&  It will never get to you.  Threading might solve this, but as we all
\&  know threading in Perl is not quite up to par yet.  This issue will be
\&  revisted in the future.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Vb 12
\&  new(debug=>string,       \- creates the XML::Stream object.  debug
\&      debugfh=>FileHandle,   should be set to the path for the debug log
\&      debuglevel=>0|1|N,     to be written.  If set to "stdout" then the
\&      debugtime=>0|1,        debug will go there.   Also, you can specify
\&      style=>string)         a filehandle that already exists byt using
\&                             debugfh.  debuglevel determines the amount
\&                             of debug to generate.  0 is the least, 1 is
\&                             a little more, N is the limit you want.
\&                             debugtime determines wether a timestamp
\&                             should be preappended to the entry.  style
\&                             defines the way the data structure is
\&                             returned.  The two available styles are:
\&
\&                               tree \- XML::Parser Tree format
\&                               node \- XML::Stream::Node format
\&
\&                             For more information see the respective man
\&                             pages.
\&
\&  Connect(hostname=>string,       \- opens a tcp connection to the
\&          port=>integer,            specified server and sends the proper
\&          to=>string,               opening XML Stream tag.  hostname,
\&          from=>string,             port, and namespace are required.
\&          myhostname=>string,       namespaces allows you to use
\&          namespace=>string,        XML::Stream::Namespace objects.
\&          namespaces=>array,        to is needed if you want the stream
\&          connectiontype=>string,   to attribute to be something other
\&          ssl=>0|1,                 than the hostname you are connecting
\&          srv=>string)              to.  from is needed if you want the
\&                                    stream from attribute to be something
\&                                    other than the hostname you are
\&                                    connecting from.  myhostname should
\&                                    not be needed but if the module
\&                                    cannot determine your hostname
\&                                    properly (check the debug log), set
\&                                    this to the correct value, or if you
\&                                    want the other side of the  stream to
\&                                    think that you are someone else.  The
\&                                    type determines the kind of
\&                                    connection that is made:
\&                                      "tcpip"    \- TCP/IP (default)
\&                                      "stdinout" \- STDIN/STDOUT
\&                                      "http"     \- HTTP
\&                                    HTTP recognizes proxies if the ENV
\&                                    variables http_proxy or https_proxy
\&                                    are set.  ssl specifies if an SSL
\&                                    socket should be used for encrypted
\&                                    communications.  This function
\&                                    returns the same hash from GetRoot()
\&                                    below. Make sure you get the SID
\&                                    (Session ID) since you have to use it
\&                                    to call most other functions in here.
\&
\&                                    If srv is specified AND Net::DNS is
\&                                    installed and can be loaded, then
\&                                    an SRV query is sent to srv.hostname
\&                                    and the results processed to replace
\&                                    the hostname and port.  If the lookup
\&                                    fails, or Net::DNS cannot be loaded,
\&                                    then hostname and port are left alone
\&                                    as the defaults.
\&
\&
\&  OpenFile(string) \- opens a filehandle to the argument specified, and
\&                     pretends that it is a stream.  It will ignore the
\&                     outer tag, and not check if it was a
\&                     <stream:stream/>. This is useful for writing a
\&                     program that has to parse any XML file that is
\&                     basically made up of small packets (like RDF).
\&
\&  Disconnect(sid) \- sends the proper closing XML tag and closes the
\&                    specified socket down.
\&
\&  Process(integer) \- waits for data to be available on the socket.  If
\&                     a timeout is specified then the Process function
\&                     waits that period of time before returning nothing.
\&                     If a timeout period is not specified then the
\&                     function blocks until data is received.  The
\&                     function returns a hash with session ids as the key,
\&                     and status values or data as the hash values.
\&
\&  SetCallBacks(node=>function,   \- sets the callback that should be
\&               update=>function)   called in various situations.  node
\&                                   is used to handle the data structures
\&                                   that are built for each top level tag.
\&                                   Update is used for when Process is
\&                                   blocking waiting for data, but you
\&                                   want your original code to be updated.
\&
\&  GetRoot(sid) \- returns the attributes that the stream:stream tag sent
\&                 by the other end listed in a hash for the specified
\&                 session.
\&
\&  GetSock(sid) \- returns a pointer to the IO::Socket object for the
\&                 specified session.
\&
\&  Send(sid,    \- sends the string over the specified connection as is.
\&       string)   This does no checking if valid XML was sent or not.
\&                 Best behavior when sending information.
\&
\&  GetErrorCode(sid) \- returns a string for the specified session that
\&                      will hopefully contain some useful information
\&                      about why Process or Connect returned an undef
\&                      to you.
\&
\&  XPath(node,path) \- returns an array of results that match the xpath.
\&                     node can be any of the three types (Tree, Node).
.Ve
.SH "VARIABLES"
.IX Header "VARIABLES"
.Vb 3
\&  $NONBLOCKING \- tells the Parser to enter into a nonblocking state.  This
\&                 might cause some funky behavior since you can get nested
\&                 callbacks while things are waiting.  1=on, 0=off(default).
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&  ##########################
\&  # simple example
\&
\&  use XML::Stream qw( Tree );
\&
\&  $stream = new XML::Stream;
\&
\&  my $status = $stream\->Connect(hostname => "jabber.org",
\&                                port => 5222,
\&                                namespace => "jabber:client");
\&
\&  if (!defined($status)) {
\&    print "ERROR: Could not connect to server\en";
\&    print "       (",$stream\->GetErrorCode(),")\en";
\&    exit(0);
\&  }
\&
\&  while($node = $stream\->Process()) {
\&    # do something with $node
\&  }
\&
\&  $stream\->Disconnect();
\&
\&
\&  ###########################
\&  # example using a handler
\&
\&  use XML::Stream qw( Tree );
\&
\&  $stream = new XML::Stream;
\&  $stream\->SetCallBacks(node=>\e&noder);
\&  $stream\->Connect(hostname => "jabber.org",
\&                   port => 5222,
\&                   namespace => "jabber:client",
\&                   timeout => undef) || die $!;
\&
\&  # Blocks here forever, noder is called for incoming
\&  # packets when they arrive.
\&  while(defined($stream\->Process())) { }
\&
\&  print "ERROR: Stream died (",$stream\->GetErrorCode(),")\en";
\&
\&  sub noder
\&  {
\&    my $sid = shift;
\&    my $node = shift;
\&    # do something with $node
\&  }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Tweaked, tuned, and brightness changes by Ryan Eatmon, reatmon@ti.com
in May of 2000.
Colorized, and Dolby Surround sound added by Thomas Charron,
tcharron@jabber.org
By Jeremie in October of 1999 for http://etherx.jabber.org/streams/
.PP
Currently maintained by Darian Anthony Patrick.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
