.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TOML::Parser 3"
.TH TOML::Parser 3 "2017-05-08" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TOML::Parser \- simple toml parser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use TOML::Parser;
\&
\&    my $parser = TOML::Parser\->new;
\&    my $data   = $parser\->parse($toml);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
TOML::Parser is a simple toml parser.
.PP
This data structure complies with the tests
provided at https://github.com/toml\-lang/toml/tree/v0.4.0/tests <https://github.com/toml-lang/toml/tree/v0.4.0/tests>.
.PP
The v0.4.0 specification is supported.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $parser = TOML::Parser\->new(\e%args)" 4
.el .IP "my \f(CW$parser\fR = TOML::Parser\->new(\e%args)" 4
.IX Item "my $parser = TOML::Parser->new(%args)"
Creates a new TOML::Parser instance.
.Sp
.Vb 1
\&    use TOML::Parser;
\&
\&    # create new parser
\&    my $parser = TOML::Parser\->new();
.Ve
.Sp
Arguments can be:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`inflate_datetime\*(C'\fR
.Sp
If use it, You can replace inflate \f(CW\*(C`datetime\*(C'\fR process.
The subroutine of default is \f(CW\*(C`identity\*(C'\fR. \f(CW\*(C`e.g.) sub { $_[0] }\*(C'\fR
.Sp
.Vb 3
\&    use TOML::Parser;
\&    use DateTime;
\&    use DateTime::Format::ISO8601;
\&
\&    # create new parser
\&    my $parser = TOML::Parser\->new(
\&        inflate_datetime => sub {
\&            my $dt = shift;
\&            return DateTime::Format::ISO8601\->parse_datetime($dt);
\&        },
\&    );
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`inflate_boolean\*(C'\fR
.Sp
If use it, You can replace inflate boolean process.
The return value of default subroutine is \f(CW\*(C`Types::Serialiser::true\*(C'\fR or \f(CW\*(C`Types::Serialiser::false\*(C'\fR.
.Sp
.Vb 1
\&    use TOML::Parser;
\&
\&    # create new parser
\&    my $parser = TOML::Parser\->new(
\&        inflate_boolean => sub {
\&            my $boolean = shift;
\&            return $boolean eq \*(Aqtrue\*(Aq ? 1 : 0;
\&        },
\&    );
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`strict_mode\*(C'\fR
.Sp
TOML::Parser is using a more flexible rule for compatibility with old \s-1TOML\s0 of default.
If make this option true value, You can parse a toml with strict rule.
.Sp
.Vb 1
\&    use TOML::Parser;
\&
\&    # create new parser
\&    my $parser = TOML::Parser\->new(
\&        strict_mode => 1
\&    );
.Ve
.RE
.RS 4
.RE
.ie n .IP "my $data = $parser\->parse_file($path)" 4
.el .IP "my \f(CW$data\fR = \f(CW$parser\fR\->parse_file($path)" 4
.IX Item "my $data = $parser->parse_file($path)"
.PD 0
.ie n .IP "my $data = $parser\->parse_fh($fh)" 4
.el .IP "my \f(CW$data\fR = \f(CW$parser\fR\->parse_fh($fh)" 4
.IX Item "my $data = $parser->parse_fh($fh)"
.ie n .IP "my $data = $parser\->parse($src)" 4
.el .IP "my \f(CW$data\fR = \f(CW$parser\fR\->parse($src)" 4
.IX Item "my $data = $parser->parse($src)"
.PD
Transforms a string containing toml to a perl data structure or vice versa.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1TOML\s0
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) karupanerura.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
karupanerura <karupa@cpan.org>
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Olivier Mengue\*' <dolmen@cpan.org>
yowcow <yowcow@cpan.org>
Syohei \s-1YOSHIDA\s0 <syohex@gmail.com>
