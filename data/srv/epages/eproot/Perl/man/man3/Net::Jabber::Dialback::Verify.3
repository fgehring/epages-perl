.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Jabber::Dialback::Verify 3"
.TH Net::Jabber::Dialback::Verify 3 "2004-08-17" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Jabber::Dialback::Verify \- Jabber Dialback Verify Module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  Net::Jabber::Dialback::Verify is a companion to the Net::Jabber::Dialback
\&  module.  It provides the user a simple interface to set and retrieve all
\&  parts of a Jabber Dialback Verify.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&  To initialize the Verify with a Jabber <db:*/> you must pass it
\&  the XML::Stream hash.  For example:
\&
\&    my $dialback = new Net::Jabber::Dialback::Verify(%hash);
\&
\&  There has been a change from the old way of handling the callbacks.
\&  You no longer have to do the above yourself, a NJ::Dialback::Verify
\&  object is passed to the callback function for the message.  Also,
\&  the first argument to the callback functions is the session ID from
\&  XML::Streams.  There are some cases where you might want this
\&  information, like if you created a Client that connects to two servers
\&  at once, or for writing a mini server.
\&
\&    use Net::Jabber qw(Server);
\&
\&    sub dialbackVerify {
\&      my ($sid,$Verify) = @_;
\&      .
\&      .
\&      .
\&    }
\&
\&  You now have access to all of the retrieval functions available.
\&
\&  To create a new dialback to send to the server:
\&
\&    use Net::Jabber qw(Server);
\&
\&    $Verify = new Net::Jabber::Dialback::Verify();
\&
\&  Now you can call the creation functions below to populate the tag before
\&  sending it.
\&
\&  For more information about the array format being passed to the CallBack
\&  please read the Net::Jabber::Client documentation.
.Ve
.SS "Retrieval functions"
.IX Subsection "Retrieval functions"
.Vb 5
\&    $to         = $Verify\->GetTo();
\&    $from       = $Verify\->GetFrom();
\&    $type       = $Verify\->GetType();
\&    $id         = $Verify\->GetID();
\&    $data       = $Verify\->GetData();
\&
\&    $str        = $Verify\->GetXML();
\&    @dialback   = $Verify\->GetTree();
.Ve
.SS "Creation functions"
.IX Subsection "Creation functions"
.Vb 9
\&    $Verify\->SetVerify(from=>"jabber.org",
\&                       to=>"jabber.com",
\&                       id=>id,
\&                       data=>key);
\&    $Verify\->SetTo("jabber.org");
\&    $Verify\->SetFrom("jabber.com");
\&    $Verify\->SetType("valid");
\&    $Verify\->SetID(id);
\&    $Verify\->SetData(key);
.Ve
.SS "Test functions"
.IX Subsection "Test functions"
.Vb 4
\&    $test = $Verify\->DefinedTo();
\&    $test = $Verify\->DefinedFrom();
\&    $test = $Verify\->DefinedType();
\&    $test = $Verify\->DefinedID();
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Retrieval functions"
.IX Subsection "Retrieval functions"
.Vb 2
\&  GetTo() \-  returns a string with server that the <db:verify/> is being
\&             sent to.
\&
\&  GetFrom() \-  returns a string with server that the <db:verify/> is being
\&               sent from.
\&
\&  GetType() \- returns a string with the type <db:verify/> this is.
\&
\&  GetID() \- returns a string with the id <db:verify/> this is.
\&
\&  GetData() \- returns a string with the cdata of the <db:verify/>.
\&
\&  GetXML() \- returns the XML string that represents the <db:verify/>.
\&             This is used by the Send() function in Server.pm to send
\&             this object as a Jabber Dialback Verify.
\&
\&  GetTree() \- returns an array that contains the <db:verify/> tag
\&              in XML::Parser::Tree format.
.Ve
.SS "Creation functions"
.IX Subsection "Creation functions"
.Vb 9
\&  SetVerify(to=>string,   \- set multiple fields in the <db:verify/>
\&            from=>string,   at one time.  This is a cumulative
\&            type=>string,   and over writing action.  If you set
\&            id=>string,     the "from" attribute twice, the second
\&            data=>string)   setting is what is used.  If you set
\&                            the type, and then set the data
\&                            then both will be in the <db:verify/>
\&                            tag.  For valid settings read the
\&                            specific Set functions below.
\&
\&  SetTo(string) \- sets the to attribute.
\&
\&  SetFrom(string) \- sets the from attribute.
\&
\&  SetType(string) \- sets the type attribute.  Valid settings are:
\&
\&                    valid
\&                    invalid
\&
\&  SetID(string) \- sets the id attribute.
\&
\&  SetData(string) \- sets the cdata of the <db:verify/>.
.Ve
.SS "Test functions"
.IX Subsection "Test functions"
.Vb 2
\&  DefinedTo() \- returns 1 if the to attribute is defined in the 
\&                <db:verify/>, 0 otherwise.
\&
\&  DefinedFrom() \- returns 1 if the from attribute is defined in the 
\&                  <db:verify/>, 0 otherwise.
\&
\&  DefinedType() \- returns 1 if the type attribute is defined in the 
\&                  <db:verify/>, 0 otherwise.
\&
\&  DefinedID() \- returns 1 if the id attribute is defined in the 
\&                  <db:verify/>, 0 otherwise.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
By Ryan Eatmon in May of 2001 for http://jabber.org..
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
