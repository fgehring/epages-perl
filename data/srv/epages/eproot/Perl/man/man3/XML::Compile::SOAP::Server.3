.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::SOAP::Server 3"
.TH XML::Compile::SOAP::Server 3 "2017-01-11" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::SOAP::Server \- server\-side SOAP message processing
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& XML::Compile::SOAP::Server is extended by
\&   XML::Compile::SOAP11::Server
\&   XML::Compile::SOAP12::Server
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # used by distribution XML::Compile::SOAP::Daemon
\&
\&  my $soap   = XML::Compile::SOAP11::Server\->new;
\&  my $input  = $soap\->compileMessage(\*(AqRECEIVER\*(Aq, ...);
\&  my $output = $soap\->compileMessage(\*(AqSENDER\*(Aq, ...);
\&
\&  $soap\->compileHandler
\&    ( name => $name, input => $input, output => $output
\&    , callback => \e$my_handler
\&    );
\&
\&  my $daemon = XML::Compile::SOAP::HTTPDaemon\->new(...);
\&  $daemon\->addHandler($type => $daemon);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class defines methods that each server for the \s-1SOAP\s0
message exchange protocols must implement.
.SH "METHODS"
.IX Header "METHODS"
.SS "Instantiation"
.IX Subsection "Instantiation"
This object can not be instantiated, but is only used as secundary
base class.  The primary must contain the \f(CW\*(C`new\*(C'\fR.
.IP "XML::Compile::SOAP::Server\->\fBnew\fR(%options)" 4
.IX Item "XML::Compile::SOAP::Server->new(%options)"
.Vb 2
\& \-Option\-\-Default
\&  role    \*(AqNEXT\*(Aq
.Ve
.RS 4
.IP "role => \s-1URI\s0" 2
.IX Item "role => URI"
In \s-1SOAP1\s0.1, the term is 'actor', but \s-1SOAP1\s0.2 has renamed this into
\&'role': the role [this daemon] plays in the transport protocol.
.Sp
Please use the role abbreviations as provided by the protocol
implementations when possible: they will be translated into the
right \s-1URI\s0 on time.  See \fIXML::Compile::SOAP::roleAbbreviation()\fR
and the constants defined in XML::Compile::SOAP::Util
.RE
.RS 4
.RE
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBrole\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBrole\fR()" 4
.IX Item "$obj->role()"
Returns the \s-1URI\s0 of the role (actor) of this server.
.SS "Actions"
.IX Subsection "Actions"
.ie n .IP "$obj\->\fBcompileFilter\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileFilter\fR(%options)" 4
.IX Item "$obj->compileFilter(%options)"
This routine returns a \s-1CODE\s0 reference which can be used for
compileHandler(selector); so see whether a certain message has arrived.
On the moment, only the first \f(CW\*(C`body\*(C'\fR element is used to determine that.
.Sp
.Vb 4
\& \-Option\-\-Default
\&  body    []
\&  fault   <undef>
\&  header  <undef>
.Ve
.RS 4
.IP "body => ARRAY-of-TYPES" 2
.IX Item "body => ARRAY-of-TYPES"
.PD 0
.IP "fault => ARRAY-of-TYPES" 2
.IX Item "fault => ARRAY-of-TYPES"
.IP "header => ARRAY-of-TYPES" 2
.IX Item "header => ARRAY-of-TYPES"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBcompileHandler\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileHandler\fR(%options)" 4
.IX Item "$obj->compileHandler(%options)"
.PD
Returns an \s-1HTTP\s0 status code and an XML::LibXML::Document pair.
.Sp
.Vb 6
\& \-Option  \-\-Default
\&  callback  <fault: not implemented>
\&  decode    <undef>
\&  encode    <undef>
\&  name      <required>
\&  selector  sub {0}
.Ve
.RS 4
.IP "callback => \s-1CODE\s0" 2
.IX Item "callback => CODE"
As input, the \s-1SERVER\s0 object and the translated input message (Perl version)
are passed in.  As output, a suitable output structure must be produced.
If the callback is not set, then a fault message will be returned to the
user.
.IP "decode => \s-1CODE\s0" 2
.IX Item "decode => CODE"
The \s-1CODE\s0 reference is used to decode the (parsed) \s-1XML\s0 input message
into the pure Perl request.  The reference is a \s-1READER\s0, created with
\&\fIXML::Compile::Schema::compile()\fR.  If no input decoder is specified,
then the callback handler will be called with the un-decoded
XML::LibXML::Document node.
.IP "encode => \s-1CODE\s0" 2
.IX Item "encode => CODE"
The \s-1CODE\s0 reference is used to encode the Perl answer structure into the
output message.  The reference is a \s-1WRITER\s0.  created with
\&\fIXML::Compile::Schema::compile()\fR.  If no output encoder is specified,
then the callback must return an XML::LibXML::Document, or only
produce error messages.
.IP "name => \s-1STRING\s0" 2
.IX Item "name => STRING"
The identification for this action, for instance used for logging.  When
the action is created via a \s-1WSDL\s0, the portname will be used here.
.Sp
It is a pity that the portname is not passed in the \s-1SOAP\s0 message,
because it is not so easy to detect which handler must be called.
.IP "selector => \s-1CODE\s0" 2
.IX Item "selector => CODE"
One way or the other, you have to figure-out whether a message addresses
a certain process. The callback will only be used if the \s-1CODE\s0 reference
specified here returns a true value.
.Sp
The \s-1CODE\s0 reference will be called with the \s-1XML\s0 version of the message,
and a \s-1HASH\s0 which contains the information about the \s-1XML\s0 collected with
\&\fIXML::Compile::SOAP::messageStructure()\fR plus the \f(CW\*(C`soap_version\*(C'\fR entry.
.RE
.RS 4
.RE
.IP "XML::Compile::SOAP::Server\->\fBfaultWriter\fR()" 4
.IX Item "XML::Compile::SOAP::Server->faultWriter()"
Returns a \s-1CODE\s0 reference which can be used to produce faults.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-SOAP distribution version 3.21,
built on January 11, 2017. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR .
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2017 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
