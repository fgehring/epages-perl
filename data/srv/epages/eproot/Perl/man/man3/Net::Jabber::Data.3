.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Jabber::Data 3"
.TH Net::Jabber::Data 3 "2004-08-17" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Jabber::Data \- Jabber Data Library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  Net::Jabber::Data is a companion to the Net::Jabber::XDB module. It
\&  provides the user a simple interface to set and retrieve all
\&  parts of a Jabber XDB Data.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&  Net::Jabber::Data differs from the other modules in that its behavior
\&  and available functions are based off of the XML namespace that is
\&  set in it.  The current list of supported namespaces is:
\&
\&    jabber:iq:auth
\&    jabber:iq:auth:0k
\&    jabber:iq:register
\&    jabber:iq:roster
\&
\&  For more information on what these namespaces are for, visit 
\&  http://www.jabber.org and browse the Jabber Programmers Guide.
\&
\&  Each of these namespaces provide Net::Jabber::Data with the functions
\&  to access the data.  By using the AUTOLOAD function the functions for
\&  each namespace is used when that namespace is active.
\&
\&  To access a Data object you must create an XDB object and use the
\&  access functions there to get to the Data.  To initialize the XDB with
\&  a Jabber <xdb/> you must pass it the XML::Stream hash from the
\&  Net::Jabber::Client module.
\&
\&    my $xdb = new Net::Jabber::XDB(%hash);
\&
\&  There has been a change from the old way of handling the callbacks.
\&  You no longer have to do the above yourself, a Net::Jabber::XDB
\&  object is passed to the callback function for the message.  Also,
\&  the first argument to the callback functions is the session ID from
\&  XML::Streams.  There are some cases where you might want this
\&  information, like if you created a Client that connects to two servers
\&  at once, or for writing a mini server.
\&
\&    use Net::Jabber qw(Client);
\&
\&    sub xdbCB {
\&      my ($sid,$XDB) = @_;
\&      my $data = $XDB\->GetData();
\&      .
\&      .
\&      .
\&    }
\&
\&  You now have access to all of the retrieval functions available for
\&  that namespace.
\&
\&  To create a new xdb to send to the server:
\&
\&    use Net::Jabber;
\&
\&    my $xdb = new Net::Jabber::XDB();
\&    $data = $xdb\->NewData("jabber:iq:auth");
\&
\&  Now you can call the creation functions for the Data as defined in the
\&  proper namespaces.  See below for the general <data/> functions, and
\&  in each data module for those functions.
\&
\&  For more information about the array format being passed to the
\&  CallBack please read the Net::Jabber::Client documentation.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Retrieval functions"
.IX Subsection "Retrieval functions"
.Vb 2
\&  GetXMLNS() \- returns a string with the namespace of the data that
\&               the <xdb/> contains.
\&
\&               $xmlns  = $XDB\->GetXMLNS();
\&
\&  GetData() \- since the behavior of this module depends on the
\&               namespace, a Data object may contain Data objects.
\&               This helps to leverage code reuse by making children
\&               behave in the same manner.  More than likely this
\&               function will never be called.
\&
\&               @data = GetData()
.Ve
.SS "Creation functions"
.IX Subsection "Creation functions"
.Vb 1
\&  SetXMLNS(string) \- sets the xmlns of the <data/> to the string.
\&
\&                     $data\->SetXMLNS("jabber:xdb:roster");
.Ve
.PP
In an effort to make maintaining this document easier, I am not going
to go into full detail on each of these functions.  Rather I will
present the functions in a list with a type in the first column to
show what they return, or take as arugments.  Here is the list of
types I will use:
.PP
.Vb 10
\&  string  \- just a string
\&  array   \- array of strings
\&  flag    \- this means that the specified child exists in the
\&            XML <child/> and acts like a flag.  get will return
\&            0 or 1.
\&  JID     \- either a string or Net::Jabber::JID object.
\&  objects \- creates new objects, or returns an array of
\&            objects.
\&  special \- this is a special case kind of function.  Usually
\&            just by calling Set() with no arguments it will
\&            default the value to a special value, like OS or time.
\&            Sometimes it will modify the value you set, like
\&            in jabber:xdb:version SetVersion() the function
\&            adds on the Net::Jabber version to the string
\&            just for advertisement purposes. =)
\&  master  \- this desribes a function that behaves like the
\&            SetMessage() function in Net::Jabber::Message.
\&            It takes a hash and sets all of the values defined,
\&            and the Set returns a hash with the values that
\&            are defined in the object.
.Ve
.SH "jabber:iq:"
.IX Header "jabber:iq:"
.Vb 2
\&  Type     Get               Set               Defined
\&  =======  ================  ================  ==================
.Ve
.SH "jabber:iq:"
.IX Header "jabber:iq:"
.Vb 2
\&  Type     Get               Set               Defined
\&  =======  ================  ================  ==================
.Ve
.SH "jabber:iq:"
.IX Header "jabber:iq:"
.Vb 2
\&  Type     Get               Set               Defined
\&  =======  ================  ================  ==================
.Ve
.SH "jabber:iq:"
.IX Header "jabber:iq:"
.Vb 2
\&  Type     Get               Set               Defined
\&  =======  ================  ================  ==================
.Ve
.SH "jabber:iq:"
.IX Header "jabber:iq:"
.Vb 2
\&  Type     Get               Set               Defined
\&  =======  ================  ================  ==================
.Ve
.SH "CUSTOM NAMESPACES"
.IX Header "CUSTOM NAMESPACES"
.Vb 3
\&  Part of the flexability of this module is that you can define your own
\&  namespace.  For more information on this topic, please read the
\&  Net::Jabber::Namespaces man page.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
By Ryan Eatmon in May of 2001 for http://jabber.org..
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
