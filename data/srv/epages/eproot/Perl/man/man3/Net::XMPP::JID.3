.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::XMPP::JID 3"
.TH Net::XMPP::JID 3 "2011-04-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::XMPP::JID \- XMPP JID Module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  Net::XMPP::JID is a companion to the Net::XMPP module.
\&  It provides the user a simple interface to set and retrieve all
\&  parts of a Jabber ID (userid on a server).
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 4
\&  To initialize the JID you must pass it the string that represents the
\&  jid from the XML packet.  Inside the XMPP modules this is done
\&  automatically and the JID object is returned instead of a string.
\&  For example, in the callback function for the XMPP object foo:
\&
\&    use Net::XMPP;
\&
\&    sub foo {
\&      my $foo = new Net::XMPP::Foo(@_);
\&      my $from = $foo\->GetFrom();
\&      my $JID = new Net::XMPP::JID($from);
\&      .
\&      .
\&      .
\&    }
\&
\&  You now have access to all of the retrieval functions available.
\&
\&  To create a new JID to send to the server:
\&
\&    use Net::XMPP;
\&
\&    $JID = new Net::XMPP::JID();
\&
\&  Now you can call the creation functions below to populate the tag
\&  before sending it.
.Ve
.SS "Retrieval functions"
.IX Subsection "Retrieval functions"
.Vb 3
\&    $userid   = $JID\->GetUserID();
\&    $server   = $JID\->GetServer();
\&    $resource = $JID\->GetResource();
\&
\&    $JID      = $JID\->GetJID();
\&    $fullJID  = $JID\->GetJID("full");
\&    $baseJID  = $JID\->GetJID("base");
.Ve
.SS "Creation functions"
.IX Subsection "Creation functions"
.Vb 3
\&    $JID\->SetJID(userid=>"bob",
\&                 server=>"jabber.org",
\&                 resource=>"Work");
\&
\&    $JID\->SetJID(\*(Aqblue@moon.org/Home\*(Aq);
\&
\&    $JID\->SetUserID("foo");
\&    $JID\->SetServer("bar.net");
\&    $JID\->SetResource("Foo Bar");
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Retrieval functions"
.IX Subsection "Retrieval functions"
.Vb 4
\&  GetUserID() \- returns a string with the userid of the JID.
\&                If the string is an address (bob%jabber.org) then
\&                the function will return it as an address
\&                (bob@jabber.org).
\&
\&  GetServer() \- returns a string with the server of the JID.
\&
\&  GetResource() \- returns a string with the resource of the JID.
\&
\&  GetJID()       \- returns a string that represents the JID stored
\&  GetJID("full")   within.  If the "full" string is specified, then
\&  GetJID("base")   you get the full JID, including Resource, which
\&                   should be used to send to the server.  If the "base",
\&                   string is specified, then you will just get
\&                   user@server, or the base JID.
.Ve
.SS "Creation functions"
.IX Subsection "Creation functions"
.Vb 10
\&  SetJID(userid=>string,   \- set multiple fields in the jid at
\&         server=>string,     one time.  This is a cumulative
\&         resource=>string)   and over writing action.  If you set
\&  SetJID(string)             the "userid" attribute twice, the second
\&                             setting is what is used.  If you set
\&                             the server, and then set the resource
\&                             then both will be in the jid.  If all
\&                             you pass is a string, then that string
\&                             is used as the JID.  For valid settings
\&                             read the specific Set functions below.
\&
\&  SetUserID(string) \- sets the userid.  Must be a valid userid or the
\&                      server will complain if you try to use this JID
\&                      to talk to the server.  If the string is an
\&                      address then it will be converted to the %
\&                      form suitable for using as a User ID.
\&
\&  SetServer(string) \- sets the server.  Must be a valid host on the
\&                      network or the server will not be able to talk
\&                      to it.
\&
\&  SetResource(string) \- sets the resource of the userid to talk to.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ryan Eatmon
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is free software, you can redistribute it and/or modify it
under the \s-1LGPL\s0.
