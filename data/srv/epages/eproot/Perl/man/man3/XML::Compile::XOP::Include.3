.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::XOP::Include 3"
.TH XML::Compile::XOP::Include 3 "2011-06-20" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::XOP::Include \- Represents one XOP node.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # See also SYNOPSIS of XML::Compile::XOP
\&  my $xop       = XML::Compile::XOP\->new;
\&  my $xop_image = $xop\->bytes($binary_image);
\&  my $answer    = $call\->(image => $xop_image);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Represents one data-set which will be represented as seperate (binary)
object during transport.  This can only be used on data fields which
are base64Binary.
.PP
\&\s-1YOU\s0 \s-1SHOULD\s0 \s-1NOT\s0 instantiate this kind of objects directly, but use the
XML::Compile::XOP method to create them.
.PP
The object is overloaded to produce the contained data when a scalar is
required, for instance when you call functions like \*(L"length\*(R".  This means
that, hopefully, the end-user does not see much of a difference between
data which is transported inline or packaged seperately.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "XML::Compile::XOP::Include\->\fBfromMime\fR(\s-1OBJECT\s0)" 4
.IX Item "XML::Compile::XOP::Include->fromMime(OBJECT)"
Collect the data from a HTTP::Message object.
.IP "XML::Compile::XOP::Include\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "XML::Compile::XOP::Include->new(OPTIONS)"
You have to specify either a \f(CW\*(C`file\*(C'\fR or \f(CW\*(C`byte\*(C'\fR source.  Otherwise, the
constructor will return \f(CW\*(C`undef\*(C'\fR.
.Sp
.Vb 7
\& \-Option\-\-Default
\&  bytes   undef
\&  cid     <required>
\&  file    undef
\&  type    <required>
\&  xmime   <required>
\&  xop     <required>
.Ve
.RS 4
.IP "bytes => STRING|SCALAR" 2
.IX Item "bytes => STRING|SCALAR"
Take the data from a \s-1STRING\s0 of reference.
.IP "cid => \s-1STRING\s0" 2
.IX Item "cid => STRING"
The Content-ID of the binary attachment.
.IP "file => FILENAME|FILEHANDLE" 2
.IX Item "file => FILENAME|FILEHANDLE"
Take the data from the specified file.
.IP "type => \s-1MIMETYPE\s0" 2
.IX Item "type => MIMETYPE"
The MIME-Type of the data.
.IP "xmime => \s-1VERSION\s0" 2
.IX Item "xmime => VERSION"
.PD 0
.IP "xop => \s-1VERSION\s0" 2
.IX Item "xop => VERSION"
.RE
.RS 4
.RE
.PD
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBcid\fR" 4
.el .IP "\f(CW$obj\fR\->\fBcid\fR" 4
.IX Item "$obj->cid"
Returns the Content-ID.
.ie n .IP "$obj\->\fBcontent\fR([\s-1BYREF\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBcontent\fR([\s-1BYREF\s0])" 4
.IX Item "$obj->content([BYREF])"
Returns the content, when \s-1BYREF\s0 (boolean) is true, then the value is
returned by reference.
.SS "Processing"
.IX Subsection "Processing"
.ie n .IP "$obj\->\fBmimePart\fR([\s-1HEADERS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmimePart\fR([\s-1HEADERS\s0])" 4
.IX Item "$obj->mimePart([HEADERS])"
Produce the message part which contains a normal mime representation
of a binary file.  You may provide an initial \s-1HEADERS\s0 (HTTP::Headers)
object, or an \s-1ARRAY\s0 of headers to instantiate such an object.
.ie n .IP "$obj\->\fBwrite\fR(FILENAME|FILEHANDLE)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(FILENAME|FILEHANDLE)" 4
.IX Item "$obj->write(FILENAME|FILEHANDLE)"
Write the content to the specified \s-1FILE\s0.
.ie n .IP "$obj\->\fBxmlNode\fR(\s-1DOCUMENT\s0, \s-1PATH\s0, \s-1TAG\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBxmlNode\fR(\s-1DOCUMENT\s0, \s-1PATH\s0, \s-1TAG\s0)" 4
.IX Item "$obj->xmlNode(DOCUMENT, PATH, TAG)"
The \s-1DOCUMENT\s0 will be used to construct the node from.  The \s-1PATH\s0
is an indicator for the location of the node within the data
structure (used in error messages).  The \s-1TAG\s0 is the prefixed name
for the node to be created.
.Sp
Returned is an \s-1XML\s0 node to be included in the output tree.
.SH "OVERLOAD"
.IX Header "OVERLOAD"
.ie n .IP "overload: \fB"""" (stringification)\fR" 4
.el .IP "overload: \fB``'' (stringification)\fR" 4
.IX Item "overload: """" (stringification)"
This object stringifies to its binary content.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-SOAP distribution version 2.24,
built on June 20, 2011. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Other distributions in this suite:
XML::Compile,
XML::Compile::SOAP,
XML::Compile::SOAP12,
XML::Compile::SOAP::Daemon,
XML::Compile::SOAP::WSA,
XML::Compile::C14N,
XML::Compile::WSS,
XML::Compile::Tester,
XML::Compile::Cache,
XML::Compile::Dumper,
XML::Compile::RPC,
XML::Rewrite,
XML::eXistDB,
and
XML::LibXML::Simple.
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
