.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Audio::Cuefile::Parser 3"
.TH Audio::Cuefile::Parser 3 "2010-04-01" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Audio::Cuefile::Parser
.SH "VERSION"
.IX Header "VERSION"
Version 0.02
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Class to parse a cuefile and access the chewy, nougat centre. 
Returns Audio::Cuefile::Parser::Track objects.
.SH "USAGE"
.IX Header "USAGE"
use Audio::Cuefile::Parser;
.PP
my \f(CW$filename\fR = 'filename.cue';
.PP
my \f(CW$cue\fR = Audio::Cuefile::Parser\->new($filename);
.PP
my ($audio_file, \f(CW$cd_performer\fR, \f(CW$cd_title\fR) = 
  ($cue\->file, \f(CW$cue\fR\->performer, \f(CW$cue\fR\->title);
.PP
foreach my \f(CW$track\fR ($cue\->tracks) {
.PP
.Vb 2
\&  my ($position, $index, $performer, $title) =
\&    ($track\->position, $track\->index, $track\->performer, $track\->title);
\&
\&  print "$position $index $performer $title";
\&}
.Ve
.SH "CUEFILE METHODS"
.IX Header "CUEFILE METHODS"
.ie n .SS "$cue\->tracks"
.el .SS "\f(CW$cue\fP\->tracks"
.IX Subsection "$cue->tracks"
Returns a list of Audio::Cuefile::Parser::Track objects.
.ie n .SS "$cue\->file"
.el .SS "\f(CW$cue\fP\->file"
.IX Subsection "$cue->file"
Returns the filename associated with the \s-1FILE\s0 keyword from 
the .cue's headers (i.e. the audio file that the .cue file 
is describing).
.ie n .SS "$cue\->performer"
.el .SS "\f(CW$cue\fP\->performer"
.IX Subsection "$cue->performer"
The audio file's performer.
.ie n .SS "$cue\->title"
.el .SS "\f(CW$cue\fP\->title"
.IX Subsection "$cue->title"
The title of the audio file.
.SH "TRACK METHODS"
.IX Header "TRACK METHODS"
.ie n .SS "$track\->index"
.el .SS "\f(CW$track\fP\->index"
.IX Subsection "$track->index"
Timestamp that signifies the track's beginning.
.ie n .SS "$track\->performer"
.el .SS "\f(CW$track\fP\->performer"
.IX Subsection "$track->performer"
The track's performer.
.ie n .SS "$track\->position"
.el .SS "\f(CW$track\fP\->position"
.IX Subsection "$track->position"
The track's position in the audio file.
.ie n .SS "$track\->title"
.el .SS "\f(CW$track\fP\->title"
.IX Subsection "$track->title"
Track title.
.SH "AUTHOR"
.IX Header "AUTHOR"
Matt Koscica <matt.koscica@gmail.com>
.SH "BUGS"
.IX Header "BUGS"
Probably a few, the regexes are very simple.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-audio\-cuefile\-parser@rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Audio\-Cuefile\-Parser <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Audio-Cuefile-Parser>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005\-2010 Matt Koscica, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
