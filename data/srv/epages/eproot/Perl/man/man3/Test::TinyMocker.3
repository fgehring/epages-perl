.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::TinyMocker 3"
.TH Test::TinyMocker 3 "2010-09-08" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::TinyMocker \- a very simple tool to mock external modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Test::More;
\&    use Test::TinyMocker;
\&
\&    mock \*(AqSome::Module\*(Aq
\&        => method \*(Aqsome_method\*(Aq
\&        => should {
\&            return $mocked_value;
\&        };
\&
\&    # or
\&
\&    mock \*(AqSome::Module\*(Aq
\&        => methods [ \*(Aqthis_method\*(Aq, \*(Aqthat_method\*(Aq ]
\&        => should {
\&            return $mocked_value;
\&        };
\&
\&    # or 
\&
\&    mock \*(AqSome::Module::some_method\*(Aq
\&        => should {
\&            return $mocked_value;
\&        };
\&
\&    # Some::Module::some_method() will now always return $mocked_value;
\&
\&        # To restore the original method
\&        
\&        unmock \*(AqSome::Module::some_method\*(Aq;
\&
\&        #A\*^\ or
\&        
\&        unmock \*(AqSome::Module\*(Aq => method \*(Aqsome_method\*(Aq;
\&
\&    # or
\&
\&    unmock \*(AqSome::Module\*(Aq => methods [ \*(Aqthis_method\*(Aq, \*(Aqthat_method\*(Aq ];
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.ie n .SS "mock($module, $method_or_methods, $sub)"
.el .SS "mock($module, \f(CW$method_or_methods\fP, \f(CW$sub\fP)"
.IX Subsection "mock($module, $method_or_methods, $sub)"
This function allows you to overwrite the given method with an arbitrary code
block. This lets you simulate soem kind of behaviour for your tests.
.PP
Alternatively, this method can be passed only two arguments, the first one will
be the full path of the method (pcakge name + method name) and the second one
the coderef.
.PP
Syntactic sugar is provided (\f(CW\*(C`method\*(C'\fR, \f(CW\*(C`methods\*(C'\fR and \f(CW\*(C`should\*(C'\fR) in order to
let you write sweet mock statements:
.PP
.Vb 2
\&    # This:
\&    mock(\*(AqFoo::Bar\*(Aq, \*(Aqa_method\*(Aq, sub { return 42;});
\&
\&    # is the same as:
\&    mock \*(AqFoo::Bar\*(Aq => method \*(Aqa_method\*(Aq => should { return 42 };
\&
\&    # or:
\&    mock \*(AqFoo::Bar::a_method\*(Aq => should { return 42 };
\&
\&    # or also:
\&    mock(\*(AqFoo::Bar::a_method\*(Aq, sub { return 42;});
.Ve
.PP
Using multiple methods at the same time can be done with arrayrefs:
.PP
.Vb 2
\&    # This:
\&    mock(\*(AqFoo::Bar\*(Aq, [\*(Aqa_method\*(Aq, \*(Aqb_method\*(Aq], sub { 42 } );
\&
\&    # is the same as:
\&    mock \*(AqFoo::Bar\*(Aq => methods [\*(Aqa_method\*(Aq, \*(Aqb_method\*(Aq] => should { 42 };
.Ve
.ie n .SS "unmock($module, $method_or_methods)"
.el .SS "unmock($module, \f(CW$method_or_methods\fP)"
.IX Subsection "unmock($module, $method_or_methods)"
Syntactic sugar is provided (\f(CW\*(C`method\*(C'\fR and \f(CW\*(C`methods\*(C'\fR) in order to let you write
sweet unmock statements:
.PP
.Vb 2
\&    # This:
\&    unmock(\*(AqFoo::Bar\*(Aq, \*(Aqa_method\*(Aq);
\&
\&    # is the same as:
\&    unmock \*(AqFoo::Bar\*(Aq => method \*(Aqa_method\*(Aq;
.Ve
.PP
And using multiple methods at the same time:
.PP
.Vb 1
\&    unmock \*(AqFoo::Bar\*(Aq => methods [\*(Aqa_method\*(Aq, \*(Aqb_method\*(Aq];
.Ve
.SS "method"
.IX Subsection "method"
Syntactic sugar for \fImock()\fR
.SS "methods"
.IX Subsection "methods"
Syntactic sugar for \fImock()\fR
.SS "should"
.IX Subsection "should"
Syntactic sugar for \fImock()\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexis Sukrieh, \f(CW\*(C`<sukria at sukria.net>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-test\-tinymocker at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-TinyMocker <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-TinyMocker>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Test::TinyMocker
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test\-TinyMocker <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test-TinyMocker>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Test\-TinyMocker <http://annocpan.org/dist/Test-TinyMocker>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Test\-TinyMocker <http://cpanratings.perl.org/d/Test-TinyMocker>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Test\-TinyMocker/ <http://search.cpan.org/dist/Test-TinyMocker/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This module was inspired by Gugod's blog, after the article published about
mocking in Ruby and Perl: <http://gugod.org/2009/05/mocking.html>
.PP
This module was first part of the test tools provided by Dancer in its own t
directory (previously named \f(CW\*(C`t::lib::EasyMocker\*(C'\fR). A couple of developers asked
me if I could released this module as a real Test:: distribution on \s-1CPAN\s0, so
here it is.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2010 Alexis Sukrieh.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
