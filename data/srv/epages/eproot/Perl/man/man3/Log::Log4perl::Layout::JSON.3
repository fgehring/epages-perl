.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Layout::JSON 3"
.TH Layout::JSON 3 "2014-11-20" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Log4perl::Layout::JSON
.SH "VERSION"
.IX Header "VERSION"
version 0.002003
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Example configuration:
.PP
.Vb 7
\&    log4perl.appender.Example.layout = Log::Log4perl::Layout::JSON
\&    log4perl.appender.Example.layout.field.message = %m{chomp}
\&    log4perl.appender.Example.layout.field.category = %c
\&    log4perl.appender.Example.layout.field.class = %C
\&    log4perl.appender.Example.layout.field.file = %F{1}
\&    log4perl.appender.Example.layout.field.sub = %M{1}
\&    log4perl.appender.Example.layout.include_mdc = 1
.Ve
.PP
See below for more configuration options.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements a \f(CW\*(C`Log::Log4perl\*(C'\fR layout format, similar to
Log::Log4perl::Layout::PatternLayout except that the output is a \s-1JSON\s0 hash.
.PP
The \s-1JSON\s0 hash is \s-1ASCII\s0 encoded, with no newlines or other whitespace, and is
suitable for output, via Log::Log4perl appenders, to files and syslog etc.
.PP
Contextual data in the Log::Log4perl::MDC hash will be included if
\&\*(L"include_mdc\*(R" is true.
.SH "NAME"
Log::Log4perl::Layout::JSON \- Layout a log message as a JSON hash, including MDC data
.SH "LAYOUT CONFIGURATION"
.IX Header "LAYOUT CONFIGURATION"
.SS "field"
.IX Subsection "field"
Specify one or more fields to include in the \s-1JSON\s0 hash. The value is a string
containing one of more Log::Log4perl::Layout::PatternLayout placeholders.
For example:
.PP
.Vb 3
\&    log4perl.appender.Example.layout.field.message = %m{chomp}
\&    log4perl.appender.Example.layout.field.category = %c
\&    log4perl.appender.Example.layout.field.where = %F{1}:%L
.Ve
.PP
If no fields are specified, the default is \f(CW\*(C`message = %m{chomp}\*(C'\fR.
It is recommended that \f(CW\*(C`message\*(C'\fR be the first field.
.SS "prefix"
.IX Subsection "prefix"
Specify a prefix string for the \s-1JSON\s0. For example:
.PP
.Vb 1
\&    log4perl.appender.Example.layout.prefix = @cee:
.Ve
.PP
See http://blog.gerhards.net/2012/03/cee\-enhanced\-syslog\-defined.html
.SS "include_mdc"
.IX Subsection "include_mdc"
Include the data in the Log::Log4perl::MDC hash.
.PP
.Vb 1
\&    log4perl.appender.Example.layout.include_mdc = 1
.Ve
.PP
See also \*(L"name_for_mdc\*(R".
.SS "name_for_mdc"
.IX Subsection "name_for_mdc"
Use this name as the key in the \s-1JSON\s0 hash for the contents of \s-1MDC\s0 data
.PP
.Vb 1
\&    log4perl.appender.Example.layout.name_for_mdc = mdc
.Ve
.PP
If not set then \s-1MDC\s0 data is placed at top level of the hash.
.PP
Where \s-1MDC\s0 field names match the names of fields defined by the Log4perl
configuration then the \s-1MDC\s0 values take precedence. This is currently construde
as a feature.
.SS "canonical"
.IX Subsection "canonical"
If true then use canonical order for hash keys when encoding the \s-1JSON\s0.
.PP
.Vb 1
\&    log4perl.appender.Example.layout.canonical = 1
.Ve
.PP
This is mainly intended for testing.
.SS "max_json_length_kb"
.IX Subsection "max_json_length_kb"
Set the maximum \s-1JSON\s0 length in kilobytes. The default is 20KB.
.PP
.Vb 1
\&    log4perl.appender.Example.layout.max_json_length_kb = 3.8
.Ve
.PP
This is useful where some downstream system has a limit on the maximum size of
a message.
.PP
For example, rsyslog has a \f(CW\*(C`maxMessageSize\*(C'\fR configuration parameter with a
default of 4KB. Longer messages are simply truncated (which would corrupt the
\&\s-1JSON\s0). We use rsyslog with maxMessageSize set to 128KB.
.PP
If the \s-1JSON\s0 is larger than the specified size (not including \*(L"prefix\*(R")
then some action is performed to reduce the size of the \s-1JSON\s0.
.PP
Currently fields are simply removed until the \s-1JSON\s0 is within the size.
The \s-1MDC\s0 field/fields are removed first and then the fields specified in the
Log4perl config, in reverse order. A message is printed on \f(CW\*(C`STDERR\*(C'\fR for each
field removed.
.PP
In future this rather dumb logic will be replaced by something smarter.
.SS "\s-1EXAMPLE\s0 \s-1USING\s0 Log::Log4perl::MDC"
.IX Subsection "EXAMPLE USING Log::Log4perl::MDC"
.Vb 4
\&    local Log::Log4perl::MDC\->get_context\->{request} = {
\&        request_uri => $req\->request_uri,
\&        query_parameters => $req\->query_parameters
\&    };
\&
\&    # ...
\&
\&    for my $id (@list_of_ids) {
\&
\&        local Log::Log4perl::MDC\->get_context\->{id} = $id;
\&
\&        do_something_useful($id);
\&
\&    }
.Ve
.PP
Using code like that shown above, any log messages produced by
\&\fIdo_something_useful()\fR will automatically include the 'contextual data',
showing the request \s-1URI\s0, the hash of decoded query parameters, and the current
value of \f(CW$id\fR.
.PP
If there's a \f(CW$SIG{_\|_WARN_\|_}\fR handler setup to log warnings via \f(CW\*(C`Log::Log4perl\*(C'\fR
then any warnings from perl, such as uninitialized values, will also be logged
with this context data included.
.PP
The use of \f(CW\*(C`local\*(C'\fR ensures that contextual data doesn't stay in the \s-1MDC\s0
beyond the relevant scope. (For more complex cases you could use something like
Scope::Guard or simply take care to delete old data.)
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce <Tim.Bunce@pobox.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Tim Bunce.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
