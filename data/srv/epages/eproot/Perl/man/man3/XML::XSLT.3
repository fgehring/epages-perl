.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::XSLT 3"
.TH XML::XSLT 3 "2004-02-20" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::XSLT \- A perl module for processing XSLT
.IP "xsl_output_method" 4
.IX Item "xsl_output_method"
Get or set the <xsl:output method= attribute.  Valid arguments are 'html',
\&'text' and 'xml'
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use XML::XSLT;
\&
\& my $xslt = XML::XSLT\->new ($xsl, warnings => 1);
\&
\& $xslt\->transform ($xmlfile);
\& print $xslt\->toString;
\&
\& $xslt\->dispose();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the W3C's \s-1XSLT\s0 specification. The goal is full
implementation of this spec, but we have not yet achieved
that. However, it already works well.  See \*(L"\s-1XML::XSLT\s0 Commands\*(R" for
the current status of each command.
.PP
\&\s-1XML::XSLT\s0 makes use of \s-1XML::DOM\s0 and LWP::Simple, while \s-1XML::DOM\s0
uses XML::Parser.  Therefore XML::Parser, \s-1XML::DOM\s0 and LWP::Simple
have to be installed properly for \s-1XML::XSLT\s0 to run.
.SH "Specifying Sources"
.IX Header "Specifying Sources"
The stylesheets and the documents may be passed as filenames, file
handles regular strings, string references or DOM-trees.  Functions
that require sources (e.g. new), will accept either a named parameter
or simply the argument.
.PP
Either of the following are allowed:
.PP
.Vb 2
\& my $xslt = XML::XSLT\->new($xsl);
\& my $xslt = XML::XSLT\->new(Source => $xsl);
.Ve
.PP
In documentation, the named parameter `Source' is always shown, but it
is never required.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "new(Source => $xml [, %args])" 4
.el .IP "new(Source => \f(CW$xml\fR [, \f(CW%args\fR])" 4
.IX Item "new(Source => $xml [, %args])"
Returns a new \s-1XSLT\s0 parser object.  Valid flags are:
.RS 4
.IP "DOMparser_args" 2
.IX Item "DOMparser_args"
Hashref of arguments to pass to the XML::DOM::Parser object's parse
method.
.IP "variables" 2
.IX Item "variables"
Hashref of variables and their values for the stylesheet.
.IP "base" 2
.IX Item "base"
Base of \s-1URL\s0 for file inclusion.
.IP "debug" 2
.IX Item "debug"
Turn on debugging messages.
.IP "warnings" 2
.IX Item "warnings"
Turn on warning messages.
.IP "indent" 2
.IX Item "indent"
Starting amount of indention for debug messages.  Defaults to 0.
.IP "indent_incr" 2
.IX Item "indent_incr"
Amount to indent each level of debug message.  Defaults to 1.
.RE
.RS 4
.RE
.ie n .IP "open_xml(Source => $xml [, %args])" 4
.el .IP "open_xml(Source => \f(CW$xml\fR [, \f(CW%args\fR])" 4
.IX Item "open_xml(Source => $xml [, %args])"
Gives the \s-1XSLT\s0 object new \s-1XML\s0 to process.  Returns an \s-1XML::DOM\s0 object
corresponding to the \s-1XML\s0.
.RS 4
.IP "base" 4
.IX Item "base"
The base \s-1URL\s0 to use for opening documents.
.IP "parser_args" 4
.IX Item "parser_args"
Arguments to pase to the parser.
.RE
.RS 4
.RE
.ie n .IP "open_xsl(Source => $xml, [, %args])" 4
.el .IP "open_xsl(Source => \f(CW$xml\fR, [, \f(CW%args\fR])" 4
.IX Item "open_xsl(Source => $xml, [, %args])"
Gives the \s-1XSLT\s0 object a new stylesheet to use in processing \s-1XML\s0.
Returns an \s-1XML::DOM\s0 object corresponding to the stylesheet.  Any
arguments present are passed to the XML::DOM::Parser.
.RS 4
.IP "base" 4
.IX Item "base"
The base \s-1URL\s0 to use for opening documents.
.IP "parser_args" 4
.IX Item "parser_args"
Arguments to pase to the parser.
.RE
.RS 4
.RE
.IP "process(%variables)" 4
.IX Item "process(%variables)"
Processes the previously loaded \s-1XML\s0 through the stylesheet using the
variables set in the argument.
.ie n .IP "transform(Source => $xml [, %args])" 4
.el .IP "transform(Source => \f(CW$xml\fR [, \f(CW%args\fR])" 4
.IX Item "transform(Source => $xml [, %args])"
Processes the given \s-1XML\s0 through the stylesheet.  Returns an \s-1XML::DOM\s0
object corresponding to the transformed \s-1XML\s0.  Any arguments present
are passed to the XML::DOM::Parser.
.ie n .IP "serve(Source => $xml [, %args])" 4
.el .IP "serve(Source => \f(CW$xml\fR [, \f(CW%args\fR])" 4
.IX Item "serve(Source => $xml [, %args])"
Processes the given \s-1XML\s0 through the stylesheet.  Returns a string
containg the result.  Example:
.Sp
.Vb 1
\&  use XML::XSLT qw(serve);
\&
\&  $xslt = XML::XSLT\->new($xsl);
\&  print $xslt\->serve $xml;
.Ve
.RS 4
.IP "http_headers" 4
.IX Item "http_headers"
If true, then prepends the appropriate \s-1HTTP\s0 headers (e.g. Content-Type,
Content-Length);
.Sp
Defaults to true.
.IP "xml_declaration" 4
.IX Item "xml_declaration"
If true, then the result contains the appropriate <?xml?> header.
.Sp
Defaults to true.
.IP "xml_version" 4
.IX Item "xml_version"
The version of the \s-1XML\s0.
.Sp
Defaults to 1.0.
.IP "doctype" 4
.IX Item "doctype"
The type of \s-1DOCTYPE\s0 this document is.  Defaults to \s-1SYSTEM\s0.
.RE
.RS 4
.RE
.IP "toString" 4
.IX Item "toString"
Returns the result of transforming the \s-1XML\s0 with the stylesheet as a
string.
.IP "to_dom" 4
.IX Item "to_dom"
Returns the result of transforming the \s-1XML\s0 with the stylesheet as an
\&\s-1XML::DOM\s0 object.
.IP "media_type" 4
.IX Item "media_type"
Returns the media type (aka mime type) of the object.
.IP "dispose" 4
.IX Item "dispose"
Executes the \f(CW\*(C`dispose\*(C'\fR method on each \s-1XML::DOM\s0 object.
.SH "XML::XSLT Commands"
.IX Header "XML::XSLT Commands"
.IP "xsl:apply\-imports		no" 4
.IX Item "xsl:apply-imports		no"
Not supported yet.
.IP "xsl:apply\-templates		limited" 4
.IX Item "xsl:apply-templates		limited"
Attribute 'select' is supported to the same extent as xsl:value\-of
supports path selections.
.Sp
Not supported yet:
\&\- attribute 'mode'
\&\- xsl:sort and xsl:with\-param in content
.IP "xsl:attribute			partially" 4
.IX Item "xsl:attribute			partially"
Adds an attribute named to the value of the attribute 'name' and as value
the stringified content-template.
.Sp
Not supported yet:
\&\- attribute 'namespace'
.IP "xsl:attribute\-set		yes" 4
.IX Item "xsl:attribute-set		yes"
Partially
.IP "xsl:call\-template		yes" 4
.IX Item "xsl:call-template		yes"
Takes attribute 'name' which selects xsl:template's by name.
.Sp
Weak support:
\&\- xsl:with\-param (select attrib not supported)
.Sp
Not supported yet:
\&\- xsl:sort
.IP "xsl:choose			yes" 4
.IX Item "xsl:choose			yes"
Tests sequentially all xsl:whens until one succeeds or
until an xsl:otherwise is found. Limited test support, see xsl:when
.IP "xsl:comment			yes" 4
.IX Item "xsl:comment			yes"
Supported.
.IP "xsl:copy				partially" 4
.IX Item "xsl:copy				partially"
.PD 0
.IP "xsl:copy\-of			limited" 4
.IX Item "xsl:copy-of			limited"
.PD
Attribute 'select' functions as well as with
xsl:value\-of
.IP "xsl:decimal\-format		no" 4
.IX Item "xsl:decimal-format		no"
Not supported yet.
.IP "xsl:element			yes" 4
.IX Item "xsl:element			yes"
.PD 0
.IP "xsl:fallback			no" 4
.IX Item "xsl:fallback			no"
.PD
Not supported yet.
.IP "xsl:for\-each			limited" 4
.IX Item "xsl:for-each			limited"
Attribute 'select' functions as well as with
xsl:value\-of
.Sp
Not supported yet:
\&\- xsl:sort in content
.IP "xsl:if				limited" 4
.IX Item "xsl:if				limited"
Identical to xsl:when, but outside xsl:choose context.
.IP "xsl:import			no" 4
.IX Item "xsl:import			no"
Not supported yet.
.IP "xsl:include			yes" 4
.IX Item "xsl:include			yes"
Takes attribute href, which can be relative-local, 
absolute-local as well as an \s-1URL\s0 (preceded by
identifier http:).
.IP "xsl:key				no" 4
.IX Item "xsl:key				no"
Not supported yet.
.IP "xsl:message			no" 4
.IX Item "xsl:message			no"
Not supported yet.
.IP "xsl:namespace\-alias		no" 4
.IX Item "xsl:namespace-alias		no"
Not supported yet.
.IP "xsl:number			no" 4
.IX Item "xsl:number			no"
Not supported yet.
.IP "xsl:otherwise			yes" 4
.IX Item "xsl:otherwise			yes"
Supported.
.IP "xsl:output			limited" 4
.IX Item "xsl:output			limited"
Only the initial xsl:output element is used.  The \*(L"text\*(R" output method
is not supported, but shouldn't be difficult to implement.  Only the
\&\*(L"doctype-public\*(R", \*(L"doctype-system\*(R", \*(L"omit-xml-declaration\*(R", \*(L"method\*(R",
and \*(L"encoding\*(R" attributes have any support.
.IP "xsl:param			experimental" 4
.IX Item "xsl:param			experimental"
Synonym for xsl:variable (currently). See xsl:variable for support.
.IP "xsl:preserve\-space		no" 4
.IX Item "xsl:preserve-space		no"
Not supported yet. Whitespace is always preserved.
.IP "xsl:processing\-instruction	yes" 4
.IX Item "xsl:processing-instruction	yes"
Supported.
.IP "xsl:sort				no" 4
.IX Item "xsl:sort				no"
Not supported yet.
.IP "xsl:strip\-space			no" 4
.IX Item "xsl:strip-space			no"
Not supported yet. No whitespace is stripped.
.IP "xsl:stylesheet			limited" 4
.IX Item "xsl:stylesheet			limited"
Minor namespace support: other namespace than 'xsl:' for xsl-commands
is allowed if xmlns-attribute is present. xmlns \s-1URL\s0 is verified.
Other attributes are ignored.
.IP "xsl:template			limited" 4
.IX Item "xsl:template			limited"
Attribute 'name' and 'match' are supported to minor extend.
('name' must match exactly and 'match' must match with full
path or no path)
.Sp
Not supported yet:
\&\- attributes 'priority' and 'mode'
.IP "xsl:text				yes" 4
.IX Item "xsl:text				yes"
Supported.
.IP "xsl:transform			limited" 4
.IX Item "xsl:transform			limited"
Synonym for xsl:stylesheet
.IP "xsl:value\-of			limited" 4
.IX Item "xsl:value-of			limited"
Inserts attribute or element values. Limited support:
.Sp
<xsl:value\-of select=\*(L".\*(R"/>
.Sp
<xsl:value\-of select=\*(L"/root\-elem\*(R"/>
.Sp
<xsl:value\-of select=\*(L"elem\*(R"/>
.Sp
<xsl:value\-of select=\*(L"//elem\*(R"/>
.Sp
<xsl:value\-of select=\*(L"elem[n]\*(R"/>
.Sp
<xsl:value\-of select=\*(L"//elem[n]\*(R"/>
.Sp
<xsl:value\-of select=\*(L"@attr\*(R"/>
.Sp
<xsl:value\-of select=\*(L"\fItext()\fR\*(R"/>
.Sp
<xsl:value\-of select=\*(L"processing\-\fIinstruction()\fR\*(R"/>
.Sp
<xsl:value\-of select=\*(L"\fIcomment()\fR\*(R"/>
.Sp
and combinations of these.
.Sp
Not supported yet:
\&\- attribute 'disable\-output\-escaping'
.IP "xsl:variable			partial or from literal text in the stylesheet." 4
.IX Item "xsl:variable			partial or from literal text in the stylesheet."
.PD 0
.IP "xsl:when				limited" 4
.IX Item "xsl:when				limited"
.PD
Only inside xsl:choose. Limited test support:
.Sp
<xsl:when test=\*(L"@attr='value'\*(R">
.Sp
<xsl:when test=\*(L"elem='value'\*(R">
.Sp
<xsl:when test=\*(L"path/[@attr='value']\*(R">
.Sp
<xsl:when test=\*(L"path/[elem='value']\*(R">
.Sp
<xsl:when test=\*(L"path\*(R">
.Sp
path is supported to the same extend as with xsl:value\-of
.IP "xsl:with\-param			experimental" 4
.IX Item "xsl:with-param			experimental"
It is currently not functioning. (or is it?)
.SH "SUPPORT"
.IX Header "SUPPORT"
General information, bug reporting tools, the latest version, mailing
lists, etc. can be found at the \s-1XML::XSLT\s0 homepage:
.PP
.Vb 1
\&  http://xmlxslt.sourceforge.net/
.Ve
.SH "DEPRECATIONS"
.IX Header "DEPRECATIONS"
Methods and interfaces from previous versions that are not documented in this
version are deprecated.  Each of these deprecations can still be used
but will produce a warning when the deprecation is first used.  You
can use the old interfaces without warnings by passing \f(CW\*(C`new()\*(C'\fR the
flag \f(CW\*(C`use_deprecated\*(C'\fR.  Example:
.PP
.Vb 2
\& $parser = XML::XSLT\->new($xsl, "FILE",
\&                          use_deprecated => 1);
.Ve
.PP
The deprecated methods will disappear by the time a 1.0 release is made.
.PP
The deprecated methods are :
.IP "output_string" 2
.IX Item "output_string"
use toString instead
.IP "result_string" 2
.IX Item "result_string"
use toString instead
.IP "output" 2
.IX Item "output"
use toString instead
.IP "result" 2
.IX Item "result"
use toString instead
.IP "result_mime_type" 2
.IX Item "result_mime_type"
use media_type instead
.IP "output_mime_type" 2
.IX Item "output_mime_type"
use media_type instead
.IP "result_tree" 2
.IX Item "result_tree"
use to_dom instead
.IP "output_tree" 2
.IX Item "output_tree"
use to_dom instead
.IP "transform_document" 2
.IX Item "transform_document"
use transform instead
.IP "process_project" 2
.IX Item "process_project"
use process instead
.IP "open_project" 2
.IX Item "open_project"
use \f(CW\*(C`Source\*(C'\fR argument to \fB\f(BInew()\fB\fR and \fBtransform\fR instead.
.IP "print_output" 2
.IX Item "print_output"
use \fB\f(BIserve()\fB\fR instead.
.SH "BUGS"
.IX Header "BUGS"
Yes.
.SH "HISTORY"
.IX Header "HISTORY"
Geert Josten and Egon Willighagen developed and maintained \s-1XML::XSLT\s0
up to version 0.22.  At that point, Mark Hershberger started moving
the project to Sourceforge and began working on it with Bron Gondwana.
.SH "LICENCE"
.IX Header "LICENCE"
Copyright (c) 1999 Geert Josten & Egon Willighagen. All Rights
Reserverd.  This module is free software, and may be distributed under
the same terms and conditions as Perl.
.SH "AUTHORS"
.IX Header "AUTHORS"
Geert Josten <gjosten@sci.kun.nl>
.PP
Egon Willighagen <egonw@sci.kun.nl>
.PP
Mark A. Hershberger <mah@everybody.org>
.PP
Bron Gondwana <perlcode@brong.net>
.PP
Jonathan Stowe <jns@gellyfish.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1XML::DOM\s0, LWP::Simple, XML::Parser
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 880:" 4
.IX Item "Around line 880:"
\&'=item' outside of any '=over'
.IP "Around line 3581:" 4
.IX Item "Around line 3581:"
You forgot a '=back' before '=head1'
