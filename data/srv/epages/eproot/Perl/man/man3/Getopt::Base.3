.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Getopt::Base 3"
.TH Getopt::Base 3 "2011-04-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Getopt::Base \- foundation for oo GetOpt support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package Getopt::YAWTDI;
\&
\&  use base \*(AqGetopt::Base\*(Aq;
\&  ...
\&
\&  sub main {
\&    my $opt = Getopt::YAWTDI\->new(%setup)\->process(\e@args) or return;
\&
\&    my $foo = $opt\->foo;
\&    ...
\&  }
.Ve
.SH "ABOUT"
.IX Header "ABOUT"
This module provides a foundation on which to build numerous forms of
Getopt:: support, but does not supply any particular frontend.
.SH "ALPHA"
.IX Header "ALPHA"
This module is still growing.  Your help with documentation and \s-1API\s0
suggestions are welcome.
.SH "Features"
.IX Header "Features"
Modules built on this foundation will have the following features:
.IP "object-based output" 4
.IX Item "object-based output"
The \fIget()\fR method returns an object with accessors.  You may supply your
own object.
.IP "loadable modes" 4
.IX Item "loadable modes"
A program (such as svn, svk, git) with multiple modes may cleanly load
an additional set of options during \f(CW@args\fR processing.
.IP "long/short options, types, &c" 4
.IX Item "long/short options, types, &c"
Options are of the \-\-long\-form or the '\-s' (short form).  Short options
may be bundled (opterand must follow the bundle.)  Long options can be
give in one or two-word form (e.g. '\-\-opt=foo' or '\-\-opt foo'.)  Options
may be 'typed' as boolean/string/integer/float and and be of the single
or multi-element array/hash form.  All boolean-type options
automatically support the '\-\-no\-foo' negated form.
.IP "ordered callbacks" 4
.IX Item "ordered callbacks"
Items in \f(CW\*(C`actions\*(C'\fR will be triggered in as-defined order before any of
the items in \f(CW\*(C`options\*(C'\fR are processed.  This allows for e.g. loading
config files or printing help/version messages.
.IP "cleanly callable" 4
.IX Item "cleanly callable"
It should not be necessary for any callbacks to \fIexit()\fR.  If one of them
called \fIstop()\fR, then \fIget()\fR returns false and the caller should do the
same.  Errors will throw an error with \fIcroak()\fR.
.SH "Constructor"
.IX Header "Constructor"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $go = Getopt::Base\->new(%setup);
.Ve
.SS "_prepare"
.IX Subsection "_prepare"
.Vb 1
\&  $self\->_prepare(%params);
.Ve
.SH "Methods"
.IX Header "Methods"
.SS "process"
.IX Subsection "process"
Process the \f(CW@argv\fR, removing options and opterands in-place.
.PP
.Vb 1
\&  my $obj = $go\->process(\e@argv) or return;
.Ve
.PP
The storage object may also be passed explicitly.
.PP
.Vb 1
\&  $obj = $go\->process(\e@argv, object => $obj) or return;
.Ve
.SH "Controlling \fIprocess()\fP"
.IX Header "Controlling process()"
.SS "stop"
.IX Subsection "stop"
Stops the option processing when called from an action handler.  Always
returns false.
.PP
.Vb 1
\&  $go\->stop;
.Ve
.PP
This is used for some forms of two-stage processing, where an action or
argument indicates that all of the remaining inputs are to be handled
elsewhere.
.SS "quit"
.IX Subsection "quit"
Stops the option processing and prevents \fIprocess()\fR from returning an object .  Always returns false.
.PP
.Vb 1
\&  $go\->quit;
.Ve
.PP
This is used for options like \f(CW\*(C`\-\-version\*(C'\fR and \f(CW\*(C`\-\-help\*(C'\fR, where you have
a terminal action.
.SH "Handling Inputs"
.IX Header "Handling Inputs"
.SS "process_option"
.IX Subsection "process_option"
.Vb 1
\&  $self\->process_option($name, \e@argv);
.Ve
.SS "process_arg"
.IX Subsection "process_arg"
.Vb 1
\&  $self\->process_arg($arg);
.Ve
.SH "Setup"
.IX Header "Setup"
.SS "add_option"
.IX Subsection "add_option"
Add an option.
.PP
.Vb 1
\&  $go\->add_option(name => %settings);
.Ve
.SS "add_positionals"
.IX Subsection "add_positionals"
.Vb 1
\&  $go\->add_positionals(@list);
.Ve
.SS "add_aliases"
.IX Subsection "add_aliases"
.Vb 1
\&  $go\->add_aliases($canonical => \e@short, @list);
.Ve
.SS "store"
.IX Subsection "store"
.Vb 1
\&  $go\->store(key => $value, $value2, ...);
.Ve
.SS "_checker"
.IX Subsection "_checker"
Builds a check subref for the given \f(CW$name\fR.
.PP
.Vb 1
\&  my $subref = $self\->_checker($name);
.Ve
.SS "set_values"
.IX Subsection "set_values"
.Vb 1
\&  $go\->set_values(%hash);
.Ve
.SS "object"
.IX Subsection "object"
Default/current result-storage object.  Subclasses may wish to
override this.
.PP
.Vb 1
\&  my $obj = $go\->object;
.Ve
.SS "make_object"
.IX Subsection "make_object"
Constructs an empty (with defaults) data object from the set options.
.PP
.Vb 1
\&  my $obj = $self\->make_object;
.Ve
.SS "_find_option"
.IX Subsection "_find_option"
Fetches the option data for the canonical match (de-aliased) of \f(CW$opt\fR.
.PP
.Vb 1
\&  my $d = $self\->_find_option($opt);
.Ve
.SS "_unbundle"
.IX Subsection "_unbundle"
.Vb 1
\&  my @d = $self\->_unbundle($blah);
.Ve
.SH "Accessor Class"
.IX Header "Accessor Class"
This is the default object for holding results.  It will contain
accessors for all of the defined options.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $o = Getopt::Base::Accessors\->new($opt_data);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Wilhelm @ <ewilhelm at cpan dot org>
.PP
http://scratchcomputing.com/
.SH "BUGS"
.IX Header "BUGS"
If you found this module on \s-1CPAN\s0, please report any bugs or feature
requests through the web interface at <http://rt.cpan.org>.  I will be
notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.PP
If you pulled this development version from my /svn/, please contact me
directly.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009 Eric L. Wilhelm, All Rights Reserved.
.SH "NO WARRANTY"
.IX Header "NO WARRANTY"
Absolutely, positively \s-1NO\s0 \s-1WARRANTY\s0, neither express or implied, is
offered with this software.  You use this software at your own risk.  In
case of loss, no person or entity owes you anything whatsoever.  You
have been warned.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
