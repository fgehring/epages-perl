.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Font::TTF::Cmap 3"
.TH Font::TTF::Cmap 3 "2012-02-29" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::TTF::Cmap \- Character map table
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Looks after the character map. For ease of use, the actual cmap is held in
a hash against codepoint. Thus for a given table:
.PP
.Vb 1
\&    $gid = $font\->{\*(Aqcmap\*(Aq}{\*(AqTables\*(Aq}[0]{\*(Aqval\*(Aq}{$code};
.Ve
.PP
Note that \f(CW$code\fR should be a true value (0x1234) rather than a string representation.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
The instance variables listed here are not preceeded by a space due to their
emulating structural information in the font.
.IP "Num" 4
.IX Item "Num"
Number of subtables in this table
.IP "Tables" 4
.IX Item "Tables"
An array of subtables ([0..Num\-1])
.PP
Each subtables also has its own instance variables which are, again, not
preceeded by a space.
.IP "Platform" 4
.IX Item "Platform"
The platform number for this subtable
.IP "Encoding" 4
.IX Item "Encoding"
The encoding number for this subtable
.IP "Format" 4
.IX Item "Format"
Gives the stored format of this subtable
.IP "Ver" 4
.IX Item "Ver"
Gives the version (or language) information for this subtable
.IP "val" 4
.IX Item "val"
A hash keyed by the codepoint value (not a string) storing the glyph id
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$t\->read"
.el .SS "\f(CW$t\fP\->read"
.IX Subsection "$t->read"
Reads the cmap into memory. Format 4 subtables read the whole subtable and
fill in the segmented array accordingly.
.ie n .SS "$t\->ms_lookup($uni)"
.el .SS "\f(CW$t\fP\->ms_lookup($uni)"
.IX Subsection "$t->ms_lookup($uni)"
Finds a Unicode table, giving preference to the \s-1MS\s0 one, and looks up the given
Unicode codepoint in it to find the glyph id.
.ie n .SS "$t\->find_ms"
.el .SS "\f(CW$t\fP\->find_ms"
.IX Subsection "$t->find_ms"
Finds the a Unicode table, giving preference to the Microsoft one, and sets the \f(CW\*(C`mstable\*(C'\fR instance variable
to it if found. Returns the table it finds.
.ie n .SS "$t\->ms_enc"
.el .SS "\f(CW$t\fP\->ms_enc"
.IX Subsection "$t->ms_enc"
Returns the encoding of the microsoft table (0 => symbol, etc.). Returns undef if there is
no Microsoft cmap.
.ie n .SS "$t\->out($fh)"
.el .SS "\f(CW$t\fP\->out($fh)"
.IX Subsection "$t->out($fh)"
Writes out a cmap table to a filehandle. If it has not been read, then
just copies from input file to output
.ie n .SS "$t\->XML_element($context, $depth, $name, $val)"
.el .SS "\f(CW$t\fP\->XML_element($context, \f(CW$depth\fP, \f(CW$name\fP, \f(CW$val\fP)"
.IX Subsection "$t->XML_element($context, $depth, $name, $val)"
Outputs the elements of the cmap in \s-1XML\s0. We only need to process val here
.ie n .SS "@map = $t\->reverse(%opt)"
.el .SS "\f(CW@map\fP = \f(CW$t\fP\->reverse(%opt)"
.IX Subsection "@map = $t->reverse(%opt)"
Returns a reverse map of the Unicode cmap. I.e. given a glyph gives the Unicode value for it. Options are:
.IP "tnum" 4
.IX Item "tnum"
Table number to use rather than the default Unicode table
.IP "array" 4
.IX Item "array"
Returns each element of reverse as an array since a glyph may be mapped by more
than one Unicode value. The arrays are unsorted. Otherwise store any one unicode value for a glyph.
.SS "is_unicode($index)"
.IX Subsection "is_unicode($index)"
Returns whether the table of a given index is known to be a unicode table
(as specified in the specifications)
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
No support for format 2 tables (\s-1MBCS\s0)
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken Martin_Hosken@sil.org. See Font::TTF::Font for copyright and
licensing.
