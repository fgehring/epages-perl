.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Report::Win32Locale 3"
.TH Log::Report::Win32Locale 3 "2011-08-23" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Report::Win32Locale \- unix/windows locales
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Log::Report::Win32Locale
\&   is a Exporter
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Windows uses different locales to represent languages: codepages. Programs
which are written with Log::Report however, will contain \s-1ISO\s0 encoded
language names; this module translates between them.
.PP
The algorithms in this module are based on Win32::Locale and Win32::Codepage.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBcharset_encoding\fR" 4
.IX Item "charset_encoding"
Returns the encoding name (usable with module Encode) based on the current
codepage.  For example, \f(CW\*(C`cp1252\*(C'\fR for iso\-8859\-1 (latin\-1) or \f(CW\*(C`cp932\*(C'\fR for
Shift-JIS Japanese.  Returns undef if the encoding cannot be identified.
.IP "\fBcodepage_to_iso\fR(\s-1CODEPAGE\s0)" 4
.IX Item "codepage_to_iso(CODEPAGE)"
Translate windows \s-1CODEPAGE\s0 into \s-1ISO\s0 code.  The \s-1CODEPAGE\s0 is numeric
or a hex string like '0x0304'.
.IP "\fBiso_locale\fR([\s-1CODEPAGE\s0])" 4
.IX Item "iso_locale([CODEPAGE])"
Returns the \s-1ISO\s0 string for the Microsoft codepage locale.  Might return
\&\f(CW\*(C`undef\*(C'\fR/false.  By default, the actual codepage is used.
.IP "\fBiso_to_codepage\fR(\s-1ISO\s0)" 4
.IX Item "iso_to_codepage(ISO)"
Returns the numeric value of the codepage.  The \s-1ISO\s0 may look like
this: \f(CW\*(C`xx_YY\*(C'\fR.  Then, first the \f(CW\*(C`xx_YY\*(C'\fR is looked-up.  If that does
not exist, \f(CW\*(C`xx\*(C'\fR is tried.
.IP "\fBms_codepage_id\fR" 4
.IX Item "ms_codepage_id"
Returns the numeric language \s-1ID\s0 for the current codepage language.
For example, the numeric value for \f(CW0x0409\fR for \f(CW\*(C`en\-US\*(C'\fR, and \f(CW0x0411\fR
for \f(CW\*(C`ja\*(C'\fR.  Returns false if the codepage cannot be identified.
.IP "\fBms_install_codepage_id\fR" 4
.IX Item "ms_install_codepage_id"
Returns the numeric language \s-1ID\s0 for the installed codepage language.
This is like \fIms_codepage_id()\fR, but refers to the codepage that was
the default when Windows was first installed.
.IP "\fBms_locale\fR" 4
.IX Item "ms_locale"
Returns the locale setting from the control panel.
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 4
\&  # Only usable on Windows
\&  print codepage_to_iso(0x0413);   # nl\-NL
\&  print iso_to_codepage(\*(Aqnl_NL\*(Aq);  # 1043
\&  printf "%x", iso_to_codepage(\*(Aqnl_NL\*(Aq);  # 413
\&
\&  my $iso = iso_locale(ms_codepage_id());
\&  my $iso = iso_locale;  # same
\&
\&  print charset_encoding;          # cp1252
\&  print ms_codepage_id;            # 1043
\&  print ms_install_codepage_id;    # 1043
\&  print ms_locale;                 # Dutch (Netherlands)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Log-Report distribution version 0.94,
built on August 23, 2011. Website: \fIhttp://perl.overmeer.net/log\-report/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
