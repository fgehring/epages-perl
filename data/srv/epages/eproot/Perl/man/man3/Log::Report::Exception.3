.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Report::Exception 3"
.TH Log::Report::Exception 3 "2016-10-21" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Report::Exception \- a collected report
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # created within a try block
\& try { error "help!" };
\& my $exception = $@\->wasFatal;
\& $exception\->throw if $exception;
\&
\& $@\->reportFatal;  # combination of above two lines
\&
\& my $message = $exception\->message;   # the Log::Report::Message
\&
\& if($message\->inClass(\*(Aqdie\*(Aq)) ...
\& if($exception\->inClass(\*(Aqdie\*(Aq)) ...   # same
\& if($@\->wasFatal(class => \*(Aqdie\*(Aq)) ... # same
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In Log::Report, exceptions are not as extended as available in
languages as Java: you do not create classes for them.  The only
thing an exception object does, is capture some information about
an (untranslated) report.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Log::Report::Exception\->\fBnew\fR(%options)" 4
.IX Item "Log::Report::Exception->new(%options)"
.Vb 4
\& \-Option     \-\-Default
\&  message      <required>
\&  reason       <required>
\&  report_opts  {}
.Ve
.RS 4
.IP "message => Log::Report::Message" 2
.IX Item "message => Log::Report::Message"
.PD 0
.IP "reason => \s-1REASON\s0" 2
.IX Item "reason => REASON"
.IP "report_opts => \s-1HASH\s0" 2
.IX Item "report_opts => HASH"
.RE
.RS 4
.RE
.PD
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBisFatal\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisFatal\fR()" 4
.IX Item "$obj->isFatal()"
Returns whether this exception has a severity which makes it fatal
when thrown.  See \fILog::Report::Util::is_fatal()\fR.
.Sp
example:
.Sp
.Vb 2
\&  if($ex\->isFatal) { $ex\->throw(reason => \*(AqALERT\*(Aq) }
\&  else { $ex\->throw }
.Ve
.ie n .IP "$obj\->\fBmessage\fR( [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR( [$message] )" 4
.IX Item "$obj->message( [$message] )"
Change the \f(CW$message\fR of the exception, must be a Log::Report::Message
object.
.Sp
When you use a \f(CW\*(C`Log::Report::Message\*(C'\fR object, you will get a new one
returned. Therefore, if you want to modify the message in an exception,
you have to re-assign the result of the modification.
.Sp
example:
.Sp
.Vb 3
\& $e\->message\->concat(\*(Aq!!\*(Aq)); # will not work!
\& $e\->message($e\->message\->concat(\*(Aq!!\*(Aq));
\& $e\->message(_\|_x"some message {msg}", msg => $xyz);
.Ve
.ie n .IP "$obj\->\fBreason\fR( [$reason] )" 4
.el .IP "\f(CW$obj\fR\->\fBreason\fR( [$reason] )" 4
.IX Item "$obj->reason( [$reason] )"
.PD 0
.ie n .IP "$obj\->\fBreport_opts\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBreport_opts\fR()" 4
.IX Item "$obj->report_opts()"
.PD
.SS "Processing"
.IX Subsection "Processing"
.ie n .IP "$obj\->\fBinClass\fR($class|Regexp)" 4
.el .IP "\f(CW$obj\fR\->\fBinClass\fR($class|Regexp)" 4
.IX Item "$obj->inClass($class|Regexp)"
Check whether any of the classes listed in the message match \f(CW$class\fR
(string) or the Regexp.  This uses \fILog::Report::Message::inClass()\fR.
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
The default filehandle is \s-1STDOUT\s0.
.Sp
example:
.Sp
.Vb 2
\& print $exception;  # via overloading
\& $exception\->print; # OO style
.Ve
.ie n .IP "$obj\->\fBthrow\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBthrow\fR(%options)" 4
.IX Item "$obj->throw(%options)"
Insert the message contained in the exception into the currently
defined dispatchers.  The \f(CW\*(C`throw\*(C'\fR name is commonly known
exception related terminology for \f(CW\*(C`report\*(C'\fR.
.Sp
The \f(CW%options\fR overrule the captured options to \fILog::Report::report()\fR.
This can be used to overrule a destination.  Also, the reason can
be changed.
.Sp
example: overrule defaults to report
.Sp
.Vb 2
\& try { print {to => \*(Aqstderr\*(Aq}, ERROR => \*(Aqoops!\*(Aq };
\& $@\->reportFatal(to => \*(Aqsyslog\*(Aq);
\&
\& $exception\->throw(to => \*(Aqsyslog\*(Aq);
\&
\& $@\->wasFatal\->throw(reason => \*(AqWARNING\*(Aq);
.Ve
.ie n .IP "$obj\->\fBtoHTML\fR( [$locale] )" 4
.el .IP "\f(CW$obj\fR\->\fBtoHTML\fR( [$locale] )" 4
.IX Item "$obj->toHTML( [$locale] )"
[1.11] as \fItoString()\fR, and escape \s-1HTML\s0 volatile characters.
.ie n .IP "$obj\->\fBtoString\fR( [$locale] )" 4
.el .IP "\f(CW$obj\fR\->\fBtoString\fR( [$locale] )" 4
.IX Item "$obj->toString( [$locale] )"
Prints the reason and the message.  Differently from \fIthrow()\fR, this
only represents the textual content: it does not re-cast the exceptions to
higher levels.
.Sp
example: printing exceptions
.Sp
.Vb 2
\& print $_\->toString for $@\->exceptions;
\& print $_ for $@\->exceptions;   # via overloading
.Ve
.SH "OVERLOADING"
.IX Header "OVERLOADING"
.IP "overload: \fBstringification\fR" 4
.IX Item "overload: stringification"
Produces \*(L"reason: message\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Log-Report distribution version 1.18,
built on October 21, 2016. Website: \fIhttp://perl.overmeer.net/log\-report/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2016 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
