.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Identity 3"
.TH Config::Identity 3 "2016-11-20" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Identity \- Load (and optionally decrypt via GnuPG) user/pass identity information
.SH "VERSION"
.IX Header "VERSION"
version 0.0019
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1PAUSE:\s0
.PP
.Vb 1
\&    use Config::Identity::PAUSE;
\&
\&    # 1. Find either $HOME/.pause\-identity or $HOME/.pause
\&    # 2. Decrypt the found file (if necessary), read, and parse it
\&    # 3. Throw an exception unless  %identity has \*(Aquser\*(Aq and \*(Aqpassword\*(Aq defined
\&
\&    my %identity = Config::Identity::PAUSE\->load_check;
\&    print "user: $identity{user} password: $identity{password}\en";
.Ve
.PP
GitHub \s-1API:\s0
.PP
.Vb 1
\&    use Config::Identity::GitHub;
\&
\&    # 1. Find either $HOME/.github\-identity or $HOME/.github
\&    # 2. Decrypt the found file (if necessary) read, and parse it
\&    # 3. Throw an exception unless %identity has \*(Aqlogin\*(Aq and \*(Aqtoken\*(Aq defined
\&
\&    my %identity = Config::Identity::PAUSE\->load_check;
\&    print "login: $identity{login} token: $identity{token}\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Config::Identity is a tool for loading (and optionally decrypting via GnuPG) user/pass identity information
.PP
For GitHub \s-1API\s0 access, an identity is a \f(CW\*(C`login\*(C'\fR/\f(CW\*(C`token\*(C'\fR pair
.PP
For \s-1PAUSE\s0 access, an identity is a \f(CW\*(C`user\*(C'\fR/\f(CW\*(C`password\*(C'\fR pair
.SH "USAGE"
.IX Header "USAGE"
.ie n .SS "%identity = Config::Identity\->load_best( <stub> )"
.el .SS "\f(CW%identity\fP = Config::Identity\->load_best( <stub> )"
.IX Subsection "%identity = Config::Identity->load_best( <stub> )"
First attempt to load an identity from \f(CW$HOME\fR/.<stub>\-identity
.PP
If that file does not exist, then attempt to load an identity from \f(CW$HOME\fR/.<stub>
.PP
The file may be optionally GnuPG encrypted
.PP
\&\f(CW%identity\fR will be populated like so:
.PP
.Vb 1
\&    <key> <value>
.Ve
.PP
For example:
.PP
.Vb 2
\&    username alice
\&    password hunter2
.Ve
.PP
If an identity file can't be found or read, the method croaks.
.ie n .SS "%identity = Config::Identity\->load_check( <stub>, <checker> )"
.el .SS "\f(CW%identity\fP = Config::Identity\->load_check( <stub>, <checker> )"
.IX Subsection "%identity = Config::Identity->load_check( <stub>, <checker> )"
Works like \f(CW\*(C`load_best\*(C'\fR but also checks for required keys.  The \f(CW\*(C`checker\*(C'\fR
argument must be an array reference of \fBrequired\fR keys or a code reference
that takes a hashref of key/value pairs from the identity file and returns
a list of \fBmissing\fR keys.  For convenience, the hashref will also be
placed in \f(CW$_\fR.
.PP
If any keys are found missing, the method croaks.
.ie n .SH "Using a custom ""gpg"" or passing custom arguments"
.el .SH "Using a custom \f(CWgpg\fP or passing custom arguments"
.IX Header "Using a custom gpg or passing custom arguments"
You can specify a custom \f(CW\*(C`gpg\*(C'\fR executable by setting the \s-1CI_GPG\s0 environment variable
.PP
.Vb 1
\&    export CI_GPG="$HOME/bin/gpg"
.Ve
.PP
You can pass custom arguments by setting the \s-1CI_GPG_ARGUMENTS\s0 environment variable
.PP
.Vb 1
\&    export CI_GPG_ARGUMENTS="\-\-no\-secmem\-warning"
.Ve
.SH "Encrypting your identity information with GnuPG"
.IX Header "Encrypting your identity information with GnuPG"
If you've never used GnuPG before, first initialize it:
.PP
.Vb 2
\&    # Follow the prompts to create a new key for yourself
\&    gpg \-\-gen\-key
.Ve
.PP
To encrypt your GitHub identity with GnuPG using the above key:
.PP
.Vb 3
\&    # Follow the prompts, using the above key as the "recipient"
\&    # Use ^D once you\*(Aqve finished typing out your authentication information
\&    gpg \-ea > $HOME/.github
.Ve
.SH "Caching your GnuPG secret key via gpg-agent"
.IX Header "Caching your GnuPG secret key via gpg-agent"
Put the following in your .*rc
.PP
.Vb 12
\&    if which gpg\-agent 1>/dev/null
\&    then
\&        if test \-f $HOME/.gpg\-agent\-info && \e
\&            kill \-0 \`cut \-d: \-f 2 $HOME/.gpg\-agent\-info\` 2>/dev/null
\&        then
\&            . "${HOME}/.gpg\-agent\-info"
\&            export GPG_AGENT_INFO
\&        else
\&            eval \`gpg\-agent \-\-daemon \-\-write\-env\-file "${HOME}/.gpg\-agent\-info"\`
\&        fi
\&    else
\&    fi
.Ve
.SH "PAUSE identity format"
.IX Header "PAUSE identity format"
.Vb 2
\&    user <user>
\&    password <password>
.Ve
.PP
\&\f(CW\*(C`username\*(C'\fR can also be used as alias for \f(CW\*(C`user\*(C'\fR
.SH "GitHub identity format"
.IX Header "GitHub identity format"
.Vb 2
\&    login <login>
\&    token <token>
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at http://rt.cpan.org/Public/Dist/Display.html?Name=Config\-Identity <http://rt.cpan.org/Public/Dist/Display.html?Name=Config-Identity>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
https://github.com/dagolden/Config\-Identity <https://github.com/dagolden/Config-Identity>
.PP
.Vb 1
\&  git clone https://github.com/dagolden/Config\-Identity.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Krimen <robertkrimen@gmail.com>
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
David Golden <dagolden@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Robert Krimen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
