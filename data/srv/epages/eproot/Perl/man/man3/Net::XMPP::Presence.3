.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::XMPP::Presence 3"
.TH Net::XMPP::Presence 3 "2011-04-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::XMPP::Presence \- XMPP Presence Module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  Net::XMPP::Presence is a companion to the Net::XMPP module.
\&  It provides the user a simple interface to set and retrieve all
\&  parts of an XMPP Presence.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 5
\&  A Net::XMPP::Presence object is passed to the callback function for
\&  the message.  Also, the first argument to the callback functions is
\&  the session ID from XML::Streams.  There are some cases where you
\&  might want this information, like if you created a Client that
\&  connects to two servers at once, or for writing a mini server.
\&
\&    use Net::XMPP;
\&
\&    sub presence {
\&      my ($sid,$Pres) = @_;
\&      .
\&      .
\&      .
\&    }
\&
\&  You now have access to all of the retrieval functions available.
\&
\&  To create a new presence to send to the server:
\&
\&    use Net::XMPP;
\&
\&    $Pres = new Net::XMPP::Presence();
\&
\&  Now you can call the creation functions below to populate the tag
\&  before sending it.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Retrieval functions"
.IX Subsection "Retrieval functions"
.Vb 4
\&  GetTo()      \- returns the value in the to=\*(Aq\*(Aq attribute for the
\&  GetTo("jid")   <presence/>.  If you specify "jid" as an argument
\&                 then a Net::XMPP::JID object is returned and
\&                 you can easily parse the parts of the JID.
\&
\&                 $to    = $Pres\->GetTo();
\&                 $toJID = $Pres\->GetTo("jid");
\&
\&  GetFrom()      \- returns the value in the from=\*(Aq\*(Aq attribute for the
\&  GetFrom("jid")   <presence/>.  If you specify "jid" as an argument
\&                   then a Net::XMPP::JID object is returned and
\&                   you can easily parse the parts of the JID.
\&
\&                   $from    = $Pres\->GetFrom();
\&                   $fromJID = $Pres\->GetFrom("jid");
\&
\&  GetType() \- returns the type=\*(Aq\*(Aq attribute of the <presence/>.  Each
\&              presence is one of seven types:
\&
\&                available       available to receive messages; default
\&                unavailable     unavailable to receive anything
\&                subscribe       ask the recipient to subscribe you
\&                subscribed      tell the sender they are subscribed
\&                unsubscribe     ask the recipient to unsubscribe you
\&                unsubscribed    tell the sender they are unsubscribed
\&                probe           probe
\&
\&              $type = $Pres\->GetType();
\&
\&  GetStatus() \- returns a string with the current status of the resource.
\&
\&                $status = $Pres\->GetStatus();
\&
\&  GetPriority() \- returns an integer with the priority of the resource
\&                  The default is 0 if there is no priority in this
\&                  presence.
\&
\&                  $priority = $Pres\->GetPriority();
\&
\&  GetShow() \- returns a string with the state the client should show.
\&
\&              $show = $Pres\->GetShow();
.Ve
.SS "Creation functions"
.IX Subsection "Creation functions"
.Vb 9
\&  SetPresence(to=>string|JID     \- set multiple fields in the <presence/>
\&              from=>string|JID,    at one time.  This is a cumulative
\&              type=>string,        and over writing action.  If you set
\&              status=>string,      the "to" attribute twice, the second
\&              priority=>integer,   setting is what is used.  If you set
\&              meta=>string,        the status, and then set the priority
\&              icon=>string,        then both will be in the <presence/>
\&              show=>string,        tag.  For valid settings read the
\&              loc=>string)         specific Set functions below.
\&
\&                        $Pres\->SetPresence(TYPE=>"away",
\&                                           StatuS=>"Out for lunch");
\&
\&  SetTo(string) \- sets the to attribute.  You can either pass a string
\&  SetTo(JID)      or a JID object.  They must be valid JIDs or the
\&                  server will return an error message.
\&                  (ie.  bob@jabber.org/Silent Bob, etc...)
\&
\&                  $Pres\->SetTo("bob\e@jabber.org");
\&
\&  SetFrom(string) \- sets the from=\*(Aq\*(Aq attribute.  You can either pass
\&  SetFrom(JID)      a string or a JID object.  They must be valid JIDs
\&                    or the server will return an error message. (ie.
\&                    jabber:bob@jabber.org/Work)  This field is not
\&                    required if you are writing a Client since the
\&                    server will put the JID of your connection in there
\&                    to prevent spamming.
\&
\&                    $Pres\->SetFrom("jojo\e@jabber.org");
\&
\&  SetType(string) \- sets the type attribute.  Valid settings are:
\&
\&                    available      available to receive messages; default
\&                    unavailable    unavailable to receive anything
\&                    subscribe      ask the recipient to subscribe you
\&                    subscribed     tell the sender they are subscribed
\&                    unsubscribe    ask the recipient to unsubscribe you
\&                    unsubscribed   tell the sender they are unsubscribed
\&                    probe          probe
\&
\&                    $Pres\->SetType("unavailable");
\&
\&  SetStatus(string) \- sets the status tag to be whatever string the user
\&                      wants associated with that resource.
\&
\&                      $Pres\->SetStatus("Taking a nap");
\&
\&  SetPriority(integer) \- sets the priority of this resource.  The highest
\&                         resource attached to the xmpp account is the
\&                         one that receives the messages.
\&
\&                         $Pres\->SetPriority(10);
\&
\&  SetShow(string) \- sets the name of the icon or string to display for
\&                    this resource.
\&
\&                    $Pres\->SetShow("away");
\&
\&  Reply(hash) \- creates a new Presence object and populates the to/from
\&                fields.  If you specify a hash the same as with
\&                SetPresence then those values will override the Reply
\&                values.
\&
\&                $Reply = $Pres\->Reply();
\&                $Reply = $Pres\->Reply(type=>"subscribed");
.Ve
.SS "Removal functions"
.IX Subsection "Removal functions"
.Vb 1
\&  RemoveTo() \-  removes the to attribute from the <presence/>.
\&
\&                $Pres\->RemoveTo();
\&
\&  RemoveFrom() \-  removes the from attribute from the <presence/>.
\&
\&                  $Pres\->RemoveFrom();
\&
\&  RemoveType() \-  removes the type attribute from the <presence/>.
\&
\&                  $Pres\->RemoveType();
\&
\&  RemoveStatus() \-  removes the <status/> element from the <presence/>.
\&
\&                    $Pres\->RemoveStatus();
\&
\&  RemovePriority() \-  removes the <priority/> element from the
\&                      <presence/>.
\&
\&                      $Pres\->RemovePriority();
\&
\&  RemoveShow() \-  removes the <show/> element from the <presence/>.
\&
\&                  $Pres\->RemoveShow();
.Ve
.SS "Test functions"
.IX Subsection "Test functions"
.Vb 2
\&  DefinedTo() \- returns 1 if the to attribute is defined in the
\&                <presence/>, 0 otherwise.
\&
\&                $test = $Pres\->DefinedTo();
\&
\&  DefinedFrom() \- returns 1 if the from attribute is defined in the
\&                  <presence/>, 0 otherwise.
\&
\&                  $test = $Pres\->DefinedFrom();
\&
\&  DefinedType() \- returns 1 if the type attribute is defined in the
\&                  <presence/>, 0 otherwise.
\&
\&                   $test = $Pres\->DefinedType();
\&
\&  DefinedStatus() \- returns 1 if <status/> is defined in the
\&                    <presence/>, 0 otherwise.
\&
\&                    $test = $Pres\->DefinedStatus();
\&
\&  DefinedPriority() \- returns 1 if <priority/> is defined in the
\&                      <presence/>, 0 otherwise.
\&
\&                      $test = $Pres\->DefinedPriority();
\&
\&  DefinedShow() \- returns 1 if <show/> is defined in the <presence/>,
\&                  0 otherwise.
\&
\&                  $test = $Pres\->DefinedShow();
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ryan Eatmon
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is free software, you can redistribute it and/or modify it
under the \s-1LGPL\s0.
