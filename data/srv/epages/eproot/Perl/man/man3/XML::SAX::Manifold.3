.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::SAX::Manifold 3"
.TH XML::SAX::Manifold 3 "2009-06-11" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::SAX::Manifold \- Multipass processing of documents
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use XML::SAX::Machines qw( Manifold ) ;
\&
\&    my $m = Manifold(
\&        $channel0,
\&        $channel1,
\&        $channel2,
\&        {
\&            Handler => $h, ## optional
\&        }
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::SAX::Manifold is a \s-1SAX\s0 machine that allows \*(L"multipass\*(R" processing
of a document by sending the document through several channels of \s-1SAX\s0
processors one channel at a time.  A channel may be a single \s-1SAX\s0
processor or a pipeline (see XML::SAX::Pipeline).
.PP
The results of each channel are aggregated by a \s-1SAX\s0 filter that supports
the \f(CW\*(C`end_all\*(C'\fR event, \f(CW\*(C`XML::Filter::Merger\*(C'\fR by default.  See the
section on writing an aggregator and XML::Filter::Merger.
.PP
This differs from XML::Filter::SAXT in that the channels are
prioritized and each channel receives all events for a document before
the next channel receives any events.  XML::SAX::Manifold buffers all
events while feeding them to the highest priority channel
(\f(CW$processor1\fR in the synopsis), and replays them for each lower
priority channel one at a time.
.PP
The event flow for the example in the \s-1SYNOPSIS\s0 would look like the
following, with the numbers next to the connection arrow indicating when
the document's events flow along that arrow.
.PP
.Vb 10
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&   |         An XML::SAX::Manifold instance                 |
\&   |                                                        |
\&   |               +\-\-\-\-\-\-\-\-\-\-\-+                            |
\&   |            +\->| Channel_0 |\-+                          |
\&   |          1/   +\-\-\-\-\-\-\-\-\-\-\-+  \e1                        |
\&   |  Intake  /                    \e                        |
\& 1 |  +\-\-\-\-\-\-+ 2   +\-\-\-\-\-\-\-\-\-\-\-+  2 \e    +\-\-\-\-\-\-\-\-+ Exhaust |   
\& \-\-+\->| Dist |\-\-\-\->| Channel_1 |\-\-\-\-\-*\-\->| Merger |\-\-\-\-\-\-\-\-\-+\-\-> $h
\&   |  +\-\-\-\-\-\-+     +\-\-\-\-\-\-\-\-\-\-\-+    /    +\-\-\-\-\-\-\-\-+         |
\&   |          \e3                  3/                        |
\&   |           \e   +\-\-\-\-\-\-\-\-\-\-\-+  /                         |
\&   |            +\->| Channel_2 |\-+                          |
\&   |               +\-\-\-\-\-\-\-\-\-\-\-+                            |
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
Here's the timing of the event flows:
.PP
.Vb 3
\&   1: upstream \-> Dist. \-> Channel_0 \-> Merger \-> downstream
\&   2:             Dist. \-> Channel_1 \-> Merger \-> downstream
\&   3:             Dist. \-> Channel_2 \-> Merger \-> downstream
.Ve
.PP
When the document arrives from upstream, the events all arrive during
time period 1 and are buffered and also passed through Channel_0 and
Channel_0's output is sent to the Merger.  After all events have been
received (as indicated by an \f(CW\*(C`end_document\*(C'\fR event from upstream), all
events are then played back through Channel_1 and then through Channel_2
(which also output to the Merger).
.PP
It's the merger's job to assemble the three documents it receives in to
one document; see XML::Filter::Merger for details.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
.Vb 1
\&    my $d = XML::SAX::Manifold\->new( @channels, \e%options );
.Ve
.Sp
Longhand for calling the Manifold function exported by XML::SAX::Machines.
.SH "Writing an aggregator."
.IX Header "Writing an aggregator."
To be written.  Pretty much just that \f(CW\*(C`start_manifold_processing\*(C'\fR and
\&\f(CW\*(C`end_manifold_processing\*(C'\fR need to be provided.  See XML::Filter::Merger
and it's source code for a starter.
