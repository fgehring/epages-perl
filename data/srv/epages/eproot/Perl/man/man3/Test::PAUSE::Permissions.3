.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::PAUSE::Permissions 3"
.TH Test::PAUSE::Permissions 3 "2016-04-22" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::PAUSE::Permissions \- tests module permissions in your distribution
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # in your xt/perms.t
\&
\&    use Test::PAUSE::Permissions;
\&    
\&    all_permissions_ok();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is to test if modules in your distribution have proper
permissions or not. You need to set \s-1RELEASE_TESTING\s0 to test this.
.PP
If your distribution has modules/packages that should not be
indexed, you might want to generate \s-1META\s0 files before you run this
test to provide \f(CW\*(C`no_index\*(C'\fR information to Test::PAUSE::Permissions.
.PP
You might also want to prepare \f(CW\*(C`.pause\*(C'\fR file to show who is
releasing the distribution (you should have one to release
distributions anyway).
.SH "FUNCTION"
.IX Header "FUNCTION"
This module exports only one function (yet):
.SS "all_permissions_ok"
.IX Subsection "all_permissions_ok"
Looks for packages with Parse::LocalDistribution, and tests
if you have proper permissions for them by PAUSE::Permissions,
which downloads \f(CW\*(C`06perms.txt\*(C'\fR from \s-1CPAN\s0 before testing.
.PP
By default, \f(CW\*(C`all_permissions_ok\*(C'\fR looks into \f(CW\*(C`.pause\*(C'\fR file
to find who is releasing the distribution.
.PP
You can also pass the author as an argument, though this is only
useful when you generate this test every time you release a
distribution.
.PP
.Vb 1
\&    use Test::PAUSE::Permissions;
\&    
\&    # assumes ISHIGAKI is going to release the distribution
\&    all_permissions_ok(\*(AqISHIGAKI\*(Aq);
.Ve
.PP
\&\f(CW\*(C`all_permissions_ok\*(C'\fR also looks into \s-1META\s0 files for <x_authority>,
and each .pm file for \f(CW$AUTHORITY\fR variable, for your information.
.PP
You can pass an optional hash reference to \f(CW\*(C`all_permissions_ok()\*(C'\fR
to change its behavior.
.PP
\fIstrict mode\fR
.IX Subsection "strict mode"
.PP
.Vb 1
\&    all_permissions_ok({strict => 1});
.Ve
.PP
If this is set, \f(CW\*(C`all_permissions_ok\*(C'\fR would fail if the following
conditions should be met:
.ie n .IP "the distribution is maintained by more than one person (or two people if ""x_authority"" is set)." 4
.el .IP "the distribution is maintained by more than one person (or two people if \f(CWx_authority\fR is set)." 4
.IX Item "the distribution is maintained by more than one person (or two people if x_authority is set)."
.PD 0
.IP "the uploader has added a new indexable package." 4
.IX Item "the uploader has added a new indexable package."
.IP "and the distribution itself is not newly created." 4
.IX Item "and the distribution itself is not newly created."
.PD
.PP
In the case above, if the uploader uploads the distribution,
permission to the new package is only given to the uploader
(and the author specified in \f(CW\*(C`x_authority\*(C'\fR if applicable),
and other maintainers will not be able to upload the distribution
appropriately until they are given permission to the
new package. Strict mode is to prevent such an (accidental)
addtion so that everyone in a team can upload without a problem.
.PP
\fItest also modules with a developer version\fR
.IX Subsection "test also modules with a developer version"
.PP
.Vb 1
\&    all_permissions_ok({dev => 1});
.Ve
.PP
This module ignores modules that won't be indexed (namely those
that have a version number with an underscore in it) by default.
If you do want to test them, set \f(CW\*(C`dev\*(C'\fR to true.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
PAUSE::Permissions, App::PAUSE::CheckPerms
.SH "AUTHOR"
.IX Header "AUTHOR"
Kenichi Ishigaki, <ishigaki@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014 by Kenichi Ishigaki.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
