.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::XOP 3"
.TH XML::Compile::XOP 3 "2017-01-11" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::XOP \- MTOM and XOP handler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # by default, XML::Compile encodes binary data
\&  my $answer    = $call\->(image => $binary_image);
\&
\&  # to enable use of MTOM
\&  use XML::Compile::XOP;
\&  my $xop       = XML::Compile::XOP\->new;
\&  my $xop_image = $xop\->bytes($binary_image);
\&  my $answer    = $call\->(image => $xop_image);
\&
\&  # returned XOPs in SOAP
\&  my ($answer, $trace, $xop) = $wsdl\->call($operation)\->(%data);
\&  print $_\->string for @$xop;   # See XML::Compile::XOP::Include
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1SOAP\s0 Message Transmission Optimization Mechanism (\s-1MTOM\s0) is designed
for \s-1SOAP1\s0.2, but also usable for \s-1SOAP1\s0.1.  It optimizes the transport of
binary information (like images) which are part of the \s-1XML\s0 message: in
stead of base64 encoding them adding 25% to the size of the data, these
binaries are added as pure binary attachment to the \s-1SOAP\s0 message.
.PP
In the official specification, the \s-1XML\s0 message will be created first
with the base64 representation of the data in it. Only at transmission,
a preprocessor \s-1XOP\s0 (XML-binary Optimized Packaging) extracts those
components to be send separately.  In Perl, we have to be more careful
about performance.  Therefore, the path via encoding to base64 and then
decoding it back to binary in the sender (and the reverse process for
the receiver) is avoided.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBbytes\fR( <STRING|SCALAR>, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBbytes\fR( <STRING|SCALAR>, \f(CW%options\fR )" 4
.IX Item "$obj->bytes( <STRING|SCALAR>, %options )"
Create a XML::Compile::XOP::Include object which sources from a
\&\s-1STRING\s0 (representing bytes) or a \s-1SCALAR\s0 reference to such a string.
With the \f(CW%options\fR, you can overrule defaults generated for the \*(L"Include\*(R"
object.
.Sp
example: use of \fIbytes()\fR
.Sp
.Vb 2
\&  my $data = $xop\->bytes($string, type => \*(Aqtext/html\*(Aq);
\&  # $data is a XML::Compile::XOP::Include
.Ve
.ie n .IP "$obj\->\fBfile\fR( <$filename|$fh>, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBfile\fR( <$filename|$fh>, \f(CW%options\fR )" 4
.IX Item "$obj->file( <$filename|$fh>, %options )"
Create a XML::Compile::XOP::Include object which sources from a
\&\s-1FILE\s0 specified by \s-1NAME\s0 or \s-1HANDLE\s0.  With the \f(CW%options\fR, you can overrule
defaults generated for the \*(L"Include\*(R" object.
.Sp
example: use of \fIfile()\fR
.Sp
.Vb 2
\&  use MIME::Types;
\&  my $mimetypes = MIME::Types\->new;
\&
\&  my $type = $mimetypes\->mimeTypeOf($fn);
\&  my $data = $xop\->file($fn, type => $fn);
\&  # $data is a XML::Compile::XOP::Include
.Ve
.IP "XML::Compile::XOP\->\fBnew\fR(%options)" 4
.IX Item "XML::Compile::XOP->new(%options)"
.Vb 4
\& \-Option         \-\-Default
\&  hostname         \*(Aqlocalhost\*(Aq
\&  xmlmime_version  XMIME11
\&  xop_version      XOP10
.Ve
.RS 4
.IP "hostname => \s-1STRING\s0" 2
.IX Item "hostname => STRING"
This is used as part of generated Content-IDs, which have the form of
a email address.
.IP "xmlmime_version => \s-1URI\s0" 2
.IX Item "xmlmime_version => URI"
.PD 0
.IP "xop_version => \s-1URI\s0" 2
.IX Item "xop_version => URI"
.RE
.RS 4
.RE
.PD
.SH "DETAILS"
.IX Header "DETAILS"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\s-1MTOM\s0 \s-1SOAP1\s0.2: \fIhttp://www.w3.org/TR/soap12\-mtom/\fR" 4
.IX Item "MTOM SOAP1.2: http://www.w3.org/TR/soap12-mtom/"
.PD 0
.IP "\s-1MTOM\s0 \s-1SOAP1\s0.1: \fIhttp://schemas.xmlsoap.org/soap/mtom/SOAP11MTOM10.pdf\fR" 4
.IX Item "MTOM SOAP1.1: http://schemas.xmlsoap.org/soap/mtom/SOAP11MTOM10.pdf"
.IP "\s-1XOP:\s0 \fIhttp://www.w3.org/TR/xop10/\fR" 4
.IX Item "XOP: http://www.w3.org/TR/xop10/"
.IP "\s-1XMLMIME:\s0 \fIhttp://www.w3.org/TR/xml\-media\-types\fR" 4
.IX Item "XMLMIME: http://www.w3.org/TR/xml-media-types"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-SOAP distribution version 3.21,
built on January 11, 2017. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR .
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2017 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
