.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::NCopy 3"
.TH File::NCopy 3 "2007-11-26" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::NCopy \- Deprecated module. Use File::Copy::Recursive instead. Copy file, file. Copy file[s] | dir[s], dir
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use File::NCopy qw(copy);
\&
\&    copy "file","other_file";
\&    copy "file1","file2","file3","directory";
\&
\&    # we want to copy the directory recursively
\&    copy \e1,"directory1","directory2";
\&    copy \e1,"file1","file2","directory1","file3","directory2","file4",
\&        "directory";
\&
\&    # can also use references to file handles, this is for backward
\&    # compatibility with File::Copy
\&    copy \e*FILE1,\e*FILE2;
\&    copy \e*FILE1,"file";
\&    copy "file1",\e*FILE2;
\&
\&
\&    # we don\*(Aqt specify \e1 as the first argument because we don\*(Aqt want to
\&    # copy directories recursively
\&    copy "*.c","*.pl","programs";
\&    copy "*", "backup";
\&
\&    use File::NCopy;
\&
\&    # the below are the default config values
\&    $file = File::NCopy\->new(
\&            \*(Aqrecursive\*(Aq      => 0,
\&            \*(Aqpreserve\*(Aq       => 0,
\&            \*(Aqfollow_links\*(Aq   => 0,
\&            \*(Aqforce_write\*(Aq   => 0,
\&            \*(Aqset_permission\*(Aq => \e&File::NCopy::u_chmod,
\&            \*(Aqfile_check\*(Aq     => \e&File::NCopy::f_check,
\&            \*(Aqset_times\*(Aq      => \e&File::NCopy::s_times,
\&    );
\&
\&    set_permission will take two file names, the original to get the
\&    file permissions from and the new file to set the file permissions
\&    for.
\&
\&    file_check takes two parameters, the file names to check the file to
\&    copy from and the file to copy to. I am using flock for Unix
\&    systems.
\&    Default for this is \e&File::NCopy::f_check.  On Unix you can also use
\&    \e&File::NCopy::unix_check.  This one compares the inode and device
\&    numbers.
\&
\&    set_times is used if the preserve attribute is true.  It preserves
\&    the access and modification time of the file and also attempts to
\&    set the owner of the file to the original owner.  This can be useful
\&    in a script used by root, though enyone can preserve the access and
\&    modification times. This also takes two arguments.  The file to get
\&    the stats from and apply the stats to.
\&
\&    On Unix boxes you shouldn\*(Aqt need to worry.  On other system you may
\&    want to supply your own sub references.
\&
\&    $file = File::NCopy\->new(recursive => 1);
\&    $file\->copy "file","other_file";
\&    $file\->copy "directory1","directory2";
\&
\&    $file = File::NCopy\->new(u_chmod => \e&my_chmod,f_check => \e&my_fcheck);
\&    $file\->copy "directory1","directory2";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBFile::NCopy::copy\fR copies files to directories, or a single file to
another file.  You can also use a reference to a file handle if you wish
whem doing a file to file copy.  The functionality is very similar to
\&\fBcp\fR.  If the argument is a directory to directory copy and the
recursive flag is set then it is done recursively like \fBcp \-R\fR.
In fact it behaves like cp on Unix for the most part.
If called in array context, an array of successful copies is returned,
otherwise the number of succesful copies is returned.  If passed a file
handle, it's difficult to make sure the file we are copying isn't the
same that we are copying to, since by opening the file in write mode it
gets pooched.  To avoid this use file names instead, if at all possible,
especially for the to file.  If passed a file handle, it is not closed
when copy returns, files opened by copy are closed.
.IP "\fBcopy\fR" 4
.IX Item "copy"
Copies a file to another file.  Or a file to a directory.  Or multiple
files and directories to another directory.  Or a directory to another
directory.  Wildcard arguments are expanded, except for the last
argument which should not be expanded.  The file and directory
permissions are set to the orginating file's permissions and if preserve
is set the access and modification times are also set.  If preserve is
set then the uid and gid will also be attempted to be set, though this
may only for for the men in white hats.
In list context it returns all the names of the files/directories that
were successfully copied.  In scalar context it returns the number of
successful copies made.  A directory argument is considerd a single
successful copy if it manages to copy anything at all.  To make a
directory to directory copy the recursive flag must be set.
.IP "\fBcp\fR" 4
.IX Item "cp"
Just calls copy.  It's there to be compatible with File::Copy.
.IP "\fBnew\fR" 4
.IX Item "new"
If used then you can treat this as an object oriented module with some
configuration abilities.
.IP "\fBrecursive\fR" 4
.IX Item "recursive"
If used as an object then you can use this to set the recursive
attribute.  It can also be set when instantiating with new.  The other
attributes must all be set when instantiating the object.  If it isn't
specified then directories are not followed.
.IP "\fBpreserve\fR" 4
.IX Item "preserve"
Attempt to preserve the last modification and access time as well as
user and group id's.  This is a useful feature for sysadmins, though the
access and modification time should always be preservable, the uid and
gid may not.
.IP "\fBfollow_links\fR" 4
.IX Item "follow_links"
If the link is to a directory and this attribute is true then the
directory is followed and recursively copied.  Otherwise a link is made
to the root directory the link points to. eg.
.Sp
/sys/ is a link to /usr/src/sys/ is a link to /usr/src/i386/sys
then the link /sys/ is actually created in the source directory as a
link to /usr/src/i386/sys/ rather than /usr/src/sys/ since if the link
/usr/src/sys/ is removed then we lost the link even though the directory
we originally intended to link to still exists.
.IP "\fBforce_write\fR" 4
.IX Item "force_write"
Force the writing of a file even if the permissions are read only on it.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
See \s-1SYNOPSIS\s0.
.SH "BUGS"
.IX Header "BUGS"
When following links the target directory might not exactly the same as
the source directory.  The reason is that we have to make sure we don't
follow circular or dead links.  This is really a feature though the
result may not quite resemble the source dir, the overall content will
be the same. :)
.PP
From Ken Healy (Version 0.34)
.PP
On Win32, The use of backslash for paths is required.
.SH "AUTHOR"
.IX Header "AUTHOR"
Gabor Egressy \fBgabor \s-1AT\s0 vmunix.com\fR
.PP
Copyright (c) 1998 Gabor Egressy.  All rights reserved.  All wrongs
reversed.  This program is free software; you can redistribute and/or
modify it under the same terms as Perl itself.
.PP
Some ideas gleaned from File::Copy by Aaron Sherman & Charles Bailey,
but the code was written from scratch.
.PP
Patch at versions 0.33, and 0.34 added by \s-1MZSANFORD\s0.
.PP
0.35, 0.36 \- Alexandr Ciornii (alexchorny \s-1AT\s0 gmail.com)
