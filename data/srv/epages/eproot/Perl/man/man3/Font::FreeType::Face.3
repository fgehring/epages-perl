.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Font::FreeType::Face 3"
.TH Font::FreeType::Face 3 "2004-09-11" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::FreeType::Face \- font typefaces loaded from Font::FreeType
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Font::FreeType;
\&
\&    my $freetype = Font::FreeType\->new;
\&    my $face = $freetype\->face(\*(AqVera.ttf\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents a font face (or typeface) loaded from a font file.
Usually a face represents all the information in the font file (such as
a \s-1TTF\s0 file), although it is possible to have multiple faces in a single
file.
.PP
Never 'use' this module directly; the class is loaded automatically from
Font::FreeType.  Use the \f(CW\*(C`Font::FreeType\->face()\*(C'\fR
method to create a new Font::FreeType::Face object from a filename.
.SH "METHODS"
.IX Header "METHODS"
Unless otherwise stated, all methods will die if there is an error.
.IP "\fIascender()\fR" 4
.IX Item "ascender()"
The height above the baseline of the 'top' of the font's glyphs, scaled to
the current size of the face.
.IP "attach_file(\fIfilename\fR)" 4
.IX Item "attach_file(filename)"
Informs FreeType of an ancillary file needed for reading the font.
Hasn't been tested yet.
.IP "\fIcurrent_face_index()\fR" 4
.IX Item "current_face_index()"
The index number of the current font face.  Usually this will be
zero, which is the default.  See \f(CW\*(C`Font::FreeType\->face()\*(C'\fR for how
to load other faces from the same file.
.IP "\fIdescender()\fR" 4
.IX Item "descender()"
The depth below the baseline of the 'bottom' of the font's glyphs, scaled to
the current size of the face.  Actually represents the distance moving up
from the baseline, so usually negative.
.IP "\fIfamily_name()\fR" 4
.IX Item "family_name()"
A string containing the name of the family this font claims to be from.
.IP "\fIfixed_sizes()\fR" 4
.IX Item "fixed_sizes()"
In scalar context returns the number of fixed sizes (of embedded bitmaps)
available in the font.  In list context returns a list of hashes which
detail those sizes.  Each hash can contain the following keys, but they
will be absent if the information isn't available:
.RS 4
.IP "size" 4
.IX Item "size"
Size of the glyphs in points.  Only available with Freetype 2.1.5 or newer.
.IP "height" 4
.IX Item "height"
Height of the bitmaps in pixels.
.IP "width" 4
.IX Item "width"
Width of the bitmaps in pixels.
.IP "x_res_dpi, y_res_dpi" 4
.IX Item "x_res_dpi, y_res_dpi"
Resolution the bitmaps were designed for, in dots per inch.
Only available with Freetype 2.1.5 or newer.
.IP "x_res_ppem, y_res_ppem" 4
.IX Item "x_res_ppem, y_res_ppem"
Resolution the bitmaps were designed for, in pixels per em.
Only available with Freetype 2.1.5 or newer.
.RE
.RS 4
.RE
.IP "foreach_char(\fIcode-ref\fR)" 4
.IX Item "foreach_char(code-ref)"
Iterates through all the characters in the font, and calls \fIcode-ref\fR
for each of them in turn.  Glyphs which don't correspond to Unicode
characters are ignored.  There is currently no facility for iterating
over all glyphs.
.Sp
Each time your callback code is called, \f(CW$_\fR will be set to a
Font::FreeType::Glyph object for the current glyph.
For an example see the program \fIlist\-characters.pl\fR provided in the
distribution.
.IP "glyph_from_char(\fIcharacter\fR)" 4
.IX Item "glyph_from_char(character)"
Returns a Font::FreeType::Glyph object for the
glyph corresponding to the first character in the string provided.
Note that currently non-ASCII characters are not likely to work with
this, so you might be better using the \f(CW\*(C`glyph_from_char_code()\*(C'\fR
method below and the Perl \f(CW\*(C`ord\*(C'\fR function.
.Sp
Returns \fIundef\fR if the glyph is not available in the font.
.IP "glyph_from_char_code(\fIchar-code\fR)" 4
.IX Item "glyph_from_char_code(char-code)"
Returns a Font::FreeType::Glyph object for the
glyph corresponding to Unicode character \fIchar-code\fR.  FreeType supports
using other character sets, but this module doesn't yet.
.Sp
Returns \fIundef\fR if the glyph is not available in the font.
.IP "\fIhas_glyph_names()\fR" 4
.IX Item "has_glyph_names()"
True if individual glyphs have names.  If so, the names can be
retrieved with the \f(CW\*(C`name()\*(C'\fR method on
Font::FreeType::Glyph objects.
.Sp
See also \f(CW\*(C`has_reliable_glyph_names()\*(C'\fR below.
.IP "\fIhas_horizontal_metrics()\fR" 4
.IX Item "has_horizontal_metrics()"
.PD 0
.IP "\fIhas_vertical_metrics()\fR" 4
.IX Item "has_vertical_metrics()"
.PD
These return true if the font contains metrics for the corresponding
directional layout.  Most fonts will contain horizontal metrics, describing
(for example) how the characters should be spaced out across a page when
being written horizontally like English.  Some fonts, such as Chinese ones,
may contain vertical metrics as well, allowing typesetting down the page.
.IP "\fIhas_kerning()\fR" 4
.IX Item "has_kerning()"
True if the font provides kerning information.  See the \f(CW\*(C`kerning()\*(C'\fR
method below.
.IP "\fIhas_reliable_glyph_names()\fR" 4
.IX Item "has_reliable_glyph_names()"
True if the font contains reliable PostScript glyph names.  Some
Some fonts contain bad glyph names.  This method always returns false
when used with Freetype versions earlier than 2.1.1.
.Sp
See also \f(CW\*(C`has_glyph_names()\*(C'\fR above.
.IP "\fIheight()\fR" 4
.IX Item "height()"
The height of the text.  Not entirely sure what that corresponds
to (is it the line height or what?).
.IP "\fIis_bold()\fR" 4
.IX Item "is_bold()"
True if the font claims to be in a bold style.
.IP "\fIis_fixed_width()\fR" 4
.IX Item "is_fixed_width()"
True if all the characters in the font are the same width.
Will be true for monospaced fonts like Courier.
.IP "\fIis_italic()\fR" 4
.IX Item "is_italic()"
Returns true if the font claims to be in an italic style.
.IP "\fIis_scalable()\fR" 4
.IX Item "is_scalable()"
True if the font has a scalable outline, meaning it can be rendered
nicely at virtually any size.  Returns false for bitmap fonts.
.IP "\fIis_sfnt()\fR" 4
.IX Item "is_sfnt()"
True if the font file is in the 'sfnt' format, meaning it is
either TrueType or OpenType.  This isn't much use yet, but future versions
of this library might provide access to extra information about sfnt fonts.
.IP "kerning(\fIleft-glyph-index\fR, \fIright-glyph-index\fR, [\fImode\fR])" 4
.IX Item "kerning(left-glyph-index, right-glyph-index, [mode])"
Returns the suggested kerning adjustment between two glyphs.  When
called in scalar context returns a single value, which should be added
to the position of the second glyph on the \fIx\fR axis for horizontal
layouts, or the \fIy\fR axis for vertical layouts.
.Sp
Note: currently always returns the \fIx\fR axis kerning, but this will
be fixed when vertical layouts are handled properly.
.Sp
For example, assuming \f(CW$left\fR and \f(CW$right\fR are two
Font::FreeType::Glyph objects:
.Sp
.Vb 1
\&    my $kern_distance = $face\->kerning($left\->index, $right\->index);
.Ve
.Sp
In list context this returns two values corresponding to the \fIx\fR and
\&\fIy\fR axes, which should be treated in the same way.
.Sp
The \f(CW\*(C`mode\*(C'\fR argument controls how the kerning is calculated, with
the following options available:
.RS 4
.IP "\s-1FT_KERNING_DEFAULT\s0" 4
.IX Item "FT_KERNING_DEFAULT"
Grid-fitting (hinting) and scaling are done.  Use this
when rendering glyphs to bitmaps to make the kerning take the resolution
of the output in to account.
.IP "\s-1FT_KERNING_UNFITTED\s0" 4
.IX Item "FT_KERNING_UNFITTED"
Scaling is done, but not hinting.  Use this when extracting
the outlines of glyphs.  If you used the \f(CW\*(C`FT_LOAD_NO_HINTING\*(C'\fR option
when creating the face then use this when calculating the kerning.
.IP "\s-1FT_KERNING_UNSCALED\s0" 4
.IX Item "FT_KERNING_UNSCALED"
Leave the measurements in font units, without scaling, and without hinting.
.RE
.RS 4
.RE
.IP "\fInumber_of_faces()\fR" 4
.IX Item "number_of_faces()"
The number of faces contained in the file from which this one
was created.  Usually there is only one.  See \f(CW\*(C`Font::FreeType\->face()\*(C'\fR
for how to load the others if there are more.
.IP "\fInumber_of_glyphs()\fR" 4
.IX Item "number_of_glyphs()"
The number of glyphs in the font face.
.IP "\fIpostscript_name()\fR" 4
.IX Item "postscript_name()"
A string containing the PostScript name of the font, or \fIundef\fR
if it doesn't have one.
.IP "set_char_size(\fIwidth\fR, \fIheight\fR, \fIx_res\fR, \fIy_res\fR)" 4
.IX Item "set_char_size(width, height, x_res, y_res)"
Set the size at which glyphs should be rendered.  Metrics are also
scaled to match.  The width and height will usually be the same, and
are in points.  The resolution is in dots-per-inch.
.Sp
When generating PostScript outlines a resolution of 72 will scale
to PostScript points.
.IP "set_pixel_size(\fIwidth\fR, \fIheight\fR)" 4
.IX Item "set_pixel_size(width, height)"
Set the size at which bitmapped fonts will be loaded.  Bitmap fonts are
automatically set to the first available standard size, so this usually
isn't needed.
.IP "\fIstyle_name()\fR" 4
.IX Item "style_name()"
A string describing the style of the font, such as 'Roman' or
\&'Demi Bold'.  Most TrueType fonts are just 'Regular'.
.IP "\fIunderline_position()\fR" 4
.IX Item "underline_position()"
.PD 0
.IP "\fIunderline_thickness()\fR" 4
.IX Item "underline_thickness()"
.PD
The suggested position and thickness of underlining for the font,
or \fIundef\fR if the information isn't provided.  Currently in font units,
but this is likely to be changed in a future version.
.IP "\fIunits_per_em()\fR" 4
.IX Item "units_per_em()"
The size of the em square used by the font designer.  This can
be used to scale font-specific measurements to the right size, although
that's usually done for you by FreeType.  Usually this is 2048 for
TrueType fonts.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Font::FreeType,
Font::FreeType::Glyph
.SH "AUTHOR"
.IX Header "AUTHOR"
Geoff Richards <qef@laxan.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004, Geoff Richards.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
