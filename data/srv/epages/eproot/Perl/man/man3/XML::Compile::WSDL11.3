.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::WSDL11 3"
.TH XML::Compile::WSDL11 3 "2011-06-20" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::WSDL11 \- create SOAP messages defined by WSDL 1.1
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& XML::Compile::WSDL11
\&   is a XML::Compile::Cache
\&   is a XML::Compile::Schema
\&   is a XML::Compile
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # preparation
\& use XML::Compile::WSDL11;      # use WSDL version 1.1
\& use XML::Compile::SOAP11;      # use SOAP version 1.1
\& use XML::Compile::Transport::SOAPHTTP;
\&
\& my $wsdl = XML::Compile::WSDL11\->new($wsdlfile);
\& $wsdl\->addWSDL(...more WSDL files...);
\& $wsdl\->importDefinitions(...more schemas...);
\&
\& # during initiation, for each used call (slow)
\& my $call = $wsdl\->compileClient(\*(AqGetStockPrice\*(Aq, ...);
\&
\& # at "run\-time", call as often as you want (fast)
\& my $answer = $call\->(%request);
\&
\& # capture useful trace information
\& my ($answer, $trace) = $call\->(%request);
\&
\& # no need to administer the operations by hand: alternative
\& $wsdl\->compileCalls;  # at initiation
\& my $answer = $wsdl\->call(GetStockPrice => %request);
\&
\& # investigate the %request structure (server input)
\& print $wsdl\->explain(\*(AqGetStockPrice\*(Aq, PERL => \*(AqINPUT\*(Aq, recurse => 1);
\&
\& # investigate the $answer structure (server output)
\& print $wsdl\->explain(\*(AqGetStockPrice\*(Aq, PERL => \*(AqOUTPUT\*(Aq);
\&
\& # when you like, get all operation definitions
\& my @all_ops = $wsdl\->operations;
\&
\& # Install XML::Compile::SOAP::Daemon
\& my $server  = XML::Compile::SOAP::HTTPDaemon\->new;
\& $server\->operationsFromWSDL($wsdl);
\& undef $wsdl;    # not needed any further
\& 
\& # For debug info, start your script with:
\& use Log::Report mode => \*(AqDEBUG\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements \s-1WSDL\s0 version 1.1.
An \s-1WSDL\s0 file defines a set of messages to be send and received over
(\s-1SOAP\s0) connections.
.PP
As end-user, you do not have to worry about the complex details of the
messages and the way to exchange them: it's all simple Perl for you.
Also, faults are handled automatically.  The only complication you have
to worry about is to shape a nested \s-1HASH\s0 structure to the sending
message structure.  \fIXML::Compile::Schema::template()\fR may help you.
.PP
When the definitions are spread over multiple files you will need to
use \fIaddWSDL()\fR (wsdl) or \fIimportDefinitions()\fR (additional schema's)
explicitly. Usually, interreferences between those files are broken.
Often they reference over networks (you should never trust). So, on
purpose you \fBmust explicitly load\fR the files you need from local disk!
(of course, it is simple to find one-liners as work-arounds, but I will
to tell you how!)
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "XML::Compile::WSDL11\->\fBnew\fR(\s-1XML\s0, \s-1OPTIONS\s0)" 4
.IX Item "XML::Compile::WSDL11->new(XML, OPTIONS)"
The \s-1XML\s0 is the \s-1WSDL\s0 file, which is anything accepted by
\&\fIXML::Compile::dataToXML()\fR.
.Sp
.Vb 10
\& \-Option            \-\-Defined in     \-\-Default
\&  allow_undeclared    XML::Compile::Cache  <false>
\&  any_element         XML::Compile::Cache  \*(AqSKIP_ALL\*(Aq
\&  block_namespace     XML::Compile::Schema  []
\&  hook                XML::Compile::Schema  undef
\&  hooks               XML::Compile::Schema  []
\&  ignore_unused_tags  XML::Compile::Schema  <false>
\&  key_rewrite         XML::Compile::Schema  []
\&  opts_readers        XML::Compile::Cache  []
\&  opts_rw             XML::Compile::Cache  []
\&  opts_writers        XML::Compile::Cache  []
\&  parser_options      XML::Compile     <many>
\&  prefixes            XML::Compile::Cache  <smart>
\&  schema_dirs         XML::Compile     undef
\&  typemap             XML::Compile::Cache  {}
\&  xsi_type            XML::Compile::Cache  {}
.Ve
.RS 4
.IP "allow_undeclared => \s-1BOOLEAN\s0" 2
.IX Item "allow_undeclared => BOOLEAN"
.PD 0
.IP "any_element => CODE|'\s-1TAKE_ALL\s0'|'\s-1SKIP_ALL\s0'|'\s-1ATTEMPT\s0'|'\s-1SLOPPY\s0'" 2
.IX Item "any_element => CODE|'TAKE_ALL'|'SKIP_ALL'|'ATTEMPT'|'SLOPPY'"
.IP "block_namespace => NAMESPACE|TYPE|HASH|CODE|ARRAY" 2
.IX Item "block_namespace => NAMESPACE|TYPE|HASH|CODE|ARRAY"
.IP "hook => ARRAY-WITH-HOOKDATA | \s-1HOOK\s0" 2
.IX Item "hook => ARRAY-WITH-HOOKDATA | HOOK"
.IP "hooks => ARRAY-OF-HOOK" 2
.IX Item "hooks => ARRAY-OF-HOOK"
.IP "ignore_unused_tags => BOOLEAN|REGEXP" 2
.IX Item "ignore_unused_tags => BOOLEAN|REGEXP"
.IP "key_rewrite => HASH|CODE|ARRAY\-of\-HASH\-and\-CODE" 2
.IX Item "key_rewrite => HASH|CODE|ARRAY-of-HASH-and-CODE"
.IP "opts_readers => HASH|ARRAY\-of\-PAIRS" 2
.IX Item "opts_readers => HASH|ARRAY-of-PAIRS"
.IP "opts_rw => HASH|ARRAY\-of\-PAIRS" 2
.IX Item "opts_rw => HASH|ARRAY-of-PAIRS"
.IP "opts_writers => HASH|ARRAY\-of\-PAIRS" 2
.IX Item "opts_writers => HASH|ARRAY-of-PAIRS"
.IP "parser_options => HASH|ARRAY" 2
.IX Item "parser_options => HASH|ARRAY"
.IP "prefixes => HASH|ARRAY\-of\-PAIRS" 2
.IX Item "prefixes => HASH|ARRAY-of-PAIRS"
.IP "schema_dirs => DIRECTORY|ARRAY\-OF\-DIRECTORIES" 2
.IX Item "schema_dirs => DIRECTORY|ARRAY-OF-DIRECTORIES"
.IP "typemap => HASH|ARRAY" 2
.IX Item "typemap => HASH|ARRAY"
.IP "xsi_type => HASH|ARRAY" 2
.IX Item "xsi_type => HASH|ARRAY"
.RE
.RS 4
.RE
.PD
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBaddCompileOptions\fR(['\s-1READERS\s0'|'\s-1WRITERS\s0'|'\s-1RW\s0'], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddCompileOptions\fR(['\s-1READERS\s0'|'\s-1WRITERS\s0'|'\s-1RW\s0'], \s-1OPTIONS\s0)" 4
.IX Item "$obj->addCompileOptions(['READERS'|'WRITERS'|'RW'], OPTIONS)"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBaddHook\fR(HOOKDATA|HOOK|undef)" 4
.el .IP "\f(CW$obj\fR\->\fBaddHook\fR(HOOKDATA|HOOK|undef)" 4
.IX Item "$obj->addHook(HOOKDATA|HOOK|undef)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddHooks\fR(\s-1HOOK\s0, [\s-1HOOK\s0, ...])" 4
.el .IP "\f(CW$obj\fR\->\fBaddHooks\fR(\s-1HOOK\s0, [\s-1HOOK\s0, ...])" 4
.IX Item "$obj->addHooks(HOOK, [HOOK, ...])"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddKeyRewrite\fR(PREDEF|CODE|HASH, ...)" 4
.el .IP "\f(CW$obj\fR\->\fBaddKeyRewrite\fR(PREDEF|CODE|HASH, ...)" 4
.IX Item "$obj->addKeyRewrite(PREDEF|CODE|HASH, ...)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddSchemaDirs\fR(DIRECTORIES|FILENAME)" 4
.el .IP "\f(CW$obj\fR\->\fBaddSchemaDirs\fR(DIRECTORIES|FILENAME)" 4
.IX Item "$obj->addSchemaDirs(DIRECTORIES|FILENAME)"
.PD 0
.IP "XML::Compile::WSDL11\->\fBaddSchemaDirs\fR(DIRECTORIES|FILENAME)" 4
.IX Item "XML::Compile::WSDL11->addSchemaDirs(DIRECTORIES|FILENAME)"
.PD
See \*(L"Accessors\*(R" in XML::Compile
.ie n .IP "$obj\->\fBaddSchemas\fR(\s-1XML\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddSchemas\fR(\s-1XML\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->addSchemas(XML, OPTIONS)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddTypemap\fR(\s-1PAIR\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddTypemap\fR(\s-1PAIR\s0)" 4
.IX Item "$obj->addTypemap(PAIR)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddTypemaps\fR(\s-1PAIRS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddTypemaps\fR(\s-1PAIRS\s0)" 4
.IX Item "$obj->addTypemaps(PAIRS)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBallowUndeclared\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBallowUndeclared\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->allowUndeclared([BOOLEAN])"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBanyElement\fR('\s-1ATTEMPT\s0'|'\s-1SLOPPY\s0'|'\s-1SKIP_ALL\s0'|'\s-1TAKE_ALL\s0'|CODE)" 4
.el .IP "\f(CW$obj\fR\->\fBanyElement\fR('\s-1ATTEMPT\s0'|'\s-1SLOPPY\s0'|'\s-1SKIP_ALL\s0'|'\s-1TAKE_ALL\s0'|CODE)" 4
.IX Item "$obj->anyElement('ATTEMPT'|'SLOPPY'|'SKIP_ALL'|'TAKE_ALL'|CODE)"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBblockNamespace\fR(NAMESPACE|TYPE|HASH|CODE|ARRAY)" 4
.el .IP "\f(CW$obj\fR\->\fBblockNamespace\fR(NAMESPACE|TYPE|HASH|CODE|ARRAY)" 4
.IX Item "$obj->blockNamespace(NAMESPACE|TYPE|HASH|CODE|ARRAY)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBhooks\fR" 4
.el .IP "\f(CW$obj\fR\->\fBhooks\fR" 4
.IX Item "$obj->hooks"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBprefix\fR(\s-1PREFIX\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprefix\fR(\s-1PREFIX\s0)" 4
.IX Item "$obj->prefix(PREFIX)"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBprefixFor\fR(\s-1URI\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprefixFor\fR(\s-1URI\s0)" 4
.IX Item "$obj->prefixFor(URI)"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBprefixed\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprefixed\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->prefixed(TYPE)"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBprefixes\fR([PAIRS|ARRAY|HASH])" 4
.el .IP "\f(CW$obj\fR\->\fBprefixes\fR([PAIRS|ARRAY|HASH])" 4
.IX Item "$obj->prefixes([PAIRS|ARRAY|HASH])"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBtypemap\fR([HASH|ARRAY|PAIRS])" 4
.el .IP "\f(CW$obj\fR\->\fBtypemap\fR([HASH|ARRAY|PAIRS])" 4
.IX Item "$obj->typemap([HASH|ARRAY|PAIRS])"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBuseSchema\fR(\s-1SCHEMA\s0, [\s-1SCHEMA\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBuseSchema\fR(\s-1SCHEMA\s0, [\s-1SCHEMA\s0])" 4
.IX Item "$obj->useSchema(SCHEMA, [SCHEMA])"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBxsiType\fR([HASH|ARRAY|LIST])" 4
.el .IP "\f(CW$obj\fR\->\fBxsiType\fR([HASH|ARRAY|LIST])" 4
.IX Item "$obj->xsiType([HASH|ARRAY|LIST])"
See \*(L"Accessors\*(R" in XML::Compile::Cache
.SS "Compilers"
.IX Subsection "Compilers"
.ie n .IP "$obj\->\fBcall\fR(\s-1OPERATION\s0, \s-1DATA\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcall\fR(\s-1OPERATION\s0, \s-1DATA\s0)" 4
.IX Item "$obj->call(OPERATION, DATA)"
[2.20] Call the \s-1OPERATION\s0 (by name) with \s-1DATA\s0 (\s-1HASH\s0 or \s-1LIST\s0 of parameters).
This only works when you have called \fIcompileCalls()\fR beforehand,
always during the initiation phase of the program.
.Sp
example:
.Sp
.Vb 2
\&   # at initiation time (compile once)
\&   $wsdl\->compileCalls;
\&
\&   # at runtime (run often)
\&   my $answer = $wsdl\->call($operation, $request);
.Ve
.ie n .IP "$obj\->\fBcompile\fR(('\s-1READER\s0'|'\s-1WRITER\s0'), \s-1TYPE\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompile\fR(('\s-1READER\s0'|'\s-1WRITER\s0'), \s-1TYPE\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->compile(('READER'|'WRITER'), TYPE, OPTIONS)"
See \*(L"Compilers\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBcompileAll\fR(['\s-1READERS\s0'|'\s-1WRITERS\s0'|'\s-1RW\s0'|'\s-1CALLS\s0', [\s-1NAMESPACE\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBcompileAll\fR(['\s-1READERS\s0'|'\s-1WRITERS\s0'|'\s-1RW\s0'|'\s-1CALLS\s0', [\s-1NAMESPACE\s0]])" 4
.IX Item "$obj->compileAll(['READERS'|'WRITERS'|'RW'|'CALLS', [NAMESPACE]])"
[2.20] With explicit \f(CW\*(C`CALLS\*(C'\fR or without any parameter, it will call
\&\fIcompileCalls()\fR. Otherwise, see \fIXML::Compile::Cache::compileAll()\fR.
.ie n .IP "$obj\->\fBcompileCalls\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileCalls\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->compileCalls(OPTIONS)"
[2.20] Compile a handler for each of the available operations. The \s-1OPTIONS\s0 are
passed to each call of \fIcompileClient()\fR, but will be overruled by more
specific declared options.
.Sp
Additionally, \s-1OPTIONS\s0 can contain \f(CW\*(C`service\*(C'\fR, \f(CW\*(C`port\*(C'\fR, and \f(CW\*(C`binding\*(C'\fR
to limit the set of involved calls. See \fIoperations()\fR for details on
these options.
.Sp
You may declare additional specific compilation options with the
\&\fIdeclare()\fR method.
.Sp
example:
.Sp
.Vb 3
\&   my $trans = XML::Compile::Transport::SOAPHTTP
\&     \->new(timeout => 500, address => $wsdl\->endPoint);
\&   $wsdl\->compileCalls(transport => $trans);
\&
\&   # alternatives for simple cases
\&   $wsdl\->compileAll(\*(AqCALLS\*(Aq);
\&   $wsdl\->compileAll;
\&   
\&   my $answer = $wsdl\->call($myop, $request);
.Ve
.ie n .IP "$obj\->\fBdataToXML\fR(NODE|REF\-XML\-STRING|XML\-STRING|FILENAME|FILEHANDLE|KNOWN)" 4
.el .IP "\f(CW$obj\fR\->\fBdataToXML\fR(NODE|REF\-XML\-STRING|XML\-STRING|FILENAME|FILEHANDLE|KNOWN)" 4
.IX Item "$obj->dataToXML(NODE|REF-XML-STRING|XML-STRING|FILENAME|FILEHANDLE|KNOWN)"
.PD 0
.IP "XML::Compile::WSDL11\->\fBdataToXML\fR(NODE|REF\-XML\-STRING|XML\-STRING|FILENAME|FILEHANDLE|KNOWN)" 4
.IX Item "XML::Compile::WSDL11->dataToXML(NODE|REF-XML-STRING|XML-STRING|FILENAME|FILEHANDLE|KNOWN)"
.PD
See \*(L"Compilers\*(R" in XML::Compile
.ie n .IP "$obj\->\fBinitParser\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBinitParser\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->initParser(OPTIONS)"
.PD 0
.IP "XML::Compile::WSDL11\->\fBinitParser\fR(\s-1OPTIONS\s0)" 4
.IX Item "XML::Compile::WSDL11->initParser(OPTIONS)"
.PD
See \*(L"Compilers\*(R" in XML::Compile
.ie n .IP "$obj\->\fBreader\fR(TYPE|NAME, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreader\fR(TYPE|NAME, \s-1OPTIONS\s0)" 4
.IX Item "$obj->reader(TYPE|NAME, OPTIONS)"
See \*(L"Compilers\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBtemplate\fR('\s-1XML\s0'|'\s-1PERL\s0', \s-1ELEMENT\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtemplate\fR('\s-1XML\s0'|'\s-1PERL\s0', \s-1ELEMENT\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->template('XML'|'PERL', ELEMENT, OPTIONS)"
See \*(L"Compilers\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBwriter\fR(TYPE|NAME)" 4
.el .IP "\f(CW$obj\fR\->\fBwriter\fR(TYPE|NAME)" 4
.IX Item "$obj->writer(TYPE|NAME)"
See \*(L"Compilers\*(R" in XML::Compile::Cache
.SS "Extension"
.IX Subsection "Extension"
.ie n .IP "$obj\->\fBaddWSDL\fR(\s-1XMLDATA\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddWSDL\fR(\s-1XMLDATA\s0)" 4
.IX Item "$obj->addWSDL(XMLDATA)"
The \s-1XMLDATA\s0 must be acceptable to \fIXML::Compile::dataToXML()\fR and 
should represent the top-level of a (partial) \s-1WSDL\s0 document.
The specification can be spread over multiple files, each of
which must have a \f(CW\*(C`definition\*(C'\fR root element.
.ie n .IP "$obj\->\fBcompileClient\fR([\s-1NAME\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileClient\fR([\s-1NAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->compileClient([NAME], OPTIONS)"
Creates an XML::Compile::SOAP::Operation temporary object using
\&\fIoperation()\fR, and then calls \f(CW\*(C`compileClient()\*(C'\fR on that.
.Sp
The \s-1OPTIONS\s0 available include all of the options for:
.RS 4
.IP "." 4
\&\fIoperation()\fR (i.e. \f(CW\*(C`service\*(C'\fR and \f(CW\*(C`port\*(C'\fR), and all of
.IP "." 4
\&\fIXML::Compile::SOAP::Operation::compileClient()\fR (there are many of
these, for instance \f(CW\*(C`transport_hook\*(C'\fR and \f(CW\*(C`server\*(C'\fR)
.RE
.RS 4
.Sp
You \fBcannot\fR pass options for \fIXML::Compile::Schema::compile()\fR, like
\&\f(CW\*(C`<sloppy_integers =\*(C'\fR 0>>, hooks or typemaps this way. Use new(opts_rw)
and friends to declare those.
.Sp
example:
.Sp
.Vb 4
\&  $wsdl\->compileClient
\&    ( operation => \*(AqHelloWorld\*(Aq
\&    , port      => \*(AqPrefillSoap\*(Aq # only needed when multiple ports
\&    );
.Ve
.RE
.ie n .IP "$obj\->\fBnamesFor\fR(\s-1CLASS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnamesFor\fR(\s-1CLASS\s0)" 4
.IX Item "$obj->namesFor(CLASS)"
Returns the list of names available for a certain definition \s-1CLASS\s0 in
the \s-1WSDL\s0. See \fIindex()\fR for a way to determine the available \s-1CLASS\s0
information.
.ie n .IP "$obj\->\fBoperation\fR([\s-1NAME\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBoperation\fR([\s-1NAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->operation([NAME], OPTIONS)"
Collect all information for a certain operation.  Returned is an
XML::Compile::SOAP::Operation object.
.Sp
An operation is defined by a service name, a port, some bindings,
and an operation name, which can be specified explicitly and is often
left-out: in the many configurations where there are no alternative
choices. In case there are alternatives, you will be requested to
pick an option.
.Sp
.Vb 5
\& \-Option   \-\-Default
\&  action     <undef>
\&  operation  <required>
\&  port       <only when just one port in WSDL>
\&  service    <only when just one service in WSDL>
.Ve
.RS 4
.IP "action => \s-1STRING\s0" 2
.IX Item "action => STRING"
Overrule the soapAction from the \s-1WSDL\s0.
.IP "operation => \s-1NAME\s0" 2
.IX Item "operation => NAME"
Ignored when the parameter list starts with a \s-1NAME\s0 (which is an
alternative for this option).  Optional when there is only
one operation defined within the portType.
.IP "port => \s-1NAME\s0" 2
.IX Item "port => NAME"
Required when more than one port is defined.
.IP "service => QNAME|PREFIXED" 2
.IX Item "service => QNAME|PREFIXED"
Required when more than one service is defined.
.RE
.RS 4
.RE
.SS "Administration"
.IX Subsection "Administration"
.ie n .IP "$obj\->\fBdeclare\fR(\s-1GROUP\s0, COMPONENT|ARRAY, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdeclare\fR(\s-1GROUP\s0, COMPONENT|ARRAY, \s-1OPTIONS\s0)" 4
.IX Item "$obj->declare(GROUP, COMPONENT|ARRAY, OPTIONS)"
Register specific compile \s-1OPTIONS\s0 for the specific \s-1COMPONENT\s0. See also
\&\fIXML::Compile::Cache::declare()\fR. The \s-1GROUP\s0 is either \f(CW\*(C`READER\*(C'\fR,
\&\f(CW\*(C`WRITER\*(C'\fR, \f(CW\*(C`RW\*(C'\fR (both reader and writer), or \f(CW\*(C`OPERATION\*(C'\fR.  As \s-1COMPONENT\s0,
you specify the element name (for readers and writers) or operation name
(for operations). \s-1OPTIONS\s0 are specified as \s-1LIST\s0, \s-1ARRAY\s0 or \s-1HASH\s0.
.Sp
example:
.Sp
.Vb 3
\&   $wsdl\->declare(OPERATION => \*(AqGetStockPrice\*(Aq, @extra_opts);
\&   $wsdl\->compileCalls;
\&   my $answer = $wsdl\->call(GetStockPrice => %request);
.Ve
.ie n .IP "$obj\->\fBdoesExtend\fR(\s-1EXTTYPE\s0, \s-1BASETYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdoesExtend\fR(\s-1EXTTYPE\s0, \s-1BASETYPE\s0)" 4
.IX Item "$obj->doesExtend(EXTTYPE, BASETYPE)"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBelements\fR" 4
.el .IP "\f(CW$obj\fR\->\fBelements\fR" 4
.IX Item "$obj->elements"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBfindName\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfindName\fR(\s-1NAME\s0)" 4
.IX Item "$obj->findName(NAME)"
See \*(L"Administration\*(R" in XML::Compile::Cache
.ie n .IP "$obj\->\fBfindSchemaFile\fR(\s-1FILENAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfindSchemaFile\fR(\s-1FILENAME\s0)" 4
.IX Item "$obj->findSchemaFile(FILENAME)"
.PD 0
.IP "XML::Compile::WSDL11\->\fBfindSchemaFile\fR(\s-1FILENAME\s0)" 4
.IX Item "XML::Compile::WSDL11->findSchemaFile(FILENAME)"
.PD
See \*(L"Administration\*(R" in XML::Compile
.ie n .IP "$obj\->\fBimportDefinitions\fR(\s-1XMLDATA\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBimportDefinitions\fR(\s-1XMLDATA\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->importDefinitions(XMLDATA, OPTIONS)"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBknownNamespace\fR(NAMESPACE|PAIRS)" 4
.el .IP "\f(CW$obj\fR\->\fBknownNamespace\fR(NAMESPACE|PAIRS)" 4
.IX Item "$obj->knownNamespace(NAMESPACE|PAIRS)"
.PD 0
.IP "XML::Compile::WSDL11\->\fBknownNamespace\fR(NAMESPACE|PAIRS)" 4
.IX Item "XML::Compile::WSDL11->knownNamespace(NAMESPACE|PAIRS)"
.PD
See \*(L"Administration\*(R" in XML::Compile
.ie n .IP "$obj\->\fBnamespaces\fR" 4
.el .IP "\f(CW$obj\fR\->\fBnamespaces\fR" 4
.IX Item "$obj->namespaces"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBtypes\fR" 4
.el .IP "\f(CW$obj\fR\->\fBtypes\fR" 4
.IX Item "$obj->types"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBwalkTree\fR(\s-1NODE\s0, \s-1CODE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwalkTree\fR(\s-1NODE\s0, \s-1CODE\s0)" 4
.IX Item "$obj->walkTree(NODE, CODE)"
See \*(L"Administration\*(R" in XML::Compile
.SS "Introspection"
.IX Subsection "Introspection"
All of the following methods are usually \s-1NOT\s0 meant for end-users. End-users
should stick to the \fIoperation()\fR and \fIcompileClient()\fR methods.
.ie n .IP "$obj\->\fBendPoint\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBendPoint\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->endPoint(OPTIONS)"
[2.20] Returns the address of the server, as specified by the \s-1WSDL\s0. When
there are no alternatives for service or port, you not not need to
specify those paramters.
.Sp
.Vb 3
\& \-Option \-\-Default
\&  port     <undef>
\&  service  <undef>
.Ve
.RS 4
.IP "port => \s-1NAME\s0" 2
.IX Item "port => NAME"
.PD 0
.IP "service => QNAME|PREFIXED" 2
.IX Item "service => QNAME|PREFIXED"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBexplain\fR(\s-1OPERATION\s0, \s-1FORMAT\s0, \s-1DIRECTION\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBexplain\fR(\s-1OPERATION\s0, \s-1FORMAT\s0, \s-1DIRECTION\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->explain(OPERATION, FORMAT, DIRECTION, OPTIONS)"
.PD
[2.13]
Produce templates (see \fIXML::Compile::Schema::template()\fR which detail
the use of the \s-1OPERATION\s0. Currently, only the \f(CW\*(C`PERL\*(C'\fR template \s-1FORMAT\s0
is available.
.Sp
The \s-1DIRECTION\s0 of operation is either \f(CW\*(C`INPUT\*(C'\fR (input for the server,
hence to be produced by the client), or \f(CW\*(C`OUTPUT\*(C'\fR (from the server,
received by the client).
.Sp
The actual work is done by \fIXML::Compile::SOAP::Operation::explain()\fR. The
\&\s-1OPTIONS\s0 passed to that method include \f(CW\*(C`recurse\*(C'\fR and \f(CW\*(C`skip_header\*(C'\fR.
.Sp
example:
.Sp
.Vb 1
\&  print $wsdl\->explain(\*(AqCheckStatus\*(Aq, PERL => \*(AqINPUT\*(Aq);
\&
\&  print $wsdl\->explain(\*(AqCheckStatus\*(Aq, PERL => \*(AqOUTPUT\*(Aq
\&     , recurse => 1                 # explain options
\&     , port    => \*(AqSoap12PortName\*(Aq  # operation options
\&     );
.Ve
.ie n .IP "$obj\->\fBfindDef\fR(\s-1CLASS\s0, [QNAME|PREFIXED|NAME])" 4
.el .IP "\f(CW$obj\fR\->\fBfindDef\fR(\s-1CLASS\s0, [QNAME|PREFIXED|NAME])" 4
.IX Item "$obj->findDef(CLASS, [QNAME|PREFIXED|NAME])"
With a \s-1QNAME\s0, the \s-1HASH\s0 which contains the parsed \s-1XML\s0 information
from the \s-1WSDL\s0 template for that CLASS-NAME combination is returned.
You may also have a \s-1PREFIXED\s0 name, using one of the predefined namespace
abbreviations.  Otherwise, \s-1NAME\s0 is considered to be the localName in
that class.  When the \s-1NAME\s0 is not found, an error is produced.
.Sp
Without \s-1QNAME\s0 in \s-1SCALAR\s0 context, there may only be one such name
defined otherwise an error is produced.  In \s-1LIST\s0 context, all definitions
in \s-1CLASS\s0 are returned.
.Sp
example:
.Sp
.Vb 2
\& $service  = $obj\->findDef(service => \*(Aqhttp://xyz\*(Aq);
\& @services = $obj\->findDef(\*(Aqservice\*(Aq);
.Ve
.ie n .IP "$obj\->\fBindex\fR([\s-1CLASS\s0, [\s-1QNAME\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBindex\fR([\s-1CLASS\s0, [\s-1QNAME\s0]])" 4
.IX Item "$obj->index([CLASS, [QNAME]])"
With a \s-1CLASS\s0 and \s-1QNAME\s0, it returns one \s-1WSDL\s0 definition \s-1HASH\s0 or undef.
Returns the index for the \s-1CLASS\s0 group of names as \s-1HASH\s0.  When no \s-1CLASS\s0 is
specified, a \s-1HASH\s0 of HASHes is returned with the CLASSes on the top-level.
.Sp
\&\s-1CLASS\s0 includes \f(CW\*(C`service\*(C'\fR, \f(CW\*(C`binding\*(C'\fR, \f(CW\*(C`portType\*(C'\fR, and \f(CW\*(C`message\*(C'\fR.
.ie n .IP "$obj\->\fBoperations\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBoperations\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->operations(OPTIONS)"
Return a list with all operations defined in the \s-1WSDL\s0.
.Sp
.Vb 4
\& \-Option \-\-Default
\&  binding  <undef>
\&  port     <undef>
\&  service  <undef>
.Ve
.RS 4
.IP "binding => \s-1NAME\s0" 2
.IX Item "binding => NAME"
Only return operations which use the binding with the specified \s-1NAME\s0.
By default, all bindings are accepted.
.IP "port => \s-1NAME\s0" 2
.IX Item "port => NAME"
Return only operations related to the specified port \s-1NAME\s0.
By default operations from all ports.
.IP "service => \s-1NAME\s0" 2
.IX Item "service => NAME"
Only return operations related to the NAMEd service, by default all services.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBprintIndex\fR([\s-1FILEHANDLE\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprintIndex\fR([\s-1FILEHANDLE\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->printIndex([FILEHANDLE], OPTIONS)"
For available \s-1OPTIONS\s0, see \fIoperations()\fR.  This method is useful to
understand the structure of your \s-1WSDL:\s0 it shows a nested list of
services, bindings, ports and portTypes.
.Sp
.Vb 2
\& \-Option       \-\-Defined in         \-\-Default
\&  show_declared  XML::Compile::Cache  <true>
.Ve
.RS 4
.IP "show_declared => \s-1BOOLEAN\s0" 2
.IX Item "show_declared => BOOLEAN"
.RE
.RS 4
.RE
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Comparison"
.IX Subsection "Comparison"
.SS "Collecting definitions"
.IX Subsection "Collecting definitions"
\fIOrganizing your definitions\fR
.IX Subsection "Organizing your definitions"
.SS "Addressing components"
.IX Subsection "Addressing components"
.SS "Representing data-structures"
.IX Subsection "Representing data-structures"
\fIsimpleType\fR
.IX Subsection "simpleType"
.PP
\fIcomplexType/simpleContent\fR
.IX Subsection "complexType/simpleContent"
.PP
\fIcomplexType and complexType/complexContent\fR
.IX Subsection "complexType and complexType/complexContent"
.PP
\fIManually produced \s-1XML\s0 \s-1NODE\s0\fR
.IX Subsection "Manually produced XML NODE"
.PP
\fIOccurence\fR
.IX Subsection "Occurence"
.PP
\fIDefault Values\fR
.IX Subsection "Default Values"
.PP
\fIRepetative blocks\fR
.IX Subsection "Repetative blocks"
.PP
repetative sequence, choice, all
.IX Subsection "repetative sequence, choice, all"
.PP
repetative groups
.IX Subsection "repetative groups"
.PP
repetative substitutionGroups
.IX Subsection "repetative substitutionGroups"
.PP
\fIList type\fR
.IX Subsection "List type"
.PP
\fIUsing substitutionGroup constructs\fR
.IX Subsection "Using substitutionGroup constructs"
.PP
\fIWildcards any and anyAttribute\fR
.IX Subsection "Wildcards any and anyAttribute"
.PP
\fIComplexType with \*(L"mixed\*(R" attribute\fR
.IX Subsection "ComplexType with mixed attribute"
.PP
\fIhexBinary and base64Binary\fR
.IX Subsection "hexBinary and base64Binary"
.SS "Schema hooks"
.IX Subsection "Schema hooks"
\fIdefining hooks\fR
.IX Subsection "defining hooks"
.PP
\fIgeneral syntax\fR
.IX Subsection "general syntax"
.PP
\fIhooks on matching types\fR
.IX Subsection "hooks on matching types"
.PP
\fIhooks on matching ids\fR
.IX Subsection "hooks on matching ids"
.PP
\fIhooks on matching paths\fR
.IX Subsection "hooks on matching paths"
.SS "Typemaps"
.IX Subsection "Typemaps"
\fIPrivate variables in objects\fR
.IX Subsection "Private variables in objects"
.PP
\fITypemap limitations\fR
.IX Subsection "Typemap limitations"
.SS "Handling xsi:type"
.IX Subsection "Handling xsi:type"
.SS "Key rewrite"
.IX Subsection "Key rewrite"
\fIkey_rewrite via table\fR
.IX Subsection "key_rewrite via table"
.PP
\fIrewrite via function\fR
.IX Subsection "rewrite via function"
.PP
\fIkey_rewrite when localNames collide\fR
.IX Subsection "key_rewrite when localNames collide"
.PP
\fIrewrite for convenience\fR
.IX Subsection "rewrite for convenience"
.PP
\fIpre-defined key_rewrite rules\fR
.IX Subsection "pre-defined key_rewrite rules"
.SS "Initializing \s-1SOAP\s0 operations via \s-1WSDL\s0"
.IX Subsection "Initializing SOAP operations via WSDL"
When you have a \s-1WSDL\s0 file, then \s-1SOAP\s0 is simple.  If there is no such file
at hand, then it is still possible to use \s-1SOAP\s0.  See the \s-1DETAILS\s0 chapter
in XML::Compile::SOAP.
.PP
The \s-1WSDL\s0 file contains operations which can be addressed by name.
In the \s-1WSDL\s0 file you need to find the name of the port to be used.
In most cases, the \s-1WSDL\s0 has only one service, one port, one binding,
and one portType and those names can therefore be omitted.  If there is
a choice, then you must explicitly select one.
.PP
.Vb 1
\& use XML::Compile::WSDL11 ();
\&
\& # once in your program
\& my $wsdl   = XML::Compile::WSDL11\->new(\*(Aqdef.wsdl\*(Aq);
\&
\& # XML::Compile::Schema refuses to follow "include" and
\& # "import" commands, so you need to invoke them explicitly.
\& # $wsdl\->addWSDL(\*(Aqfile2.wsdl\*(Aq);            # optional
\& # $wsdl\->importDefinitions(\*(Aqschema1.xsd\*(Aq); # optional
\&
\& # once for each of the defined operations
\& my $call   = $wsdl\->compileClient(\*(AqGetStockPrice\*(Aq);
\&
\& # see XML::Compile::SOAP chapter DETAILS about call params
\& my $answer = $call\->(%request);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-SOAP distribution version 2.24,
built on June 20, 2011. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Other distributions in this suite:
XML::Compile,
XML::Compile::SOAP,
XML::Compile::SOAP12,
XML::Compile::SOAP::Daemon,
XML::Compile::SOAP::WSA,
XML::Compile::C14N,
XML::Compile::WSS,
XML::Compile::Tester,
XML::Compile::Cache,
XML::Compile::Dumper,
XML::Compile::RPC,
XML::Rewrite,
XML::eXistDB,
and
XML::LibXML::Simple.
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
