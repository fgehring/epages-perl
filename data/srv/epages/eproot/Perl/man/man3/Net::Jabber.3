.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Jabber 3"
.TH Net::Jabber 3 "2004-08-17" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Jabber \- Jabber Perl Library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Net::Jabber provides a Perl user with access to the Jabber Instant
\&  Messaging protocol.
\&
\&  For more information about Jabber visit:
\&
\&    http://www.jabber.org
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 6
\&  Net::Jabber is a convenient tool to use for any perl script that would
\&  like to utilize the Jabber Instant Messaging protocol.  While not a
\&  client in and of itself, it provides all of the necessary back\-end
\&  functions to make a CGI client or command\-line perl client feasible and
\&  easy to use.  Net::Jabber is a wrapper around the rest of the official
\&  Net::Jabber::xxxxxx packages.
\&
\&  There is are example scripts in the example directory that provide you
\&  with examples of very simple Jabber programs.
\&
\&
\&  NOTE: The parser that XML::Stream::Parser provides, as are most Perl
\&  parsers, is synchronous.  If you are in the middle of parsing a packet
\&  and call a user defined callback, the Parser is blocked until your
\&  callback finishes.  This means you cannot be operating on a packet,
\&  send out another packet and wait for a response to that packet.  It
\&  will never get to you.  Threading might solve this, but as of the
\&  writing of this, threading in Perl is not quite up to par yet.  This
\&  issue will be revisted in the future.
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 3
\&    For a client:
\&      use Net::Jabber;
\&      my $client = new Net::Jabber::Client();
\&
\&    For a component:
\&      use Net::Jabber;
\&      my $component = new Net::Jabber::Component();
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Vb 6
\&  The Net::Jabber module does not define any methods that you will call
\&  directly in your code.  Instead you will instantiate objects that call
\&  functions from this module to do work.  The three main objects that
\&  you will work with are the Message, Presence, and IQ modules.  Each one
\&  corresponds to the Jabber equivilant and allows you get and set all
\&  parts of those packets.
.Ve
.SH "PACKAGES"
.IX Header "PACKAGES"
.Vb 2
\&  For more information on each of these packages, please see the man page
\&  for each one.
.Ve
.SS "Net::Jabber::Client"
.IX Subsection "Net::Jabber::Client"
.Vb 4
\&  This package contains the code needed to communicate with a Jabber
\&  server: login, wait for messages, send messages, and logout.  It uses
\&  XML::Stream to read the stream from the server and based on what kind
\&  of tag it encounters it calls a function to handle the tag.
.Ve
.SS "Net::Jabber::Component"
.IX Subsection "Net::Jabber::Component"
.Vb 7
\&  This package contains the code needed to write a server component.  A
\&  component is a program tha handles the communication between a jabber
\&  server and some outside program or communications pacakge (IRC, talk,
\&  email, etc...)  With this module you can write a full component in just
\&  a few lines of Perl.  It uses XML::Stream to communicate with its host
\&  server and based on what kind of tag it encounters it calls a function
\&  to handle the tag.
.Ve
.SS "Net::Jabber::Protocol"
.IX Subsection "Net::Jabber::Protocol"
.Vb 2
\&  A collection of high\-level functions that Client and Component use to
\&  make their lives easier through inheritance.
.Ve
.SS "Net::Jabber::JID"
.IX Subsection "Net::Jabber::JID"
.Vb 3
\&  The Jabber IDs consist of three parts: user id, server, and resource.
\&  This module gives you access to those components without having to
\&  parse the string yourself.
.Ve
.SS "Net::Jabber::Message"
.IX Subsection "Net::Jabber::Message"
.Vb 2
\&  Everything needed to create and read a <message/> received from the
\&  server.
.Ve
.SS "Net::Jabber::Presence"
.IX Subsection "Net::Jabber::Presence"
.Vb 2
\&  Everything needed to create and read a <presence/> received from the
\&  server.
.Ve
.SS "Net::Jabber::IQ"
.IX Subsection "Net::Jabber::IQ"
.Vb 2
\&  IQ is a wrapper around a number of modules that provide support for the
\&  various Info/Query namespaces that Jabber recognizes.
.Ve
.SS "Net::Jabber::Stanza"
.IX Subsection "Net::Jabber::Stanza"
.Vb 3
\&  This module represents a namespaced stanza that is used to extend a
\&  <message/>, <presence/>, and <iq/>.  Ultimately each namespace is
\&  documented in a JEP of some kind.  http://jabber.org/jeps/
\&
\&  The man page for Net::Jabber::Stanza contains a listing of all
\&  supported namespaces, and the methods that are supported by the objects
\&  that represent those namespaces.
.Ve
.SS "Net::Jabber::Namespaces"
.IX Subsection "Net::Jabber::Namespaces"
.Vb 5
\&  Jabber allows for any stanza to be extended by any bit of XML.  This
\&  module contains all of the internals for defining the Jabber based
\&  extensions defined by the JEPs.  The documentation for this module
\&  explains more about how to add your own custom namespace and have it be
\&  supported.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ryan Eatmon
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.
