.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Report::Lexicon::Index 3"
.TH Log::Report::Lexicon::Index 3 "2011-08-23" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Report::Lexicon::Index \- search through available translation files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $index = Log::Report::Lexicon::Index\->new($directory);
\& my $fn    = $index\->find(\*(Aqmy\-domain\*(Aq, \*(Aqnl_NL.utf\-8\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module handles the lookup of translation files for a whole
directory tree.  It is lazy loading, which means that it will only
build the search tree when addressed, not when the object is
created.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Log::Report::Lexicon::Index\->\fBnew\fR(\s-1DIRECTORY\s0, \s-1OPTIONS\s0)" 4
.IX Item "Log::Report::Lexicon::Index->new(DIRECTORY, OPTIONS)"
Create an index for a certain directory.  If the directory does not
exist, then the object will still be created.
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBdirectory\fR" 4
.el .IP "\f(CW$obj\fR\->\fBdirectory\fR" 4
.IX Item "$obj->directory"
Returns the directory name.
.SS "Search"
.IX Subsection "Search"
.ie n .IP "$obj\->\fBaddFile\fR(\s-1BASENAME\s0, [\s-1ABSOLUTE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBaddFile\fR(\s-1BASENAME\s0, [\s-1ABSOLUTE\s0])" 4
.IX Item "$obj->addFile(BASENAME, [ABSOLUTE])"
Add a certain file to the index.  This method returns the \s-1ABSOLUTE\s0
path to that file, which must be used to access it.  When not explicitly
specified, the \s-1ABSOLUTE\s0 path will be calculated.
.ie n .IP "$obj\->\fBfind\fR(\s-1TEXTDOMAIN\s0, \s-1LOCALE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(\s-1TEXTDOMAIN\s0, \s-1LOCALE\s0)" 4
.IX Item "$obj->find(TEXTDOMAIN, LOCALE)"
Lookup the best translation table, according to the rules described
in chapter \*(L"\s-1DETAILS\s0\*(R", below.
.Sp
Returned is a filename, or \f(CW\*(C`undef\*(C'\fR if nothing is defined for the
\&\s-1LOCALE\s0 (there is no default on this level).
.ie n .IP "$obj\->\fBindex\fR" 4
.el .IP "\f(CW$obj\fR\->\fBindex\fR" 4
.IX Item "$obj->index"
For internal use only.
Force the creation of the index (if not already done).  Returns a hash
with key-value pairs, where the key is the lower-cased version of the
filename, and the value the case-sensitive version of the filename.
.ie n .IP "$obj\->\fBlist\fR(\s-1DOMAIN\s0, [\s-1EXTENSION\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBlist\fR(\s-1DOMAIN\s0, [\s-1EXTENSION\s0])" 4
.IX Item "$obj->list(DOMAIN, [EXTENSION])"
Returned is a list of filenames which is used to update the list of
MSGIDs when source files have changed.  All translation files which
belong to a certain \s-1DOMAIN\s0 are listed.
.Sp
The \s-1EXTENSION\s0 filter can be used to reduce the filenames further, for
instance to select only \f(CW\*(C`po\*(C'\fR or only \f(CW\*(C`mo\*(C'\fR files, and ignore readme's.
Use an string, without dot and interpreted case-insensitive, or a
regular expresion.
.Sp
example:
.Sp
.Vb 3
\&  my @l = $index\->list(\*(Aqmy\-domain\*(Aq);
\&  my @l = $index\->list(\*(Aqmy\-domain\*(Aq, \*(Aqpo\*(Aq);
\&  my @l = $index\->list(\*(Aqmy\-domain\*(Aq, qr/^readme/i);
.Ve
.SH "DETAILS"
.IX Header "DETAILS"
.SS "merge lexicon files with perl modules"
.IX Subsection "merge lexicon files with perl modules"
By default, the filename which contains the package which contains the
textdomain's translator configuration is taken (that can be only one)
and changed into a directory name.  The path is then extended with \f(CW\*(C`messages\*(C'\fR
to form the root of the lexicon: the top of the index.  After this,
the locale indication, the lc-category (usually \s-1LC_MESSAGES\s0), and
the \f(CW\*(C`textdomain\*(C'\fR followed by \f(CW\*(C`.po\*(C'\fR are added.  This is exactly as
\&\f(CWgettext(1)\fR does, but then using the \s-1PO\s0 text file instead of the \s-1MO\s0
binary file.
.SS "Locale search"
.IX Subsection "Locale search"
The exact gettext defined format of the locale is
  language[_territory[.codeset]][@modifier]
The modifier will be used in above directory search, but only if provided
explicitly.
.PP
The manual \f(CW\*(C`info gettext\*(C'\fR determines the rules.  During the search,
components of the locale get stripped, in the following order:
.IP "1. codeset" 4
.IX Item "1. codeset"
.PD 0
.IP "2. normalized codeset" 4
.IX Item "2. normalized codeset"
.IP "3. territory" 4
.IX Item "3. territory"
.IP "4. modifier" 4
.IX Item "4. modifier"
.PD
.PP
The normalized codeset (character-set name) is derived by
.IP "1. Remove all characters beside numbers and letters." 4
.IX Item "1. Remove all characters beside numbers and letters."
.PD 0
.IP "2. Fold letters to lowercase." 4
.IX Item "2. Fold letters to lowercase."
.ie n .IP "3. If the same only contains digits prepend the string ""iso""." 4
.el .IP "3. If the same only contains digits prepend the string ``iso''." 4
.IX Item "3. If the same only contains digits prepend the string iso."
.PD
.PP
To speed-up the search for the right table, the full directory tree
will be indexed only once when needed the first time.  The content of
all defined lexicon directories will get merged into one tree.
.SS "Example"
.IX Subsection "Example"
My module is named \f(CW\*(C`Some::Module\*(C'\fR and installed in some of perl's
directories, say \f(CW\*(C`~perl5\*(C'\fR.  The module is defining textdomain
\&\f(CW\*(C`my\-domain\*(C'\fR.  The translation is made into \f(CW\*(C`nl\-NL.utf\-8\*(C'\fR (locale for
Dutch spoken in The Netherlands, utf\-8 encoded text file).
.PP
The translation table is taken from the first existing of these files:
  nl\-NL.utf\-8/LC_MESSAGES/my\-domain.po
  nl\-NL.utf\-8/LC_MESSAGES/my\-domain.po
  nl\-NL.utf8/LC_MESSAGES/my\-domain.po
  nl\-NL/LC_MESSAGES/my\-domain.po
  nl/LC_MESSAGES/my\-domain.po
.PP
Then, attempts are made which are not compatible with gettext.  The
advantage is that the directory structure is much simpler.  The idea
is that each domain has its own locale installation directory, instead
of everything merged in one place, what gettext presumes.
.PP
In order of attempts:
  nl\-NL.utf\-8/my\-domain.po
  nl\-NL.utf8/my\-domain.po
  nl\-NL/my\-domain.po
  nl/my\-domain.po
  my\-domain/nl\-NL.utf8.po
  my\-domain/nl\-NL.po
  my\-domain/nl.po
.PP
Filenames may get mutilated by the platform (which we will try to hide
from you [please help improve this]), and are treated case-INsensitive!
.PP
It's always complicated to find the lexicon files, because the perl
package can be installed on any weird operating system.  Therefore,
you may need to specify the lexicon directory or alternative directories
explicitly.  However, you may also choose to install the lexicon files
in between the perl modules.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Log-Report distribution version 0.94,
built on August 23, 2011. Website: \fIhttp://perl.overmeer.net/log\-report/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
