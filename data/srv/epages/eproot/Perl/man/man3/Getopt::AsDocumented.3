.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Getopt::AsDocumented 3"
.TH Getopt::AsDocumented 3 "2011-04-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Getopt::AsDocumented \- declare options as pod documentation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  =head1 Options
\&  ...
\&  =item \-w, \-\-what WHAT
\&
\&  =cut
\&
\&  sub main {
\&    my $opt = Getopt::AsDocumented\->process(\e@args) or return;
\&
\&    my $what = $opt\->what;
\&    ...
\&  }
.Ve
.SH "About"
.IX Header "About"
This module allows you to declare your program's command-line options as
pod documentation.  It provides syntax to declare types and defaults in
a way which is also readable as documentation.
.PP
Note: This is built on Getopt::Base and some advanced features are still
growing.  Your help is welcome.
.SH "Methods"
.IX Header "Methods"
.SS "process"
.IX Subsection "process"
Loads the pod from your current file and processes the command-line
arguments.
.PP
.Vb 1
\&  my $opt = Getopt::AsDocumented\->process(\e@args) or return;
.Ve
.SH "Option Specification"
.IX Header "Option Specification"
.SS "With/Without Opterands"
.IX Subsection "With/Without Opterands"
If an option is followed by a word, it requires an opterand.
.PP
.Vb 1
\&  =item \-\-foo FOO
.Ve
.PP
Otherwise, it is a simple flag (boolean) option
.PP
.Vb 1
\&  =item \-\-foo
.Ve
.PP
\fIBooleans\fR
.IX Subsection "Booleans"
.PP
Each boolean option will automatically generate a '\-\-no\-' form which
negates it.  You may choose to mention this and/or link aliases to it.
.PP
.Vb 1
\&  =item \-\-foo
\&
\&  Sets the fooness.
\&
\&  =item \-x, \-\-ex\-foo, \-\-no\-foo
.Ve
.SS "Types"
.IX Subsection "Types"
Non-boolean options may be typed as strings, numbers, or integers.  The
type is included in parenthesis after the option spec.  If the type is not mentioned, it defaults to \f(CW\*(C`string\*(C'\fR.
.PP
\fIinteger\fR
.IX Subsection "integer"
.PP
An integer.
.PP
.Vb 1
\&  =item \-\-foo FOO (integer)
.Ve
.PP
\fInumber\fR
.IX Subsection "number"
.PP
A floating-point number.
.PP
.Vb 1
\&  =item \-\-foo FOO (number)
.Ve
.PP
\fIstring\fR
.IX Subsection "string"
.PP
A string.  This is the default, but may be included for clarity.
.PP
.Vb 1
\&  =item \-\-foo FOO (string)
.Ve
.SS "Scalar/HASH/ARRAY"
.IX Subsection "Scalar/HASH/ARRAY"
Any non-boolean option can take one of the following forms.
.PP
\fIScalar\fR
.IX Subsection "Scalar"
.PP
An option followed by a simple word means that only one value is
assigned to it (if the user repeats it, a prior value is overwritten.)
.PP
.Vb 1
\&  =item \-\-foo FOO
.Ve
.PP
\fI\s-1HASH\s0\fR
.IX Subsection "HASH"
.PP
A \s-1HASH\s0 option is followed by something of the form \f(CW\*(C`\ew+=.*\*(C'\fR.  Each
opterand is treated as a \f(CW$key\fR=$value pair.
.PP
.Vb 1
\&  =item \-\-foo BAR=BAZ
.Ve
.PP
\fI\s-1LIST\s0\fR
.IX Subsection "LIST"
.PP
A \s-1LIST\s0 option is followed by another mention of itself within []
brackets with an ellipsis to indicate optional additional elements.
.PP
.Vb 1
\&  =item \-\-foo FOO [\-\-foo ...]
.Ve
.PP
If a list option requires an explicit type, this must be included after
the bracketed text.
.PP
.Vb 1
\&  =item \-\-foo FOO [\-\-foo ...] (integer)
.Ve
.SH "Handlers"
.IX Header "Handlers"
.SS "config_file_handler"
.IX Subsection "config_file_handler"
Loads the user's configuration file.  All of the values from the
configuration will be loaded into the options object \fIbefore\fR any
options from the command-line are processed.
.PP
.Vb 1
\&  $go\->config_file_handler;
.Ve
.SS "load_config_file"
.IX Subsection "load_config_file"
.Vb 1
\&  $self\->load_config_file($file);
.Ve
.SS "make_object"
.IX Subsection "make_object"
Wraps the super method in order to load the config file.
.PP
.Vb 1
\&  $obj = $self\->make_object;
.Ve
.SS "version_handler"
.IX Subsection "version_handler"
Prints the version from your handler/\fIcaller()\fR's package.
.PP
.Vb 1
\&  $go\->version_handler;
.Ve
.PP
Sets the quit flag.
.SS "help_handler"
.IX Subsection "help_handler"
Prints a help message based on the \s-1USAGE\s0 and \s-1OPTIONS\s0 sections from your
pod.  Uses the first sentence from each \f(CW\*(C`=item\*(C'\fR section, or
alternatively: \f(CW\*(C`=for help\*(C'\fR content found within the \f(CW\*(C`=item\*(C'\fR section.
.PP
.Vb 1
\&  $go\->help_handler;
.Ve
.PP
Sets the quit flag.
.SH "Other Methods"
.IX Header "Other Methods"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $go = Getopt::AsDocumented\->new(%settings);
.Ve
.ie n .IP "pod       => $string" 4
.el .IP "pod       => \f(CW$string\fR" 4
.IX Item "pod       => $string"
.PD 0
.ie n .IP "from_file => $filename" 4
.el .IP "from_file => \f(CW$filename\fR" 4
.IX Item "from_file => $filename"
.ie n .IP "handler   => $classname" 4
.el .IP "handler   => \f(CW$classname\fR" 4
.IX Item "handler   => $classname"
.PD
.PP
.Vb 1
\&  $self\->_init(%setup);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Wilhelm @ <ewilhelm at cpan dot org>
.PP
http://scratchcomputing.com/
.SH "BUGS"
.IX Header "BUGS"
If you found this module on \s-1CPAN\s0, please report any bugs or feature
requests through the web interface at <http://rt.cpan.org>.  I will be
notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.PP
If you pulled this development version from my /svn/, please contact me
directly.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009 Eric L. Wilhelm, All Rights Reserved.
.SH "NO WARRANTY"
.IX Header "NO WARRANTY"
Absolutely, positively \s-1NO\s0 \s-1WARRANTY\s0, neither express or implied, is
offered with this software.  You use this software at your own risk.  In
case of loss, no person or entity owes you anything whatsoever.  You
have been warned.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
