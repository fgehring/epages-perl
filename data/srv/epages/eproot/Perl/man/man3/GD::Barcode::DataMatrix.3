.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GD::Barcode::DataMatrix 3"
.TH GD::Barcode::DataMatrix 3 "2014-02-18" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GD::Barcode::DataMatrix \- Create ISO/IEC16022 DataMatrix barcode
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fIex. \s-1CGI\s0\fR
.PP
.Vb 4
\&  use GD::Barcode::DataMatrix;
\&  binmode(STDOUT);
\&  print "Content\-Type: image/png\en\en";
\&  print GD::Barcode::DataMatrix\->new(\*(Aq1234567890\*(Aq)\->plot\->png;
.Ve
.PP
\&\fIwith Error Check\fR
.PP
.Vb 3
\&  my $oGdBar = GD::Barcode::DataMatrix\->new(\*(AqA12345678\*(Aq);
\&  die $GD::Barcode::DataMatrix::errStr unless($oGdBar);     #Invalid Characters
\&  $oGdBar\->plot\->png;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
GD::Barcode::DataMatrix is a subclass of GD::Barcode and allows you to
create DataMatrix barcode image with \s-1GD\s0.
.SS "new"
.IX Subsection "new"
\&\fI\f(CI$oGdBar\fI\fR = GD::Barcode::DataMatrix\->new(\fI\f(CI$sTxt\fI\fR, [ Type => \fI\s-1ASCII\s0 | C40 | \s-1TEXT\s0 | \s-1BASE256\s0 | \s-1NONE\s0 | \s-1AUTO\s0\fR, Size => \*(L"${width}x${height}\*(R", Tilde => \fI0 | 1\fR]);
.PP
Constructor. 
Creates a GD::Barcode::DataMatrix object for \fI\f(CI$sTxt\fI\fR.
.SS "\fIplot()\fP"
.IX Subsection "plot()"
\&\fI\f(CI$oGd\fI\fR = \f(CW$oGdBar\fR\->plot([Height => \fI\f(CI$iHeight\fI\fR, NoText => \fI0 | 1\fR]);
.PP
creates \s-1GD\s0 object with barcode image for the \fI\f(CI$sTxt\fI\fR specified at new method.
\&\fI\f(CI$iHeight\fI\fR is height of the image. If \fINoText\fR is 1, the image has no text image of \fI\f(CI$sTxt\fI\fR.
.PP
.Vb 4
\& ex.
\&  my $oGdB = GD::Barcode::DataMatrix\->new(\*(Aq12345678\*(Aq);
\&  my $oGD = $oGdB\->plot(NoText=>1, Height => 20);
\&  # $sGD is a GD image with Height=>20 pixels, with no text.
.Ve
.SS "\fIbarcode()\fP"
.IX Subsection "barcode()"
\&\fI\f(CI$sPtn\fI\fR = \f(CW$oGdBar\fR\->\fIbarcode()\fR;
.PP
returns a barcode pattern in string with '1' and '0'. 
\&'1' means black, '0' means white.
.PP
.Vb 3
\& ex.
\&  my $oGdB = GD::Barcode::DataMatrix\->new(\*(Aq12345678\*(Aq);
\&  my $sPtn = $oGdB\->barcode();
.Ve
.ie n .SS "$errStr"
.el .SS "\f(CW$errStr\fP"
.IX Subsection "$errStr"
\&\f(CW$GD::Barcode::DataMatrix::errStr\fR
.PP
has error message.
.ie n .SS "$text"
.el .SS "\f(CW$text\fP"
.IX Subsection "$text"
\&\f(CW$oGdBar\fR\->{$text}
.PP
has barcode text based on \fI\f(CI$sTxt\fI\fR specified in new method.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
GD::Barcode
.SH "AUTHOR"
.IX Header "AUTHOR"
Mons Anderson <inthrax@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The GD::Barocde::DataMatrix module is Copyright (c) 2008\-2009 Mons Anderson.
All rights reserved.
.PP
You may distribute under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the Perl \s-1README\s0 file.
