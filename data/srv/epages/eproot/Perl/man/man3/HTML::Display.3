.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Display 3"
.TH HTML::Display 3 "2007-10-20" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Display \- display HTML locally in a browser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use strict;
\&  use HTML::Display;
\&
\&  # guess the best value from $ENV{PERL_HTML_DISPLAY_CLASS}
\&  # or $ENV{PERL_HTML_DISPLAY_COMMAND}
\&  # or the operating system, in that order
\&  my $browser = HTML::Display\->new();
\&  warn "# Displaying HTML using " . ref $browser;
\&  my $location = "http://www.google.com/";
\&  $browser\->display(html => $html, location => $location);
\&
\&  # Or, for a one\-off job :
\&  display("<html><body><h1>Hello world!</h1></body></html>");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module abstracts the task of displaying \s-1HTML\s0 to the user. The
displaying is done by launching a browser and navigating it to either
a temporary file with the \s-1HTML\s0 stored in it, or, if possible, by
pushing the \s-1HTML\s0 directly into the browser window.
.PP
The module tries to automagically select the \*(L"correct\*(R" browser, but
if it dosen't find a good browser, you can modify the behaviour by
setting some environment variables :
.PP
.Vb 1
\&  PERL_HTML_DISPLAY_CLASS
.Ve
.PP
If HTML::Display already provides a class for the browser you want to
use, setting \f(CW\*(C`PERL_HTML_DISPLAY_CLASS\*(C'\fR to the name of the class will
make HTML::Display use that class instead of what it detects.
.PP
.Vb 1
\&  PERL_HTML_DISPLAY_COMMAND
.Ve
.PP
If there is no specialized class yet, but your browser can be controlled
via the command line, then setting \f(CW\*(C`PERL_HTML_DISPLAY_COMMAND\*(C'\fR to the
string to navigate to the \s-1URL\s0 will make HTML::Display use a \f(CW\*(C`system()\*(C'\fR
call to the string. A \f(CW%s\fR in the value will be replaced with the name
of the temporary file containing the \s-1HTML\s0 to display.
.ie n .SS "%HTML::Display::os_default"
.el .SS "\f(CW%HTML::Display::os_default\fP"
.IX Subsection "%HTML::Display::os_default"
The hash \f(CW%HTML::Display::os_default\fR contains pairs of class names
for the different operating systems and routines that test whether
this script is currently running under it. If you you want to dynamically
add a new class or replace a class (or the rule), modify \f(CW%os_default\fR :
.PP
.Vb 3
\&  # Install class for MagicOS
\&  $HTML::Display::os_default{"HTML::Display::MagicOS"}
\&    = sub { $^O =~ qr/magic/i };
.Ve
.ie n .SS "_\|_PACKAGE_\|_\->new %ARGS"
.el .SS "_\|_PACKAGE_\|_\->new \f(CW%ARGS\fP"
.IX Subsection "__PACKAGE__->new %ARGS"
.ie n .SS "$browser\->display( %ARGS )"
.el .SS "\f(CW$browser\fP\->display( \f(CW%ARGS\fP )"
.IX Subsection "$browser->display( %ARGS )"
Will display the \s-1HTML\s0. The following arguments are valid :
.PP
.Vb 4
\&  base     => Base to which all relative links will be resolved
\&  html     => Scalar containing the HTML to be displayed
\&  file     => Scalar containing the name of the file to be displayed
\&                                                This file will possibly be copied into a temporary file!
\&
\&  location    (synonymous to base)
.Ve
.PP
If only one argument is passed, then it is taken as if
.PP
.Vb 1
\&  html => $_[0]
.Ve
.PP
was passed.
.SH "EXPORTS"
.IX Header "EXPORTS"
The subroutine \f(CW\*(C`display\*(C'\fR is exported by default
.SH "COMMAND LINE USAGE"
.IX Header "COMMAND LINE USAGE"
Display some \s-1HTML\s0 to the user :
.PP
.Vb 1
\&  perl \-MHTML::Display \-e "display \*(Aq<html><body><h1>Hello world</body></html>\*(Aq"
.Ve
.PP
Display a web page to the user :
.PP
.Vb 1
\&  perl \-MLWP::Simple \-MHTML::Display \-e "display get \*(Aqhttp://www.google.com\*(Aq"
.Ve
.PP
Display the same page with the images also working :
.PP
.Vb 2
\&  perl \-MLWP::Simple \-MHTML::Display \-e "display html => get(\*(Aqhttp://www.google.com\*(Aq),
\&                                                 location => \*(Aqhttp://www.google.com\*(Aq"
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2004\-2007 Max Maischein \f(CW\*(C`<corion@cpan.org>\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
