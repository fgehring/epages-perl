.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Socket::Multicast6 3"
.TH Socket::Multicast6 3 "2013-06-28" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Socket::Multicast6 \- Constructors and constants for IPv4 and IPv6 multicast socket operations.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Socket::Multicast6 qw(:all);
\&
\&  my $ip = getprotobyname( \*(Aqip\*(Aq );
\&  
\&  my $ip_mreq = pack_ip_mreq( inet_aton( $mcast_addr ), inet_aton( $if_addr ) );
\&
\&  my $ipv6_mreq = pack_ipv6_mreq( inet_pton( AF_INET6, $mcast6_addr ), $if_index );
\&
\&  setsockopt( $sock, $ip, IP_ADD_MEMBERSHIP, $ip_mreq )
\&    or die( "setsockopt IP_ADD_MEMBERSHIP failed: $!" );
\&
\&  setsockopt( $sock, $ip, IP_DROP_MEMBERSHIP, $ip_mreq )
\&    or die( "setsockopt IP_DROP_MEMBERSHIP failed: $!" );
\&
\&  setsockopt( $sock, $ip, IP_MULTICAST_LOOP, pack( \*(AqC\*(Aq, $loop ) )
\&    or die( "setsockopt IP_MULTICAST_LOOP failed: $!" );
\&
\&  setsockopt( $sock, $ip, IP_MULTICAST_TTL, pack( \*(AqC\*(Aq, $ttl ) )
\&    or die( "setsockopt IP_MULTICAST_TTL failed: $!" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used to gain access to constants and utility functions
used when manipulating multicast socket attributes.
.PP
For simple, object-oriented way of doing the same thing, take a look 
at IO::Socket::Multicast6 or IO::Socket::Multicast.
.SH "EXPORTS"
.IX Header "EXPORTS"
By default nothing is exported, you can use the 'ipv4', 'ipv6' and 'independent' to 
export a specific protocol family, or 'all' to export all symbols.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .IP "$ip_mreq = pack_ip_mreq(\s-1MCAST_ADDR\s0, \s-1IF_ADDR\s0)" 4
.el .IP "\f(CW$ip_mreq\fR = pack_ip_mreq(\s-1MCAST_ADDR\s0, \s-1IF_ADDR\s0)" 4
.IX Item "$ip_mreq = pack_ip_mreq(MCAST_ADDR, IF_ADDR)"
.PD 0
.ie n .IP "$ip_mreq_source = pack_ip_mreq_source(\s-1MCAST_ADDR\s0, \s-1SOURCE_ADDR\s0, \s-1IF_ADDR\s0)" 4
.el .IP "\f(CW$ip_mreq_source\fR = pack_ip_mreq_source(\s-1MCAST_ADDR\s0, \s-1SOURCE_ADDR\s0, \s-1IF_ADDR\s0)" 4
.IX Item "$ip_mreq_source = pack_ip_mreq_source(MCAST_ADDR, SOURCE_ADDR, IF_ADDR)"
.ie n .IP "$ipv6_mreq = pack_ipv6_mreq(\s-1MCAST6_ADDR\s0, \s-1IF_INDEX\s0)" 4
.el .IP "\f(CW$ipv6_mreq\fR = pack_ipv6_mreq(\s-1MCAST6_ADDR\s0, \s-1IF_INDEX\s0)" 4
.IX Item "$ipv6_mreq = pack_ipv6_mreq(MCAST6_ADDR, IF_INDEX)"
.PD
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.IP "\s-1IP_MULTICAST_IF\s0" 4
.IX Item "IP_MULTICAST_IF"
.PD 0
.IP "\s-1IP_MULTICAST_TTL\s0" 4
.IX Item "IP_MULTICAST_TTL"
.IP "\s-1IP_MULTICAST_LOOP\s0" 4
.IX Item "IP_MULTICAST_LOOP"
.IP "\s-1IP_ADD_MEMBERSHIP\s0" 4
.IX Item "IP_ADD_MEMBERSHIP"
.IP "\s-1IP_DROP_MEMBERSHIP\s0" 4
.IX Item "IP_DROP_MEMBERSHIP"
.IP "\s-1IP_ADD_SOURCE_MEMBERSHIP\s0" 4
.IX Item "IP_ADD_SOURCE_MEMBERSHIP"
.IP "\s-1IP_DROP_SOURCE_MEMBERSHIP\s0" 4
.IX Item "IP_DROP_SOURCE_MEMBERSHIP"
.IP "\s-1IPV6_MULTICAST_IF\s0" 4
.IX Item "IPV6_MULTICAST_IF"
.IP "\s-1IPV6_MULTICAST_HOPS\s0" 4
.IX Item "IPV6_MULTICAST_HOPS"
.IP "\s-1IPV6_MULTICAST_LOOP\s0" 4
.IX Item "IPV6_MULTICAST_LOOP"
.IP "\s-1IPV6_JOIN_GROUP\s0" 4
.IX Item "IPV6_JOIN_GROUP"
.IP "\s-1IPV6_LEAVE_GROUP\s0" 4
.IX Item "IPV6_LEAVE_GROUP"
.IP "\s-1MCAST_JOIN_GROUP\s0" 4
.IX Item "MCAST_JOIN_GROUP"
.IP "\s-1MCAST_BLOCK_SOURCE\s0" 4
.IX Item "MCAST_BLOCK_SOURCE"
.IP "\s-1MCAST_UNBLOCK_SOURCE\s0" 4
.IX Item "MCAST_UNBLOCK_SOURCE"
.IP "\s-1MCAST_LEAVE_GROUP\s0" 4
.IX Item "MCAST_LEAVE_GROUP"
.IP "\s-1MCAST_JOIN_SOURCE_GROUP\s0" 4
.IX Item "MCAST_JOIN_SOURCE_GROUP"
.IP "\s-1MCAST_LEAVE_SOURCE_GROUP\s0" 4
.IX Item "MCAST_LEAVE_SOURCE_GROUP"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Socket::Multicast6 (The easier, object-oriented way)
.SH "AUTHOR"
.IX Header "AUTHOR"
Based on Socket::Multicast by Jonathan Steinert, <hachi@cpan.org>
Socket::Multicast6 by Nicholas J Humfrey, <njh@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 Nicholas J Humfrey
Copyright (C) 2006 Jonathan Steinert
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.6.1 or,
at your option, any later version of Perl 5 you may have available.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 129:" 4
.IX Item "Around line 129:"
\&'=item' outside of any '=over'
.IP "Around line 136:" 4
.IX Item "Around line 136:"
You forgot a '=back' before '=head1'
