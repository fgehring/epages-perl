.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Time::Mock 3"
.TH Time::Mock 3 "2014-07-29" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Time::Mock \- shift and scale time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Speed up your \fIsleep()\fR, \fIalarm()\fR, and \fItime()\fR calls.
.PP
.Vb 2
\&  use Time::Mock throttle => 100;
\&  use Your::Code;
.Ve
.SH "ABOUT"
.IX Header "ABOUT"
Test::MockTime is nice, but doesn't allow you to accelerate the timestep
and doesn't deal with Time::HiRes or give you any way to change the time
across forks.
.PP
\&\s-1TODO:\s0 replace Time::HiRes functions with wrappers
.PP
\&\s-1TODO:\s0 finish the interfaces to real time/sleep/alarm
.SH "Replaces"
.IX Header "Replaces"
These core functions are replaced.
.PP
Eventually, much of the same bits from Time::HiRes will be
correspondingly overwritten.
.IP "time" 4
.IX Item "time"
.PD 0
.IP "localtime" 4
.IX Item "localtime"
.IP "gmtime" 4
.IX Item "gmtime"
.IP "sleep" 4
.IX Item "sleep"
.PD
Sleeps for 1/$throttle.
.IP "alarm" 4
.IX Item "alarm"
Alarm happens in 1/$throttle.
.SH "Class Methods"
.IX Header "Class Methods"
These are the knobs on your time machine, but note that it is probably
best to adjust them only once: see caveats.  For convenience,
\&\fIimport()\fR takes will call these methods with each key in its argument
list.
.PP
.Vb 1
\&  perl \-MTime::Mock=throttle,600,set,"2009\-11\-01 00:59" dst_bug.pl
.Ve
.SS "throttle"
.IX Subsection "throttle"
Get or set the throttle.
.PP
.Vb 1
\&  Time::Mock\->throttle(10_000);
.Ve
.SS "offset"
.IX Subsection "offset"
Get or set the offset.
.PP
.Vb 1
\&  Time::Mock\->offset(120);
.Ve
.SS "set"
.IX Subsection "set"
Set the time to a given value.  This may be a numeric time or anything
parseable by \fIDate::Parse::str2time()\fR (you need to install Date::Parse to
enable this.)
.PP
.Vb 1
\&  Time::Mock\->set("2009\-11\-01 00:59");
.Ve
.SH "Caveats"
.IX Header "Caveats"
This package remembers the actual system time when it was loaded and
makes adjustments from there.
.PP
Future versions might change this behavior if I can think of a good
reason and scheme for that.
.SS "forks and threads"
.IX Subsection "forks and threads"
The throttle value will hold across forks, but there is no support for
propagating changes to child processes.  So, set the knobs only before
you fork!
.PP
Don't ask about threads unless you're asking about me applying your
patch thanks.
.SS "Networking and System stuff"
.IX Subsection "Networking and System stuff"
We're only lying about the clock inside of Perl, not magically messing
with the universe.
.SS "Time Travel is Dangerous"
.IX Subsection "Time Travel is Dangerous"
I suggest that you set the knobs at \fIimport()\fR and don't mess with them
after that unless you're well aware of how your code is using time.
.PP
Messing with the throttle during runtime could also give your code the
illusion of time going backwards.  If your code tries to do math with
the return values of \fItime()\fR before and after a slow-down, there could be
trouble.
.PP
Changing the throttle while an \fIalarm()\fR is set won't change the original
alarm time.  There would be a similar caveat about \fIsleep()\fR if I hadn't already mentioned forks ;\-)
.PP
Finally, don't ever let your past self see your future self.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Wilhelm @ <ewilhelm at cpan dot org>
.PP
http://scratchcomputing.com/
.SH "BUGS"
.IX Header "BUGS"
If you found this module on \s-1CPAN\s0, please report any bugs or feature
requests through the web interface at <http://rt.cpan.org>.  I will be
notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.PP
If you pulled this development version from my /svn/, please contact me
directly.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2008 Eric L. Wilhelm, All Rights Reserved.
.SH "NO WARRANTY"
.IX Header "NO WARRANTY"
Absolutely, positively \s-1NO\s0 \s-1WARRANTY\s0, neither express or implied, is
offered with this software.  You use this software at your own risk.  In
case of loss, no person or entity owes you anything whatsoever.  You
have been warned.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
