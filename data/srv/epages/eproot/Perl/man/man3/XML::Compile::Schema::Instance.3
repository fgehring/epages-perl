.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::Schema::Instance 3"
.TH XML::Compile::Schema::Instance 3 "2011-06-20" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::Schema::Instance \- Represents one schema
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Used internally by XML::Compile::Schema
\& my $schema = XML::Compile::Schema::Instance\->new($xml);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module collect information from one schema, and helps to
process it.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBnew\fR(\s-1TOP\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnew\fR(\s-1TOP\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->new(TOP, OPTIONS)"
Get's the top of an XML::LibXML tree, which must be a schema element.
The tree is parsed: the information collected.
.Sp
.Vb 6
\& \-Option                \-\-Default
\&  attribute_form_default  <undef>
\&  element_form_default    <undef>
\&  filename                undef
\&  source                  undef
\&  target_namespace        <undef>
.Ve
.RS 4
.IP "attribute_form_default => 'qualified'|'unqualified'" 2
.IX Item "attribute_form_default => 'qualified'|'unqualified'"
.PD 0
.IP "element_form_default => 'qualified'|'unqualified'" 2
.IX Item "element_form_default => 'qualified'|'unqualified'"
.PD
Overrule the default as found in the schema.  Many old schemas (like
\&\s-1WSDL11\s0 and \s-1SOAP11\s0) do not specify the default in the schema but only
in the text.
.IP "filename => \s-1FILENAME\s0" 2
.IX Item "filename => FILENAME"
When the source is some file, this is its name.
.IP "source => \s-1STRING\s0" 2
.IX Item "source => STRING"
An indication where this information came from.
.IP "target_namespace => \s-1NAMESPACE\s0" 2
.IX Item "target_namespace => NAMESPACE"
Overrule or set the target namespace.
.RE
.RS 4
.RE
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBattributeGroups\fR" 4
.el .IP "\f(CW$obj\fR\->\fBattributeGroups\fR" 4
.IX Item "$obj->attributeGroups"
Returns a list of all defined attribute groups.
.ie n .IP "$obj\->\fBattributes\fR" 4
.el .IP "\f(CW$obj\fR\->\fBattributes\fR" 4
.IX Item "$obj->attributes"
Returns a lost of all globally defined attribute names.
.ie n .IP "$obj\->\fBcomplexTypes\fR" 4
.el .IP "\f(CW$obj\fR\->\fBcomplexTypes\fR" 4
.IX Item "$obj->complexTypes"
Returns a list with all complexType names.
.ie n .IP "$obj\->\fBelement\fR(\s-1URI\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBelement\fR(\s-1URI\s0)" 4
.IX Item "$obj->element(URI)"
Returns one global element definition.
.ie n .IP "$obj\->\fBelements\fR" 4
.el .IP "\f(CW$obj\fR\->\fBelements\fR" 4
.IX Item "$obj->elements"
Returns a list of all globally defined element names.
.ie n .IP "$obj\->\fBfilename\fR" 4
.el .IP "\f(CW$obj\fR\->\fBfilename\fR" 4
.IX Item "$obj->filename"
.PD 0
.ie n .IP "$obj\->\fBgroups\fR" 4
.el .IP "\f(CW$obj\fR\->\fBgroups\fR" 4
.IX Item "$obj->groups"
.PD
Returns a list of all defined model groups.
.ie n .IP "$obj\->\fBschema\fR" 4
.el .IP "\f(CW$obj\fR\->\fBschema\fR" 4
.IX Item "$obj->schema"
.PD 0
.ie n .IP "$obj\->\fBschemaInstance\fR" 4
.el .IP "\f(CW$obj\fR\->\fBschemaInstance\fR" 4
.IX Item "$obj->schemaInstance"
.ie n .IP "$obj\->\fBschemaNamespace\fR" 4
.el .IP "\f(CW$obj\fR\->\fBschemaNamespace\fR" 4
.IX Item "$obj->schemaNamespace"
.ie n .IP "$obj\->\fBsgs\fR" 4
.el .IP "\f(CW$obj\fR\->\fBsgs\fR" 4
.IX Item "$obj->sgs"
.PD
Returns a \s-1HASH\s0 with the base-type as key and an \s-1ARRAY\s0 of types
which extend it.
.ie n .IP "$obj\->\fBsimpleTypes\fR" 4
.el .IP "\f(CW$obj\fR\->\fBsimpleTypes\fR" 4
.IX Item "$obj->simpleTypes"
Returns a list with all simpleType names.
.ie n .IP "$obj\->\fBsource\fR" 4
.el .IP "\f(CW$obj\fR\->\fBsource\fR" 4
.IX Item "$obj->source"
.PD 0
.ie n .IP "$obj\->\fBtargetNamespace\fR" 4
.el .IP "\f(CW$obj\fR\->\fBtargetNamespace\fR" 4
.IX Item "$obj->targetNamespace"
.ie n .IP "$obj\->\fBtnses\fR" 4
.el .IP "\f(CW$obj\fR\->\fBtnses\fR" 4
.IX Item "$obj->tnses"
.PD
A schema can defined more than one target namespace, where recent
schema spec changes provide a targetNamespace attribute.
.ie n .IP "$obj\->\fBtype\fR(\s-1URI\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR(\s-1URI\s0)" 4
.IX Item "$obj->type(URI)"
Returns the type definition with the specified name.
.ie n .IP "$obj\->\fBtypes\fR" 4
.el .IP "\f(CW$obj\fR\->\fBtypes\fR" 4
.IX Item "$obj->types"
Returns a list of all simpleTypes and complexTypes
.SS "Index"
.IX Subsection "Index"
.ie n .IP "$obj\->\fBfind\fR(\s-1KIND\s0, \s-1FULLNAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(\s-1KIND\s0, \s-1FULLNAME\s0)" 4
.IX Item "$obj->find(KIND, FULLNAME)"
Returns the definition for the object of \s-1KIND\s0, with \s-1FULLNAME\s0.
.Sp
example: of find
.Sp
.Vb 1
\&  my $attr = $instance\->find(attribute => \*(Aq{myns}my_global_attr\*(Aq);
.Ve
.ie n .IP "$obj\->\fBimportLocations\fR(\s-1NAMESPACE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBimportLocations\fR(\s-1NAMESPACE\s0)" 4
.IX Item "$obj->importLocations(NAMESPACE)"
Returns a list of all schemaLocations specified with the import \s-1NAMESPACE\s0
(one of the values returned by \fIimports()\fR).
.ie n .IP "$obj\->\fBimports\fR" 4
.el .IP "\f(CW$obj\fR\->\fBimports\fR" 4
.IX Item "$obj->imports"
Returns a list with all namespaces which need to be imported.
.ie n .IP "$obj\->\fBincludeLocations\fR" 4
.el .IP "\f(CW$obj\fR\->\fBincludeLocations\fR" 4
.IX Item "$obj->includeLocations"
Returns a list of all schemaLocations which where specified with include
statements.
.ie n .IP "$obj\->\fBprintIndex\fR([\s-1FILEHANDLE\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprintIndex\fR([\s-1FILEHANDLE\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->printIndex([FILEHANDLE], OPTIONS)"
Prints an overview over the defined objects within this schema to the
selected \s-1FILEHANDLE\s0.
.Sp
.Vb 3
\& \-Option       \-\-Default
\&  kinds          <all>
\&  list_abstract  <true>
.Ve
.RS 4
.IP "kinds => KIND|ARRAY\-of\-KIND" 2
.IX Item "kinds => KIND|ARRAY-of-KIND"
Which \s-1KIND\s0 of definitions would you like to see.  Pick from
\&\f(CW\*(C`element\*(C'\fR, \f(CW\*(C`attribute\*(C'\fR, \f(CW\*(C`simpleType\*(C'\fR, \f(CW\*(C`complexType\*(C'\fR, \f(CW\*(C`attributeGroup\*(C'\fR,
and \f(CW\*(C`group\*(C'\fR.
.IP "list_abstract => \s-1BOOLEAN\s0" 2
.IX Item "list_abstract => BOOLEAN"
Show abstract elements, or skip them (because they cannot be instantiated
anyway).
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile distribution version 1.22,
built on June 20, 2011. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Other distributions in this suite:
XML::Compile,
XML::Compile::SOAP,
XML::Compile::SOAP12,
XML::Compile::SOAP::Daemon,
XML::Compile::SOAP::WSA,
XML::Compile::C14N,
XML::Compile::WSS,
XML::Compile::Tester,
XML::Compile::Cache,
XML::Compile::Dumper,
XML::Compile::RPC,
XML::Rewrite,
XML::eXistDB,
and
XML::LibXML::Simple.
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2006\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
