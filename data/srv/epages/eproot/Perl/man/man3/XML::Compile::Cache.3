.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::Cache 3"
.TH XML::Compile::Cache 3 "2011-05-06" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::Cache \- Cache compiled XML translators
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& XML::Compile::Cache
\&   is a XML::Compile::Schema
\&   is a XML::Compile
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& my $cache = XML::Compile::Cache\->new(...);
\&
\& $cache\->declare(\*(AqREADER\*(Aq,  $type,  @options);
\& $cache\->declare(RW     => \e@types, @options);
\& $cache\->declare(WRITER =>  $type, \e@options);
\&
\& $cache\->compileAll;
\& $cache\->compileAll(\*(AqRW\*(Aq);
\&
\& # get the cached code ref for the reader
\& my $reader = $cache\->reader($type, @opts);
\& use Data::Dumper;
\& print Dumper $reader\->($xml);
\&
\& # get the cached code ref for the writer, and use it
\& my $doc = XML::LibXML::Document\->new(\*(Aq1.0\*(Aq, \*(AqUTF\-8\*(Aq);
\& my $xml = $cache\->writer($type)\->($doc, $perl);
\& print $xml\->toString(1);
\&
\& # use the base\-class uncached, the XML::Compile::Schema
\& my $do = $cache\->compile(READER => $type, @opts);
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "XML::Compile::Cache\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "XML::Compile::Cache->new(OPTIONS)"
.Vb 10
\& \-Option            \-\-Defined in     \-\-Default
\&  allow_undeclared                     <false>
\&  any_element                          \*(AqSKIP_ALL\*(Aq
\&  block_namespace     XML::Compile::Schema  []
\&  hook                XML::Compile::Schema  undef
\&  hooks               XML::Compile::Schema  []
\&  ignore_unused_tags  XML::Compile::Schema  <false>
\&  key_rewrite         XML::Compile::Schema  []
\&  opts_readers                         []
\&  opts_rw                              []
\&  opts_writers                         []
\&  prefixes                             <smart>
\&  schema_dirs         XML::Compile     undef
\&  typemap                              {}
\&  xsi_type                             {}
.Ve
.RS 4
.IP "allow_undeclared => \s-1BOOLEAN\s0" 2
.IX Item "allow_undeclared => BOOLEAN"
When true, you may call the reader or writer with types which were
not registered with \fIdeclare()\fR.  In that case, the reader or
writer may also get options passed for the compiler, as long as
they are consistent over each use of the type.
.IP "any_element => CODE|'\s-1TAKE_ALL\s0'|'\s-1SKIP_ALL\s0'|'\s-1ATTEMPT\s0'|'\s-1SLOPPY\s0'" 2
.IX Item "any_element => CODE|'TAKE_ALL'|'SKIP_ALL'|'ATTEMPT'|'SLOPPY'"
See \fIanyElement()\fR.
.IP "block_namespace => NAMESPACE|TYPE|HASH|CODE|ARRAY" 2
.IX Item "block_namespace => NAMESPACE|TYPE|HASH|CODE|ARRAY"
.PD 0
.IP "hook => ARRAY-WITH-HOOKDATA | \s-1HOOK\s0" 2
.IX Item "hook => ARRAY-WITH-HOOKDATA | HOOK"
.IP "hooks => ARRAY-OF-HOOK" 2
.IX Item "hooks => ARRAY-OF-HOOK"
.IP "ignore_unused_tags => BOOLEAN|REGEXP" 2
.IX Item "ignore_unused_tags => BOOLEAN|REGEXP"
.IP "key_rewrite => HASH|CODE|ARRAY\-of\-HASH\-and\-CODE" 2
.IX Item "key_rewrite => HASH|CODE|ARRAY-of-HASH-and-CODE"
.IP "opts_readers => HASH|ARRAY\-of\-PAIRS" 2
.IX Item "opts_readers => HASH|ARRAY-of-PAIRS"
.IP "opts_rw => HASH|ARRAY\-of\-PAIRS" 2
.IX Item "opts_rw => HASH|ARRAY-of-PAIRS"
.PD
Options added to both READERs and \s-1WRITERS\s0.  Options which are passed
with \fIdeclare()\fR and \f(CW\*(C`opts_readers\*(C'\fR or \f(CW\*(C`opts_writers\*(C'\fR will overrule
these.  See \fIaddCompileOptions()\fR.
.IP "opts_writers => HASH|ARRAY\-of\-PAIRS" 2
.IX Item "opts_writers => HASH|ARRAY-of-PAIRS"
.PD 0
.IP "prefixes => HASH|ARRAY\-of\-PAIRS" 2
.IX Item "prefixes => HASH|ARRAY-of-PAIRS"
.PD
Define prefix name to name-space mappings.  Passed to compile(prefixes)
for each reader and writer, but also used to permit \fIfindName()\fR to
accept types which use a prefix.
.Sp
Specify an \s-1ARRAY\s0 of (prefix, name-space) pairs, or a \s-1HASH\s0 which maps
name-spaces to prefixes (\s-1HASH\s0 order is reversed from \s-1ARRAY\s0 order!)  When
you wish to collect the results, like usage counts, of the translation
processing, you will need to specify a \s-1HASH\s0.
.Sp
.Vb 2
\& prefixes => [ mine => $myns, your => $yourns ]
\& prefixes => { $myns => \*(Aqmine\*(Aq, $yourns => \*(Aqyour\*(Aq }
\&
\& # the previous is short for:
\& prefixes => { $myns => [ uri => $myns, prefix => \*(Aqmine\*(Aq, used => 0 ]
\&             , $yourns => [ uri => $yourns, prefix => \*(Aqyour\*(Aq, ...] }
.Ve
.IP "schema_dirs => DIRECTORY|ARRAY\-OF\-DIRECTORIES" 2
.IX Item "schema_dirs => DIRECTORY|ARRAY-OF-DIRECTORIES"
.PD 0
.IP "typemap => HASH|ARRAY" 2
.IX Item "typemap => HASH|ARRAY"
.IP "xsi_type => HASH|ARRAY" 2
.IX Item "xsi_type => HASH|ARRAY"
.RE
.RS 4
.RE
.PD
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBaddCompileOptions\fR(['\s-1READERS\s0'|'\s-1WRITERS\s0'|'\s-1RW\s0'], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddCompileOptions\fR(['\s-1READERS\s0'|'\s-1WRITERS\s0'|'\s-1RW\s0'], \s-1OPTIONS\s0)" 4
.IX Item "$obj->addCompileOptions(['READERS'|'WRITERS'|'RW'], OPTIONS)"
[0.99] You may provide global compile options with new(opts_rw),
\&\f(CW\*(C`opts_readers\*(C'\fR and \f(CW\*(C`opts_writers\*(C'\fR, but also later using this method.
.ie n .IP "$obj\->\fBaddHook\fR(HOOKDATA|HOOK|undef)" 4
.el .IP "\f(CW$obj\fR\->\fBaddHook\fR(HOOKDATA|HOOK|undef)" 4
.IX Item "$obj->addHook(HOOKDATA|HOOK|undef)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddHooks\fR(\s-1HOOK\s0, [\s-1HOOK\s0, ...])" 4
.el .IP "\f(CW$obj\fR\->\fBaddHooks\fR(\s-1HOOK\s0, [\s-1HOOK\s0, ...])" 4
.IX Item "$obj->addHooks(HOOK, [HOOK, ...])"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddKeyRewrite\fR(PREDEF|CODE|HASH, ...)" 4
.el .IP "\f(CW$obj\fR\->\fBaddKeyRewrite\fR(PREDEF|CODE|HASH, ...)" 4
.IX Item "$obj->addKeyRewrite(PREDEF|CODE|HASH, ...)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddSchemaDirs\fR(DIRECTORIES|FILENAME)" 4
.el .IP "\f(CW$obj\fR\->\fBaddSchemaDirs\fR(DIRECTORIES|FILENAME)" 4
.IX Item "$obj->addSchemaDirs(DIRECTORIES|FILENAME)"
.PD 0
.IP "XML::Compile::Cache\->\fBaddSchemaDirs\fR(DIRECTORIES|FILENAME)" 4
.IX Item "XML::Compile::Cache->addSchemaDirs(DIRECTORIES|FILENAME)"
.PD
See \*(L"Accessors\*(R" in XML::Compile
.ie n .IP "$obj\->\fBaddSchemas\fR(\s-1XML\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddSchemas\fR(\s-1XML\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->addSchemas(XML, OPTIONS)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddTypemap\fR(\s-1PAIR\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddTypemap\fR(\s-1PAIR\s0)" 4
.IX Item "$obj->addTypemap(PAIR)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBaddTypemaps\fR(\s-1PAIRS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddTypemaps\fR(\s-1PAIRS\s0)" 4
.IX Item "$obj->addTypemaps(PAIRS)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBallowUndeclared\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBallowUndeclared\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->allowUndeclared([BOOLEAN])"
Whether it is permitted to create readers and writers which are not
declared cleanly.
.ie n .IP "$obj\->\fBanyElement\fR('\s-1ATTEMPT\s0'|'\s-1SLOPPY\s0'|'\s-1SKIP_ALL\s0'|'\s-1TAKE_ALL\s0'|CODE)" 4
.el .IP "\f(CW$obj\fR\->\fBanyElement\fR('\s-1ATTEMPT\s0'|'\s-1SLOPPY\s0'|'\s-1SKIP_ALL\s0'|'\s-1TAKE_ALL\s0'|CODE)" 4
.IX Item "$obj->anyElement('ATTEMPT'|'SLOPPY'|'SKIP_ALL'|'TAKE_ALL'|CODE)"
[as method since 0.99] How to process \s-1ANY\s0 elements, see also
new(any_element).
.Sp
Reader: \f(CW\*(C`ATTEMPT\*(C'\fR will convert all any elements, applying the reader for
each element found. When an element is not found in a schema, it will
be included as XML::LibXML::Element node.
.Sp
[0.93] Reader: With \f(CW\*(C`SLOPPY\*(C'\fR, first automatic typed conversion is
attempted. But is the type is not known, XML::LibXML::Simple subroutine XMLin
is called to the resque.
.ie n .IP "$obj\->\fBblockNamespace\fR(NAMESPACE|TYPE|HASH|CODE|ARRAY)" 4
.el .IP "\f(CW$obj\fR\->\fBblockNamespace\fR(NAMESPACE|TYPE|HASH|CODE|ARRAY)" 4
.IX Item "$obj->blockNamespace(NAMESPACE|TYPE|HASH|CODE|ARRAY)"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBhooks\fR" 4
.el .IP "\f(CW$obj\fR\->\fBhooks\fR" 4
.IX Item "$obj->hooks"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBprefix\fR(\s-1PREFIX\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprefix\fR(\s-1PREFIX\s0)" 4
.IX Item "$obj->prefix(PREFIX)"
Lookup a prefix definition.  This returns a \s-1HASH\s0 with namespace info.
.ie n .IP "$obj\->\fBprefixFor\fR(\s-1URI\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprefixFor\fR(\s-1URI\s0)" 4
.IX Item "$obj->prefixFor(URI)"
Lookup the preferred prefix for the \s-1URI\s0.
.ie n .IP "$obj\->\fBprefixed\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprefixed\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->prefixed(TYPE)"
Translate the fully qualified \s-1TYPE\s0 into a prefixed version.  Will produce
undef if the namespace is unknown.
.Sp
example:
.Sp
.Vb 1
\&   print $schema\->prefixed($type} || $type;
.Ve
.ie n .IP "$obj\->\fBprefixes\fR([PAIRS|ARRAY|HASH])" 4
.el .IP "\f(CW$obj\fR\->\fBprefixes\fR([PAIRS|ARRAY|HASH])" 4
.IX Item "$obj->prefixes([PAIRS|ARRAY|HASH])"
Returns the \s-1HASH\s0 with prefix to name-space translations.  You should not
modify the returned \s-1HASH\s0.  New \s-1PAIRS\s0 of prefix to namespace relations
can be passed.
.Sp
[0.14]
If a name-space appears for the second time, then the new prefix will be
recognized by \fIfindName()\fR, but not used in the output.  When the prefix
already exists for a different namespace, then an error will be casted.
.Sp
[0.90]
You may also provide an \s-1ARRAY\s0 of pairs or a \s-1HASH\s0.
.ie n .IP "$obj\->\fBtypemap\fR([HASH|ARRAY|PAIRS])" 4
.el .IP "\f(CW$obj\fR\->\fBtypemap\fR([HASH|ARRAY|PAIRS])" 4
.IX Item "$obj->typemap([HASH|ARRAY|PAIRS])"
[0.98] Add global knowledge on typemaps.  Returns the typemap.
.ie n .IP "$obj\->\fBuseSchema\fR(\s-1SCHEMA\s0, [\s-1SCHEMA\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBuseSchema\fR(\s-1SCHEMA\s0, [\s-1SCHEMA\s0])" 4
.IX Item "$obj->useSchema(SCHEMA, [SCHEMA])"
See \*(L"Accessors\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBxsiType\fR([HASH|ARRAY|LIST])" 4
.el .IP "\f(CW$obj\fR\->\fBxsiType\fR([HASH|ARRAY|LIST])" 4
.IX Item "$obj->xsiType([HASH|ARRAY|LIST])"
[0.98] add global xsi_type declarations.  Returns the xsiType set.
.SS "Compilers"
.IX Subsection "Compilers"
.ie n .IP "$obj\->\fBcompile\fR(('\s-1READER\s0'|'\s-1WRITER\s0'), \s-1TYPE\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompile\fR(('\s-1READER\s0'|'\s-1WRITER\s0'), \s-1TYPE\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->compile(('READER'|'WRITER'), TYPE, OPTIONS)"
See \*(L"Compilers\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBcompileAll\fR(['\s-1READERS\s0'|'\s-1WRITERS\s0'|'\s-1RW\s0', [\s-1NAMESPACE\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBcompileAll\fR(['\s-1READERS\s0'|'\s-1WRITERS\s0'|'\s-1RW\s0', [\s-1NAMESPACE\s0]])" 4
.IX Item "$obj->compileAll(['READERS'|'WRITERS'|'RW', [NAMESPACE]])"
Compile all the declared readers and writers with the default '\s-1RW\s0').  You may
also select to pre-compile only the \s-1READERS\s0 or only the \s-1WRITERS\s0.  The
selection can be limited further by specifying a \s-1NAMESPACE\s0.
.Sp
By default, the processors are only compiled when used.  This method is
especially useful in a daemon process, where preparations can take as
much time as they want to... and running should be as fast as possible.
.IP "XML::Compile::Cache\->\fBdataToXML\fR(NODE|REF\-XML\-STRING|XML\-STRING|FILENAME|FILEHANDLE|KNOWN)" 4
.IX Item "XML::Compile::Cache->dataToXML(NODE|REF-XML-STRING|XML-STRING|FILENAME|FILEHANDLE|KNOWN)"
See \*(L"Compilers\*(R" in XML::Compile
.ie n .IP "$obj\->\fBreader\fR(TYPE|NAME, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreader\fR(TYPE|NAME, \s-1OPTIONS\s0)" 4
.IX Item "$obj->reader(TYPE|NAME, OPTIONS)"
Returns the reader \s-1CODE\s0 for the \s-1TYPE\s0 or \s-1NAME\s0 (see \fIfindName()\fR).
\&\s-1OPTIONS\s0 are only permitted if new(allow_undeclared) is true, and the
same as the previous call to this method.
.Sp
The reader will be compiled the first time that it is used, and that
same \s-1CODE\s0 reference will be returned each next request for the same
\&\s-1TYPE\s0.  Call \fIcompileAll()\fR to have all readers compiled by force.
.Sp
example:
.Sp
.Vb 3
\&  my $schema = XML::Compile::Cache\->new(\e@xsd,
\&     prefixes => [ gml => $GML_NAMESPACE ] );
\&  my $data   = $schema\->reader(\*(Aqgml:members\*(Aq)\->($xml);
\&
\&  my $getmem = $schema\->reader(\*(Aqgml:members\*(Aq);
\&  my $data   = $getmem\->($xml);
.Ve
.ie n .IP "$obj\->\fBtemplate\fR('\s-1XML\s0'|'\s-1PERL\s0', \s-1ELEMENT\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtemplate\fR('\s-1XML\s0'|'\s-1PERL\s0', \s-1ELEMENT\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->template('XML'|'PERL', ELEMENT, OPTIONS)"
See \*(L"Compilers\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBwriter\fR(TYPE|NAME)" 4
.el .IP "\f(CW$obj\fR\->\fBwriter\fR(TYPE|NAME)" 4
.IX Item "$obj->writer(TYPE|NAME)"
Returns the writer \s-1CODE\s0 for the \s-1TYPE\s0 or \s-1NAME\s0 (see \fIfindName()\fR).
\&\s-1OPTIONS\s0 are only permitted if new(allow_undeclared) is true, and the
same as the previous call to this method.
.Sp
The writer will be compiled the first time that it is used, and that
same \s-1CODE\s0 reference will be returned each next request for the same
type.
.Sp
example:
.Sp
.Vb 1
\&  my $xml = $cache\->writer(\*(Aqgml:members\*(Aq)\->($doc, $data);
\&
\&  my $doc = XML::LibXML::Document\->new(\*(Aq1.0\*(Aq, \*(AqUTF\-8\*(Aq);
\&  my $wr  = $cache\->writer(\*(Aqgml:members\*(Aq);
\&  my $xml = $wr\->($doc, $data);
\&  $doc\->setDocumentElement($xml);
\&  print $doc\->toString(1);
.Ve
.SS "Administration"
.IX Subsection "Administration"
.ie n .IP "$obj\->\fBdeclare\fR('\s-1READER\s0'|'\s-1WRITER\s0'|'\s-1RW\s0', TYPE|ARRAY\-of\-TYPES, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdeclare\fR('\s-1READER\s0'|'\s-1WRITER\s0'|'\s-1RW\s0', TYPE|ARRAY\-of\-TYPES, \s-1OPTIONS\s0)" 4
.IX Item "$obj->declare('READER'|'WRITER'|'RW', TYPE|ARRAY-of-TYPES, OPTIONS)"
Register that the indicated \s-1TYPE\s0 (or \s-1TYPES\s0) may be used, and needs to
be translated with the \s-1OPTIONS\s0 (either specified as \s-1ARRAY\s0 or \s-1LIST\s0).
Specify whether it may get used as \s-1READER\s0, \s-1WRITER\s0, or both (\s-1RW\s0).  If the
\&\s-1READER\s0 and \s-1WRITER\s0 need different options, then you need to declare them
seperately; in that case you cannot use \s-1RW\s0.
.Sp
The \s-1TYPE\s0 should be understood by \fIfindName()\fR, so may be prefixed.
.Sp
example:
.Sp
.Vb 2
\&  $cache\->declare(READER => \*(Aqpref:count\*(Aq, sloppy_integers => 1)
\&        \->declare(RW     => \*(Aq{myns}mylocal\*(Aq);
\&
\&  $cache\->declare(WRITER => [ \*(Aqxsd:int\*(Aq, \*(Aq{http://}aap\*(Aq ]);
.Ve
.ie n .IP "$obj\->\fBdoesExtend\fR(\s-1EXTTYPE\s0, \s-1BASETYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdoesExtend\fR(\s-1EXTTYPE\s0, \s-1BASETYPE\s0)" 4
.IX Item "$obj->doesExtend(EXTTYPE, BASETYPE)"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBelements\fR" 4
.el .IP "\f(CW$obj\fR\->\fBelements\fR" 4
.IX Item "$obj->elements"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBfindName\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfindName\fR(\s-1NAME\s0)" 4
.IX Item "$obj->findName(NAME)"
Translate the \s-1NAME\s0 specification into a schema defined full type.
The \s-1NAME\s0 can be a full type (like '{namespace}localname', usually
created with \fIXML::Compile::Util::pack_type()\fR) or a prefixed type
(like 'myns:localname', where \f(CW\*(C`myns\*(C'\fR is defined via new(prefixes)
or \fIprefixes()\fR).
.Sp
When the form is 'myns:' (so without local name), the namespace uri is
returned.
.Sp
example: of \fIfindName()\fR
.Sp
.Vb 1
\&  $schema\->prefixes(pre => \*(Aqhttp://namespace\*(Aq);
\&
\&  my $type = $schema\->findName(\*(Aqpre:name\*(Aq);
\&  print $type;   # {http://namespace}name
\&
\&  my $ns   = $schema\->findName(\*(Aqpre:\*(Aq);
\&  print $ns;     # http://namespace
\&
\&  my $type = $schema\->findName(\*(Aq{somens}name\*(Aq);
\&  print $type;   # {somens}name    [a no\-op]
.Ve
.ie n .IP "$obj\->\fBfindSchemaFile\fR(\s-1FILENAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfindSchemaFile\fR(\s-1FILENAME\s0)" 4
.IX Item "$obj->findSchemaFile(FILENAME)"
.PD 0
.IP "XML::Compile::Cache\->\fBfindSchemaFile\fR(\s-1FILENAME\s0)" 4
.IX Item "XML::Compile::Cache->findSchemaFile(FILENAME)"
.PD
See \*(L"Administration\*(R" in XML::Compile
.ie n .IP "$obj\->\fBimportDefinitions\fR(\s-1XMLDATA\s0, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBimportDefinitions\fR(\s-1XMLDATA\s0, \s-1OPTIONS\s0)" 4
.IX Item "$obj->importDefinitions(XMLDATA, OPTIONS)"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBknownNamespace\fR(NAMESPACE|PAIRS)" 4
.el .IP "\f(CW$obj\fR\->\fBknownNamespace\fR(NAMESPACE|PAIRS)" 4
.IX Item "$obj->knownNamespace(NAMESPACE|PAIRS)"
.PD 0
.IP "XML::Compile::Cache\->\fBknownNamespace\fR(NAMESPACE|PAIRS)" 4
.IX Item "XML::Compile::Cache->knownNamespace(NAMESPACE|PAIRS)"
.PD
See \*(L"Administration\*(R" in XML::Compile
.ie n .IP "$obj\->\fBnamespaces\fR" 4
.el .IP "\f(CW$obj\fR\->\fBnamespaces\fR" 4
.IX Item "$obj->namespaces"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBprintIndex\fR([\s-1FILEHANDLE\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprintIndex\fR([\s-1FILEHANDLE\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->printIndex([FILEHANDLE], OPTIONS)"
.Vb 2
\& \-Option       \-\-Default
\&  show_declared  <true>
.Ve
.RS 4
.IP "show_declared => \s-1BOOLEAN\s0" 2
.IX Item "show_declared => BOOLEAN"
Add an indicator to each line, about whether readers and writers are
declare for the type.  Declared readers and writers will show flags
\&\f(CW\*(C`r\*(C'\fR and \f(CW\*(C`w\*(C'\fR respectively.  Compiled readers and writers carry a
\&\f(CW\*(C`R\*(C'\fR and/or \f(CW\*(C`W\*(C'\fR.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBtypes\fR" 4
.el .IP "\f(CW$obj\fR\->\fBtypes\fR" 4
.IX Item "$obj->types"
See \*(L"Administration\*(R" in XML::Compile::Schema
.ie n .IP "$obj\->\fBwalkTree\fR(\s-1NODE\s0, \s-1CODE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwalkTree\fR(\s-1NODE\s0, \s-1CODE\s0)" 4
.IX Item "$obj->walkTree(NODE, CODE)"
See \*(L"Administration\*(R" in XML::Compile
.SH "DESCRIPTIONS"
.IX Header "DESCRIPTIONS"
\&\f(CW\*(C`XML::Compile::Cache\*(C'\fR is the smart brother of XML::Compile::Schema;
it keeps track of your compiled readers and writers, and also helps
you administer the parameters to handle compilation.  Besides, it
lat you use easy prefixes instead of full namespaces.
.PP
With \fIXML::Compile::Schema::compile()\fR (defined in the \s-1SUPER\s0 class of
this module) you can construct translators from \s-1XML\s0 to Perl and back.
These translators are code references, which are \*(L"expensive\*(R" to create,
but \*(L"cheap\*(R" in use; call them as often as you want.  This module helps
you administer them.
.PP
When the schemas grow larger, it gets harder to see which code reference
have already be created and which not. And, these code references need
compile options which you do not want to distribute over your whole
program.  Finally, in a daemon application, you do not want to create
the translators when used (which can be in every client again), but once
during the initiation of the daemon.
.PP
One of the most important contributions to the compile management, is
the addition of smart prefix handling. This means that you can use
prefixed names in stead of full types, often created with
\&\fIXML::Compile::Util::pack_type()\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-Cache distribution version 0.991,
built on May 06, 2011. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Other distributions in this suite:
XML::Compile,
XML::Compile::SOAP,
XML::Compile::SOAP12,
XML::Compile::SOAP::Daemon,
XML::Compile::SOAP::WSA,
XML::Compile::C14N,
XML::Compile::WSS,
XML::Compile::Tester,
XML::Compile::Cache,
XML::Compile::Dumper,
XML::Compile::RPC,
XML::Rewrite,
XML::eXistDB,
and
XML::LibXML::Simple.
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2008\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
