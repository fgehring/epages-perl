.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::SAX::Pipeline 3"
.TH XML::SAX::Pipeline 3 "2009-06-11" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::SAX::Pipeline \- Manage a linear pipeline of SAX processors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use XML::SAX::Machines qw( Pipeline );   ## Most common way
\&    use XML::Fitler::Foo;
\&
\&    my $m = Pipeline(
\&        XML::Filter::Foo\->new,  ## Create it manually
\&        "XML::Filter::Bar",     ## Or let Pipeline load & create it
\&        "XML::Filter::Baz",
\&        {
\&            ## Normal options
\&            Handler => $h,
\&        }
\&    );
\&
\&    ## To choose the default parser automatically if XML::Filter::Foo
\&    ## does not implement a parse_file method, just pretend the Pipeline
\&    ## is a parser:
\&    $m\->parse_file( "blah" );
\&
\&    ## To feed the pipeline from an upstream processor, treat it like
\&    ## any other SAX filter:
\&    my $p = Some::SAX::Generator\->new( Handler => $m );
\&
\&    ## To read a file or the output from a subprocess:
\&    my $m = Pipeline( "<infile.txt" );
\&    my $m = Pipeline( "spew_xml |" );
\&
\&    ## To send output to a file handle, file, or process:
\&    my $m = Pipeline( ...,  \e*STDOUT );
\&    my $m = Pipeline( ..., ">outfile.txt" );
\&    my $m = Pipeline( ..., "| xmllint \-\-format \-" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An XML::SAX::Pipeline is a linear sequence \s-1SAX\s0 processors.  Events
passed to the pipeline are received by the \f(CW\*(C`Intake\*(C'\fR end of the pipeline
and the last filter to process events in the pipeline passes the events
out the \f(CW\*(C`Exhaust\*(C'\fR to the filter set as the pipeline's handler:
.PP
.Vb 7
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&   |                 An XML:SAX::Pipeline                      |
\&   |    Intake                                                 |
\&   |   +\-\-\-\-\-\-\-\-\-+    +\-\-\-\-\-\-\-\-\-+         +\-\-\-\-\-\-\-\-\-+  Exhaust |
\& \-\-+\-\->| Stage_0 |\-\-\->| Stage_1 |\-\->...\-\->| Stage_N |\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\->
\&   |   +\-\-\-\-\-\-\-\-\-+    +\-\-\-\-\-\-\-\-\-+         +\-\-\-\-\-\-\-\-\-+          |
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
As with all \s-1SAX\s0 machines, a pipeline can also create an ad hoc parser
(using XML::SAX::ParserFactory) if you ask it to parse something and
the first \s-1SAX\s0 processer in the pipeline can't handle a parse request:
.PP
.Vb 7
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&   |                 An XML:SAX::Pipeline                  |
\&   |                 Intake                                |
\&   | +\-\-\-\-\-\-\-\-+   +\-\-\-\-\-\-\-\-\-+         +\-\-\-\-\-\-\-\-\-+  Exhaust |
\&   | | Parser |\-\->| Stage_0 |\-\->...\-\->| Stage_N |\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\->
\&   | +\-\-\-\-\-\-\-\-+   +\-\-\-\-\-\-\-\-\-+         +\-\-\-\-\-\-\-\-\-+          |
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
or if you specify an input file like so:
.PP
.Vb 5
\&   my $m = Pipeline(qw(
\&       <input_file.xml
\&       XML::Filter::Bar
\&       XML::Filter::Baz
\&   ));
.Ve
.PP
Pipelines (and machines) can also create ad hoc XML::SAX::Writer
instances when you specify an output file handle (as shown in the
\&\s-1SYNOPSIS\s0) or an output file:
.PP
.Vb 5
\&   my $m = Pipeline(qw(
\&       XML::Filter::Bar
\&       XML::Filter::Baz
\&       >output_file.xml
\&   ));
.Ve
.PP
And, thanks to Perl's magic open (see perlopentut), you can read
and write from processes:
.PP
.Vb 6
\&   my $m = Pipeline(
\&       "gen_xml.pl |",
\&       "XML::Filter::Bar",
\&       "XML::Filter::Baz",
\&       "| consume_xml.pl",
\&   );
.Ve
.PP
This can be used with an XML::SAX::Tap to place a handy debugging
tap in a pipeline (or other machine):
.PP
.Vb 7
\&   my $m = Pipeline(
\&       "<input_file.xml"
\&       "XML::Filter::Bar",
\&       Tap( "| xmllint \-\-format \-" ),
\&       "XML::Filter::Baz",
\&       ">output_file.xml",
\&   );
.Ve
.SH "METHODS"
.IX Header "METHODS"
See XML::SAX::Machine for most of the methods.
.IP "new" 4
.IX Item "new"
.Vb 1
\&    my $pipeline = XML::SAX::Pipeline\->new( @processors, \e%options );
.Ve
.Sp
Creates a pipeline and links all of the given processors together.  Longhand
for \fIPipeline()\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&    Barrie Slaymaker <barries@slaysys.com>
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&    Copyright 2002, Barrie Slaymaker, All Rights Reserved.
.Ve
.PP
You may use this module under the terms of the Artistic, \s-1GNU\s0 Public,
or \s-1BSD\s0 licenses, your choice.
