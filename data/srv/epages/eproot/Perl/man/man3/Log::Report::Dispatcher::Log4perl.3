.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Report::Dispatcher::Log4perl 3"
.TH Log::Report::Dispatcher::Log4perl 3 "2017-02-09" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Report::Dispatcher::Log4perl \- send messages to Log::Log4perl back\-end
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Log::Report::Dispatcher::Log4perl
\&   is a Log::Report::Dispatcher
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& # start using log4perl via a config file
\& # The name of the dispatcher is the name of the default category.
\& dispatcher LOG4PERL => \*(Aqlogger\*(Aq
\&   , accept => \*(AqNOTICE\-\*(Aq
\&   , config => "$ENV{HOME}/.log.conf";
\&
\& # disable default dispatcher
\& dispatcher close => \*(Aqlogger\*(Aq;
\&
\& # configuration inline, not in file: adapted from the Log4perl manpage
\& my $name    = \*(Aqlogger\*(Aq;
\& my $outfile = \*(Aq/tmp/a.log\*(Aq;
\& my $config  = <<_\|_CONFIG;
\& log4perl.category.$name            = INFO, Logfile
\& log4perl.logger.Logfile          = Log::Log4perl::Appender::File
\& log4perl.logger.Logfile.filename = $outfn
\& log4perl.logger.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
\& log4perl.logger.Logfile.layout.ConversionPattern = %d %F{1} %L> %m
\& _\|_CONFIG
\&
\& dispatcher LOG4PERL => $name, config => \e$config;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This dispatchers produces output tot syslog, based on the \f(CW\*(C`Sys::Log4perl\*(C'\fR
module (which will not be automatically installed for you).
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Log::Report::Dispatcher.
.SS "Reasons <\-\-> Levels"
.IX Subsection "Reasons <--> Levels"
The REASONs for a message in Log::Report are names quite similar to
the log levels used by Log::Log4perl.  The default mapping is list
below.  You can change the mapping using new(to_level).
.PP
.Vb 6
\&  TRACE   => $DEBUG    ERROR   => $ERROR
\&  ASSERT  => $DEBUG    FAULT   => $ERROR
\&  INFO    => $INFO     ALERT   => $FATAL
\&  NOTICE  => $INFO     FAILURE => $FATAL
\&  WARNING => $WARN     PANIC   => $FATAL
\&  MISTAKE => $WARN
.Ve
.SS "Categories"
.IX Subsection "Categories"
\&\f(CW\*(C`Log::Report\*(C'\fR uses text-domains for translation tables.  These are
also used as categories for the Log4perl infrastructure.  So, typically
every module start with:
.PP
.Vb 1
\&   use Log::Report \*(Aqmy\-text\-domain\*(Aq, %more_options;
.Ve
.PP
Now, if there is a logger inside the log4perl configuration which is
named 'my\-text\-domain', that will be used.  Otherwise, the name of the
dispatcher is used to select the logger.
.PP
\fILimitiations\fR
.IX Subsection "Limitiations"
.PP
The global \f(CW$caller_depth\fR concept of Log::Log4perl is broken.
That variable is used to find the filename and line number of the logged
messages.  But these messages may have been caught, rerouted, eval'ed, and
otherwise followed a unpredictable multi-leveled path before it reached
the Log::Log4perl dispatcher.  This means that layout patterns \f(CW%F\fR
and \f(CW%L\fR are not useful in the generic case, maybe in your specific case.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Log::Report::Dispatcher.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Log::Report::Dispatcher.
.ie n .IP "$obj\->\fBclose\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR()" 4
.IX Item "$obj->close()"
Inherited, see \*(L"Constructors\*(R" in Log::Report::Dispatcher
.ie n .IP "Log::Report::Dispatcher::Log4perl\->\fBnew\fR($type, $name, %options)" 4
.el .IP "Log::Report::Dispatcher::Log4perl\->\fBnew\fR($type, \f(CW$name\fR, \f(CW%options\fR)" 4
.IX Item "Log::Report::Dispatcher::Log4perl->new($type, $name, %options)"
The Log::Log4perl infrastructure has all settings in a configuration
file.  In that file, you should find a category with the \f(CW$name\fR.
.Sp
.Vb 8
\& \-Option       \-\-Defined in             \-\-Default
\&  accept         Log::Report::Dispatcher  \*(AqALL\*(Aq
\&  charset        Log::Report::Dispatcher  <undef>
\&  config                                  <required>
\&  format_reason  Log::Report::Dispatcher  \*(AqLOWERCASE\*(Aq
\&  locale         Log::Report::Dispatcher  <system locale>
\&  mode           Log::Report::Dispatcher  \*(AqNORMAL\*(Aq
\&  to_level                                []
.Ve
.RS 4
.IP "accept => \s-1REASONS\s0" 2
.IX Item "accept => REASONS"
.PD 0
.IP "charset => \s-1CHARSET\s0" 2
.IX Item "charset => CHARSET"
.IP "config => FILENAME|SCALAR" 2
.IX Item "config => FILENAME|SCALAR"
.PD
When a \s-1SCALAR\s0 reference is passed in, that must refer to a string which
contains the configuration text.  Otherwise, specify an existing \s-1FILENAME\s0.
.IP "format_reason => '\s-1UPPERCASE\s0'|'\s-1LOWERCASE\s0'|'\s-1UCFIRST\s0'|'\s-1IGNORE\s0'|CODE" 2
.IX Item "format_reason => 'UPPERCASE'|'LOWERCASE'|'UCFIRST'|'IGNORE'|CODE"
.PD 0
.IP "locale => \s-1LOCALE\s0" 2
.IX Item "locale => LOCALE"
.IP "mode => '\s-1NORMAL\s0'|'\s-1VERBOSE\s0'|'\s-1ASSERT\s0'|'\s-1DEBUG\s0'|0..3" 2
.IX Item "mode => 'NORMAL'|'VERBOSE'|'ASSERT'|'DEBUG'|0..3"
.IP "to_level => ARRAY-of-PAIRS" 2
.IX Item "to_level => ARRAY-of-PAIRS"
.PD
See \fIreasonToLevel()\fR.
.RE
.RS 4
.RE
.SS "Accessors"
.IX Subsection "Accessors"
Extends \*(L"Accessors\*(R" in Log::Report::Dispatcher.
.ie n .IP "$obj\->\fBisDisabled\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDisabled\fR()" 4
.IX Item "$obj->isDisabled()"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBlogger\fR( [$domain] )" 4
.el .IP "\f(CW$obj\fR\->\fBlogger\fR( [$domain] )" 4
.IX Item "$obj->logger( [$domain] )"
Returns the Log::Log4perl::Logger object which is used for logging.
When there is no specific logger for this \f(CW$domain\fR (logger with the exact
name of the \f(CW$domain\fR) the default logger is being used, with the name of
this dispatcher.
.ie n .IP "$obj\->\fBmode\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmode\fR()" 4
.IX Item "$obj->mode()"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBneeds\fR( [$reason] )" 4
.el .IP "\f(CW$obj\fR\->\fBneeds\fR( [$reason] )" 4
.IX Item "$obj->needs( [$reason] )"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.SS "Logging"
.IX Subsection "Logging"
Extends \*(L"Logging\*(R" in Log::Report::Dispatcher.
.ie n .IP "$obj\->\fBaddSkipStack\fR(@CODE)" 4
.el .IP "\f(CW$obj\fR\->\fBaddSkipStack\fR(@CODE)" 4
.IX Item "$obj->addSkipStack(@CODE)"
.PD 0
.IP "Log::Report::Dispatcher::Log4perl\->\fBaddSkipStack\fR(@CODE)" 4
.IX Item "Log::Report::Dispatcher::Log4perl->addSkipStack(@CODE)"
.PD
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBcollectLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcollectLocation\fR()" 4
.IX Item "$obj->collectLocation()"
.PD 0
.IP "Log::Report::Dispatcher::Log4perl\->\fBcollectLocation\fR()" 4
.IX Item "Log::Report::Dispatcher::Log4perl->collectLocation()"
.PD
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBcollectStack\fR( [$maxdepth] )" 4
.el .IP "\f(CW$obj\fR\->\fBcollectStack\fR( [$maxdepth] )" 4
.IX Item "$obj->collectStack( [$maxdepth] )"
.PD 0
.IP "Log::Report::Dispatcher::Log4perl\->\fBcollectStack\fR( [$maxdepth] )" 4
.IX Item "Log::Report::Dispatcher::Log4perl->collectStack( [$maxdepth] )"
.PD
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBlog\fR(HASH\-$of\-%options, $reason, $message, $domain)" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR(HASH\-$of\-%options, \f(CW$reason\fR, \f(CW$message\fR, \f(CW$domain\fR)" 4
.IX Item "$obj->log(HASH-$of-%options, $reason, $message, $domain)"
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBreasonToLevel\fR($reason)" 4
.el .IP "\f(CW$obj\fR\->\fBreasonToLevel\fR($reason)" 4
.IX Item "$obj->reasonToLevel($reason)"
Returns a level which is understood by Log::Dispatch, based on
a translation table.  This can be changed with new(to_level).
.Sp
example:
.Sp
.Vb 1
\& use Log::Log4perl     qw/:levels/;
\&
\& # by default, ALERTs are output as $FATAL
\& dispatcher Log::Log4perl => \*(Aqlogger\*(Aq
\&   , to_level => [ ALERT => $ERROR, ]
\&   , ...;
.Ve
.ie n .IP "$obj\->\fBskipStack\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBskipStack\fR()" 4
.IX Item "$obj->skipStack()"
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBstackTraceLine\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBstackTraceLine\fR(%options)" 4
.IX Item "$obj->stackTraceLine(%options)"
.PD 0
.IP "Log::Report::Dispatcher::Log4perl\->\fBstackTraceLine\fR(%options)" 4
.IX Item "Log::Report::Dispatcher::Log4perl->stackTraceLine(%options)"
.PD
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBtranslate\fR(HASH\-$of\-%options, $reason, $message)" 4
.el .IP "\f(CW$obj\fR\->\fBtranslate\fR(HASH\-$of\-%options, \f(CW$reason\fR, \f(CW$message\fR)" 4
.IX Item "$obj->translate(HASH-$of-%options, $reason, $message)"
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\s0\*(R" in Log::Report::Dispatcher.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Log-Report distribution version 1.19,
built on February 09, 2017. Website: \fIhttp://perl.overmeer.net/log\-report/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2017 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
