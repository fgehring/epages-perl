.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Report::Dispatcher::Log4perl 3"
.TH Log::Report::Dispatcher::Log4perl 3 "2011-08-23" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Report::Dispatcher::Log4perl \- send messages to Log::Log4perl back\-end
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Log::Report::Dispatcher::Log4perl
\&   is a Log::Report::Dispatcher
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& dispatcher Log::Log4perl => \*(Aqlogger\*(Aq, accept => \*(AqNOTICE\-\*(Aq
\&   , config => "$ENV{HOME}/.log.conf"
\&   , to_level => [ \*(AqALERT\-\*(Aq => $ERROR ];
\&
\& # disable default dispatcher
\& dispatcher close => \*(Aqlogger\*(Aq;
\&
\& # configuration inline, not in file: adapted from the Log4perl manpage
\& my $name    = \*(Aqlogger\*(Aq;
\& my $outfile = \*(Aq/tmp/a.log\*(Aq;
\& my $config  = <<_\|_CONFIG;
\& log4perl.category.$name            = INFO, Logfile
\& log4perl.appender.Logfile          = Log::Log4perl::Appender::File
\& log4perl.appender.Logfile.filename = $outfn
\& log4perl.appender.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
\& log4perl.appender.Logfile.layout.ConversionPattern = %d %F{1} %L> %m
\& _\|_CONFIG
\&
\& dispatcher \*(AqLog::Log4perl\*(Aq => $name, config => \e$config;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This dispatchers produces output tot syslog, based on the \f(CW\*(C`Sys::Log4perl\*(C'\fR
module (which will not be automatically installed for you).
.PP
The \s-1REASON\s0 for a message often uses names which are quite similar to the
log-levels used by Log::Dispatch.  However: they have a different
approach.  The \s-1REASON\s0 of Log::Report limits the responsibility of the
programmer to indicate the cause of the message: whether it was able to
handle a certain situation.  The Log::Dispatch levels are there for the
user's of the program.  However: the programmer does not known anything
about the application (in the general case).  This is cause of much of
the trickery in Perl programs.
.PP
The default translation table is list below.  You can change the mapping
using new(to_level).  See example in \s-1SYNOPSIS\s0.
.PP
.Vb 6
\&  TRACE   => $DEBUG  ERROR   => $ERROR
\&  ASSERT  => $DEBUG  FAULT   => $ERROR
\&  INFO    => $INFO   ALERT   => $FATAL
\&  NOTICE  => $INFO   FAILURE => $FATAL
\&  WARNING => $WARN   PANIC   => $FATAL
\&  MISTAKE => $WARN
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBclose\fR" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR" 4
.IX Item "$obj->close"
See \*(L"Constructors\*(R" in Log::Report::Dispatcher
.IP "Log::Report::Dispatcher::Log4perl\->\fBnew\fR(\s-1TYPE\s0, \s-1NAME\s0, \s-1OPTIONS\s0)" 4
.IX Item "Log::Report::Dispatcher::Log4perl->new(TYPE, NAME, OPTIONS)"
The Log::Log4perl infrastructure has all information in a configuration
file.  In that file, you should find a category with the \s-1NAME\s0.
.Sp
.Vb 8
\& \-Option       \-\-Defined in     \-\-Default
\&  accept         Log::Report::Dispatcher  depend on mode
\&  charset        Log::Report::Dispatcher  <undef>
\&  config                          <required>
\&  format_reason  Log::Report::Dispatcher  \*(AqLOWERCASE\*(Aq
\&  locale         Log::Report::Dispatcher  <system locale>
\&  mode           Log::Report::Dispatcher  \*(AqNORMAL\*(Aq
\&  to_level                        []
.Ve
.RS 4
.IP "accept => \s-1REASONS\s0" 2
.IX Item "accept => REASONS"
.PD 0
.IP "charset => \s-1CHARSET\s0" 2
.IX Item "charset => CHARSET"
.IP "config => FILENAME|SCALAR" 2
.IX Item "config => FILENAME|SCALAR"
.PD
When a \s-1SCALAR\s0 reference is passed in, that must refer to a string which
contains the configuration text.  Otherwise, specify an existing \s-1FILENAME\s0.
.IP "format_reason => '\s-1UPPERCASE\s0'|'\s-1LOWERCASE\s0'|'\s-1UCFIRST\s0'|'\s-1IGNORE\s0'|CODE" 2
.IX Item "format_reason => 'UPPERCASE'|'LOWERCASE'|'UCFIRST'|'IGNORE'|CODE"
.PD 0
.IP "locale => \s-1LOCALE\s0" 2
.IX Item "locale => LOCALE"
.IP "mode => '\s-1NORMAL\s0'|'\s-1VERBOSE\s0'|'\s-1ASSERT\s0'|'\s-1DEBUG\s0'|0..3" 2
.IX Item "mode => 'NORMAL'|'VERBOSE'|'ASSERT'|'DEBUG'|0..3"
.IP "to_level => ARRAY-of-PAIRS" 2
.IX Item "to_level => ARRAY-of-PAIRS"
.PD
See \fIreasonToLevel()\fR.
.RE
.RS 4
.RE
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBappender\fR" 4
.el .IP "\f(CW$obj\fR\->\fBappender\fR" 4
.IX Item "$obj->appender"
Returns the Log::Log4perl::Logger object which is used for logging.
.ie n .IP "$obj\->\fBisDisabled\fR" 4
.el .IP "\f(CW$obj\fR\->\fBisDisabled\fR" 4
.IX Item "$obj->isDisabled"
See \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBmode\fR" 4
.el .IP "\f(CW$obj\fR\->\fBmode\fR" 4
.IX Item "$obj->mode"
See \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBname\fR" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR" 4
.IX Item "$obj->name"
See \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBneeds\fR" 4
.el .IP "\f(CW$obj\fR\->\fBneeds\fR" 4
.IX Item "$obj->needs"
See \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBtype\fR" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR" 4
.IX Item "$obj->type"
See \*(L"Accessors\*(R" in Log::Report::Dispatcher
.SS "Logging"
.IX Subsection "Logging"
.ie n .IP "$obj\->\fBcollectLocation\fR" 4
.el .IP "\f(CW$obj\fR\->\fBcollectLocation\fR" 4
.IX Item "$obj->collectLocation"
.PD 0
.IP "Log::Report::Dispatcher::Log4perl\->\fBcollectLocation\fR" 4
.IX Item "Log::Report::Dispatcher::Log4perl->collectLocation"
.PD
See \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBcollectStack\fR([\s-1MAXDEPTH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBcollectStack\fR([\s-1MAXDEPTH\s0])" 4
.IX Item "$obj->collectStack([MAXDEPTH])"
.PD 0
.IP "Log::Report::Dispatcher::Log4perl\->\fBcollectStack\fR([\s-1MAXDEPTH\s0])" 4
.IX Item "Log::Report::Dispatcher::Log4perl->collectStack([MAXDEPTH])"
.PD
See \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBlog\fR(HASH-of-OPTIONS, \s-1REASON\s0, \s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR(HASH-of-OPTIONS, \s-1REASON\s0, \s-1MESSAGE\s0)" 4
.IX Item "$obj->log(HASH-of-OPTIONS, REASON, MESSAGE)"
See \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBreasonToLevel\fR(\s-1REASON\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreasonToLevel\fR(\s-1REASON\s0)" 4
.IX Item "$obj->reasonToLevel(REASON)"
Returns a level which is understood by Log::Dispatch, based on
a translation table.  This can be changed with new(to_level).
.ie n .IP "$obj\->\fBstackTraceLine\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstackTraceLine\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->stackTraceLine(OPTIONS)"
.PD 0
.IP "Log::Report::Dispatcher::Log4perl\->\fBstackTraceLine\fR(\s-1OPTIONS\s0)" 4
.IX Item "Log::Report::Dispatcher::Log4perl->stackTraceLine(OPTIONS)"
.PD
See \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBtranslate\fR(HASH-of-OPTIONS, \s-1REASON\s0, \s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtranslate\fR(HASH-of-OPTIONS, \s-1REASON\s0, \s-1MESSAGE\s0)" 4
.IX Item "$obj->translate(HASH-of-OPTIONS, REASON, MESSAGE)"
See \*(L"Logging\*(R" in Log::Report::Dispatcher
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Log-Report distribution version 0.94,
built on August 23, 2011. Website: \fIhttp://perl.overmeer.net/log\-report/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
