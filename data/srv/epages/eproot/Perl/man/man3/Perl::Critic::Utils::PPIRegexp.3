.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Utils::PPIRegexp 3"
.TH Perl::Critic::Utils::PPIRegexp 3 "2011-04-15" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Utils::PPIRegexp \- Utility functions for dealing with PPI regexp tokens.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&   use Perl::Critic::Utils::PPIRegexp qw(:all);
\&   use PPI::Document;
\&   my $doc = PPI::Document\->new(\e\*(Aqm/foo/\*(Aq);
\&   my $elem = $doc\->find(\*(AqPPI::Token::Regexp::Match\*(Aq)\->[0];
\&   print get_match_string($elem);  # yields \*(Aqfoo\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
As of \s-1PPI\s0 v1.1xx, the \s-1PPI\s0 regexp token classes
(PPI::Token::Regexp::Match,
PPI::Token::Regexp::Substitute and
PPI::Token::QuoteLike::Regexp) has a
very weak interface, so it is necessary to dig into internals to learn
anything useful.  This package contains subroutines to encapsulate
that excess intimacy.  If future versions of \s-1PPI\s0 gain better
accessors, this package will start using those.
.SH "INTERFACE SUPPORT"
.IX Header "INTERFACE SUPPORT"
This is considered to be a public module.  Any changes to its
interface will go through a deprecation cycle.
.SH "IMPORTABLE SUBS"
.IX Header "IMPORTABLE SUBS"
.ie n .IP """parse_regexp( $token )""" 4
.el .IP "\f(CWparse_regexp( $token )\fR" 4
.IX Item "parse_regexp( $token )"
Parse the regexp token with Regexp::Parser.  If that
module is not available or if there is a parse error, returns undef.
If a parse success, returns a Regexp::Parser instance that can be used
to walk the regexp object model.
.Sp
\&\s-1CAVEAT:\s0 This method pays special attention to the \f(CW\*(C`x\*(C'\fR modifier to the
regexp.  If present, we wrap the regexp string in \f(CW\*(C`(?x:...)\*(C'\fR to
ensure a proper parse.  This does change the object model though.
.Sp
Someday if \s-1PPI\s0 gets native Regexp support, this method may become
deprecated.
.ie n .IP """ppiify( $regexp )""" 4
.el .IP "\f(CWppiify( $regexp )\fR" 4
.IX Item "ppiify( $regexp )"
Given a Regexp::Parser instance (perhaps as returned
from \f(CW\*(C`parse_regexp\*(C'\fR) convert it to a tree of PPI::Node
instances.  This is useful because \s-1PPI\s0 has a more familiar and
powerful programming model than the Regexp::Parser object tree.
.Sp
Someday if \s-1PPI\s0 gets native Regexp support, this method may become a
no-op.
.ie n .IP """get_match_string( $token )""" 4
.el .IP "\f(CWget_match_string( $token )\fR" 4
.IX Item "get_match_string( $token )"
Returns the match portion of the regexp or undef if the specified
token is not a regexp.  Examples:
.Sp
.Vb 4
\&    m/foo/;         # yields \*(Aqfoo\*(Aq
\&    s/foo/bar/;     # yields \*(Aqfoo\*(Aq
\&    / \eA a \ez /xms; # yields \*(Aq \e\eA a \e\ez \*(Aq
\&    qr{baz};        # yields \*(Aqbaz\*(Aq
.Ve
.ie n .IP """get_substitute_string( $token )""" 4
.el .IP "\f(CWget_substitute_string( $token )\fR" 4
.IX Item "get_substitute_string( $token )"
Returns the substitution portion of a search-and-replace regexp or
undef if the specified token is not a valid regexp.  Examples:
.Sp
.Vb 2
\&    m/foo/;         # yields undef
\&    s/foo/bar/;     # yields \*(Aqbar\*(Aq
.Ve
.ie n .IP """get_modifiers( $token )""" 4
.el .IP "\f(CWget_modifiers( $token )\fR" 4
.IX Item "get_modifiers( $token )"
Returns a hash containing booleans for the modifiers of the regexp, or
undef if the token is not a regexp.
.Sp
.Vb 3
\&    /foo/xms;  # yields (m => 1, s => 1, x => 1)
\&    s/foo//;   # yields ()
\&    qr/foo/i;  # yields (i => 1)
.Ve
.ie n .IP """get_delimiters( $token )""" 4
.el .IP "\f(CWget_delimiters( $token )\fR" 4
.IX Item "get_delimiters( $token )"
Returns one (or two for a substitution regexp) two-character strings
indicating the delimiters of the regexp, or an empty list if the token
is not a regular expression token.  For example:
.Sp
.Vb 7
\&    m/foo/;      # yields (\*(Aq//\*(Aq)
\&    m#foo#;      # yields (\*(Aq##\*(Aq)
\&    m<foo>;      # yields (\*(Aq<>\*(Aq)
\&    s/foo/bar/;  # yields (\*(Aq//\*(Aq, \*(Aq//\*(Aq)
\&    s{foo}{bar}; # yields (\*(Aq{}\*(Aq, \*(Aq{}\*(Aq)
\&    s{foo}/bar/; # yields (\*(Aq{}\*(Aq, \*(Aq//\*(Aq)   valid, but yuck!
\&    qr/foo/;     # yields (\*(Aq//\*(Aq)
.Ve
.ie n .IP """regexp_interpolates( $token )""" 4
.el .IP "\f(CWregexp_interpolates( $token )\fR" 4
.IX Item "regexp_interpolates( $token )"
Returns true if the given regexp interpolates, false if it does not, or undef
if the status can not be determined. The determining factor is whether or not
the first delimiting character (as returned by \f(CW\*(C`get_delimiters\*(C'\fR) is a single
quote. For example:
.Sp
.Vb 3
\&    m/foo/;     # yields true
\&    qr{foo};    # yields true
\&    m\*(Aqfoo\*(Aq;     # yields false
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Dolan <cdolan@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2007\-2010 Chris Dolan.  Many rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the \s-1LICENSE\s0 file included with this module.
