.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Lint::Error 3"
.TH HTML::Lint::Error 3 "2012-04-06" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Lint::Error \- Error object for the Lint functionality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See HTML::Lint for all the gory details.
.SH "EXPORTS"
.IX Header "EXPORTS"
None.  It's all object-based.
.SH "METHODS"
.IX Header "METHODS"
Almost everything is an accessor.
.ie n .SH "Error types: ""STRUCTURE"", ""HELPER"", ""FLUFF"""
.el .SH "Error types: \f(CWSTRUCTURE\fP, \f(CWHELPER\fP, \f(CWFLUFF\fP"
.IX Header "Error types: STRUCTURE, HELPER, FLUFF"
Each error has a type.  Note that these roughly, but not exactly, go
from most severe to least severe.
.IP "\(bu" 4
\&\f(CW\*(C`STRUCTURE\*(C'\fR
.Sp
For problems that relate to the structural validity of the code.
Examples: Unclosed <\s-1TABLE\s0> tags, incorrect values for attributes, and
repeated attributes.
.IP "\(bu" 4
\&\f(CW\*(C`HELPER\*(C'\fR
.Sp
Helpers are notes that will help you with your \s-1HTML\s0, or that will help
the browser render the code better or faster.  Example: Missing \s-1HEIGHT\s0
and \s-1WIDTH\s0 attributes in an \s-1IMG\s0 tag.
.IP "\(bu" 4
\&\f(CW\*(C`FLUFF\*(C'\fR
.Sp
Fluff is for items that don't hurt your page, but don't help it either.
This is usually something like an unknown attribute on a tag.
.SS "\fInew()\fP"
.IX Subsection "new()"
Create an object.  It's not very exciting.
.ie n .SS "is_type( $type1 [, $type2 ] )"
.el .SS "is_type( \f(CW$type1\fP [, \f(CW$type2\fP ] )"
.IX Subsection "is_type( $type1 [, $type2 ] )"
Tells if any of \fI\f(CI$type1\fI\fR, \fI\f(CI$type2\fI\fR... match the error's type.
Returns the type that matched.
.PP
.Vb 1
\&    if ( $err\->is_type( HTML::Lint::Error::STRUCTURE ) ) {....
.Ve
.SS "\fIwhere()\fP"
.IX Subsection "where()"
Returns a formatted string that describes where in the file the
error has occurred.
.PP
For example,
.PP
.Vb 1
\&    (14:23)
.Ve
.PP
for line 14, column 23.
.PP
The terrible thing about this function is that it's both a plain
ol' formatting function as in
.PP
.Vb 1
\&    my $str = where( 14, 23 );
.Ve
.PP
\&\s-1AND\s0 it's an object method, as in:
.PP
.Vb 1
\&    my $str = $error\->where();
.Ve
.PP
I don't know what I was thinking when I set it up this way, but
it's bad practice.
.SS "\fIas_string()\fP"
.IX Subsection "as_string()"
Returns a nicely-formatted string for printing out to stdout or some similar user thing.
.SS "\fIfile()\fP"
.IX Subsection "file()"
Returns the filename of the error, as set by the caller.
.SS "\fIline()\fP"
.IX Subsection "line()"
Returns the line number of the error.
.SS "\fIcolumn()\fP"
.IX Subsection "column()"
Returns the column number, starting from 0
.SS "\fIerrcode()\fP"
.IX Subsection "errcode()"
Returns the HTML::Lint error code.  Don't rely on this, because it will probably go away.
.SS "\fIerrtext()\fP"
.IX Subsection "errtext()"
Descriptive text of the error
.SS "\fItype()\fP"
.IX Subsection "type()"
Type of the error
.SH "POSSIBLE ERRORS"
.IX Header "POSSIBLE ERRORS"
Each possible error in HTML::Lint has a code.  These codes are used
to identify each error for when you need to turn off error checking
for a specific error.
.SS "config-unknown-directive"
.IX Subsection "config-unknown-directive"
Unknown directive \*(L"\s-1DIRECTIVE\s0\*(R"
.PP
You specified a directive in a comment for HTML::Lint that it didn't recognize.
.SS "config-unknown-value"
.IX Subsection "config-unknown-value"
Unknown value \*(L"\s-1VALUE\s0\*(R" for \s-1DIRECTIVE\s0 directive
.PP
Directive values can only be \*(L"on\*(R", \*(L"off\*(R", \*(L"yes\*(R", \*(L"no\*(R", \*(L"true\*(R", \*(L"false\*(R", \*(L"0\*(R" and \*(L"1\*(R".
.SS "elem-unknown"
.IX Subsection "elem-unknown"
Unknown element <\s-1TAG\s0>
.PP
HTML::Lint doesn't know what a \s-1TAG\s0 tag is.  These are pulled from HTML::Entities
.SS "elem-unopened"
.IX Subsection "elem-unopened"
</TAG> with no opening <\s-1TAG\s0>
.SS "elem-unclosed"
.IX Subsection "elem-unclosed"
<\s-1TAG\s0> at \s-1WHERE\s0 is never closed
.SS "elem-empty-but-closed"
.IX Subsection "elem-empty-but-closed"
<\s-1TAG\s0> is not a container \*(-- </TAG> is not allowed
.SS "elem-img-alt-missing"
.IX Subsection "elem-img-alt-missing"
<img src=\*(L"\s-1FILENAME\s0.PNG\*(R"> does not have \s-1ALT\s0 text defined
.SS "elem-img-sizes-missing"
.IX Subsection "elem-img-sizes-missing"
<img src=\*(L"\s-1FILENAME\s0.PNG\*(R"> tag has no \s-1HEIGHT\s0 and \s-1WIDTH\s0 attributes
.SS "elem-nonrepeatable"
.IX Subsection "elem-nonrepeatable"
<\s-1TAG\s0> is not repeatable, but already appeared at \s-1WHERE\s0
.SS "doc-tag-required"
.IX Subsection "doc-tag-required"
<\s-1TAG\s0> tag is required
.SS "attr-repeated"
.IX Subsection "attr-repeated"
\&\s-1ATTR\s0 attribute in <\s-1TAG\s0> is repeated
.SS "attr-unknown"
.IX Subsection "attr-unknown"
Unknown attribute \*(L"\s-1ATTR\s0\*(R" for tag <\s-1TAG\s0>
.SS "text-invalid-entity"
.IX Subsection "text-invalid-entity"
Entity \s-1ENTITY\s0 is invalid
.SS "text-unclosed-entity"
.IX Subsection "text-unclosed-entity"
Entity \s-1ENTITY\s0 is missing its closing semicolon
.SS "text-unknown-entity"
.IX Subsection "text-unknown-entity"
Entity \s-1ENTITY\s0 is unknown
.SS "text-use-entity"
.IX Subsection "text-use-entity"
Character \*(L"\s-1CHAR\s0\*(R" should be written as \s-1ENTITY\s0
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005\-2012 Andy Lester.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the Artistic License v2.0.
.PP
http://www.opensource.org/licenses/Artistic\-2.0
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Lester, \f(CW\*(C`andy at petdance.com\*(C'\fR
