.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Compile::SOAP11::Operation 3"
.TH XML::Compile::SOAP11::Operation 3 "2017-01-11" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Compile::SOAP11::Operation \- defines a SOAP11 interaction
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& XML::Compile::SOAP11::Operation
\&   is a XML::Compile::SOAP::Operation
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # object created by XML::Compile::WSDL*
\& my $op = $wsdl\->operation(\*(AqGetStockPrices\*(Aq);
\& $op\->explain($wsdl, PERL => \*(AqINPUT\*(Aq, recurse => 1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Objects of this type define one possible \s-1SOAP11\s0 interaction, either
client side or server side.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in XML::Compile::SOAP::Operation.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in XML::Compile::SOAP::Operation.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in XML::Compile::SOAP::Operation.
.IP "XML::Compile::SOAP11::Operation\->\fBnew\fR(%options)" 4
.IX Item "XML::Compile::SOAP11::Operation->new(%options)"
\&\f(CW\*(C`input_def\*(C'\fR, \f(CW\*(C`output_def\*(C'\fR and \f(CW\*(C`fault_def\*(C'\fR are HASHes which contain
the input and output message header, body and fault-header definitions
in \s-1WSDL1\s0.1 style.
.Sp
.Vb 12
\& \-Option     \-\-Defined in                   \-\-Default
\&  action       XML::Compile::SOAP::Operation  undef
\&  endpoints    XML::Compile::SOAP::Operation  []
\&  fault_def                                   <undef>
\&  input_def                                   <undef>
\&  kind         XML::Compile::SOAP::Operation  <required>
\&  name         XML::Compile::SOAP::Operation  <required>
\&  output_def                                  <undef>
\&  schemas      XML::Compile::SOAP::Operation  <required>
\&  server_type  XML::Compile::SOAP::Operation  undef
\&  style                                       \*(Aqdocument\*(Aq
\&  transport    XML::Compile::SOAP::Operation  \*(AqHTTP\*(Aq
.Ve
.RS 4
.IP "action => \s-1STRING\s0" 2
.IX Item "action => STRING"
.PD 0
.IP "endpoints => ADDRESS|ARRAY" 2
.IX Item "endpoints => ADDRESS|ARRAY"
.IP "fault_def => \s-1HASH\s0" 2
.IX Item "fault_def => HASH"
.IP "input_def => \s-1HASH\s0" 2
.IX Item "input_def => HASH"
.IP "kind => 'one\-way'|..." 2
.IX Item "kind => 'one-way'|..."
.IP "name => \s-1STRING\s0" 2
.IX Item "name => STRING"
.IP "output_def => \s-1HASH\s0" 2
.IX Item "output_def => HASH"
.IP "schemas => XML::Compile::Cache" 2
.IX Item "schemas => XML::Compile::Cache"
.IP "server_type => \s-1NAME\s0" 2
.IX Item "server_type => NAME"
.IP "style => 'document'|'rpc'" 2
.IX Item "style => 'document'|'rpc'"
.IP "transport => URI|'\s-1HTTP\s0'" 2
.IX Item "transport => URI|'HTTP'"
.RE
.RS 4
.RE
.PD
.SS "Accessors"
.IX Subsection "Accessors"
Extends \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation.
.ie n .IP "$obj\->\fBbindingName\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbindingName\fR()" 4
.IX Item "$obj->bindingName()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBclientClass\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclientClass\fR()" 4
.IX Item "$obj->clientClass()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBendPoints\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBendPoints\fR()" 4
.IX Item "$obj->endPoints()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBkind\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBkind\fR()" 4
.IX Item "$obj->kind()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBlongName\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlongName\fR()" 4
.IX Item "$obj->longName()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBportName\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBportName\fR()" 4
.IX Item "$obj->portName()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBschemas\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBschemas\fR()" 4
.IX Item "$obj->schemas()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBserverClass\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBserverClass\fR()" 4
.IX Item "$obj->serverClass()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBserviceName\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBserviceName\fR()" 4
.IX Item "$obj->serviceName()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBsoapAction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsoapAction\fR()" 4
.IX Item "$obj->soapAction()"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBstyle\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstyle\fR()" 4
.IX Item "$obj->style()"
.PD 0
.ie n .IP "$obj\->\fBversion\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBversion\fR()" 4
.IX Item "$obj->version()"
.PD
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.ie n .IP "$obj\->\fBwsaAction\fR('\s-1INPUT\s0'|'\s-1OUTPUT\s0')" 4
.el .IP "\f(CW$obj\fR\->\fBwsaAction\fR('\s-1INPUT\s0'|'\s-1OUTPUT\s0')" 4
.IX Item "$obj->wsaAction('INPUT'|'OUTPUT')"
Inherited, see \*(L"Accessors\*(R" in XML::Compile::SOAP::Operation
.SS "Modify"
.IX Subsection "Modify"
Operations are often modified by \s-1SOAP\s0 extensions.
See XML::Compile::SOAP::WSA, for instance. Also demonstrated in
the \s-1FAQ\s0, XML::Compile::SOAP::FAQ.
.ie n .IP "$obj\->\fBaddHeader\fR( <'\s-1INPUT\s0'|'\s-1OUTPUT\s0'|'\s-1FAULT\s0'>, $label, $element, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBaddHeader\fR( <'\s-1INPUT\s0'|'\s-1OUTPUT\s0'|'\s-1FAULT\s0'>, \f(CW$label\fR, \f(CW$element\fR, \f(CW%options\fR )" 4
.IX Item "$obj->addHeader( <'INPUT'|'OUTPUT'|'FAULT'>, $label, $element, %options )"
Add a header definitions.  Many protocols on top of \s-1SOAP\s0, like \s-1WSS\s0, add
headers to the operations which are not specified in the \s-1WSDL\s0.
.Sp
[2.31] When you add a header with same \f(CW$label\fR again, it will get silently
ignored unless the \f(CW$element\fR type differs. An \f(CW$element\fR is either a full
type or a [3.00] prefixed type.
.Sp
.Vb 3
\& \-Option        \-\-Default
\&  destination     undef
\&  mustUnderstand  undef
.Ve
.RS 4
.IP "destination => \s-1ROLE\s0" 2
.IX Item "destination => ROLE"
[2.33] adds the destination attribute.
.IP "mustUnderstand => \s-1BOOLEAN\s0" 2
.IX Item "mustUnderstand => BOOLEAN"
[2.33] adds the mustUnderstand attribute.
.RE
.RS 4
.RE
.SS "Handlers"
.IX Subsection "Handlers"
Extends \*(L"Handlers\*(R" in XML::Compile::SOAP::Operation.
.ie n .IP "$obj\->\fBcompileClient\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileClient\fR(%options)" 4
.IX Item "$obj->compileClient(%options)"
Returns one \s-1CODE\s0 reference which handles the processing for this
operation. Options \f(CW\*(C`transporter\*(C'\fR, \f(CW\*(C`transport_hook\*(C'\fR, and
\&\f(CW\*(C`endpoint\*(C'\fR are passed to \fIcompileTransporter()\fR.
.Sp
You pass that \s-1CODE\s0 reference an input message of the correct
type, as pure Perl \s-1HASH\s0 structure.  An 'request\-response' operation
will return then answer, or \f(CW\*(C`undef\*(C'\fR in case of failure.  An 'one\-way'
operation with return \f(CW\*(C`undef\*(C'\fR in case of failure, and a true value
when successful.
.Sp
You \fBcannot\fR pass options for \fIXML::Compile::Schema::compile()\fR, like
\&\f(CW\*(C`<sloppy_integers =\*(C'\fR 0>>, hooks or typemaps this way. Provide these to
the \f(CW\*(C`::WSDL\*(C'\fR or other \f(CW\*(C`::Cache\*(C'\fR object which defines the types, via
\&\f(CW\*(C`new\*(C'\fR option \f(CW\*(C`opts_rw\*(C'\fR and friends.
.ie n .IP "$obj\->\fBcompileHandler\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileHandler\fR(%options)" 4
.IX Item "$obj->compileHandler(%options)"
Prepare the routines which will decode the request and encode the answer,
as will be run on the server. The XML::Compile::SOAP::Server will
connect these. All \f(CW%options\fR will get passed to
\&\fIXML::Compile::SOAP11::Server::compileHandler()\fR
.Sp
.Vb 3
\& \-Option  \-\-Default
\&  callback  <required>
\&  selector  <from input def>
.Ve
.RS 4
.IP "callback => \s-1CODE\s0" 2
.IX Item "callback => CODE"
.PD 0
.IP "selector => \s-1CODE\s0" 2
.IX Item "selector => CODE"
.PD
Determines whether the handler belongs to a received message.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBcompileTransporter\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBcompileTransporter\fR(%options)" 4
.IX Item "$obj->compileTransporter(%options)"
Inherited, see \*(L"Handlers\*(R" in XML::Compile::SOAP::Operation
.SS "Helpers"
.IX Subsection "Helpers"
Extends \*(L"Helpers\*(R" in XML::Compile::SOAP::Operation.
.ie n .IP "$obj\->\fBexplain\fR($wsdl, $format, $direction, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBexplain\fR($wsdl, \f(CW$format\fR, \f(CW$direction\fR, \f(CW%options\fR)" 4
.IX Item "$obj->explain($wsdl, $format, $direction, %options)"
[since 2.13]
.Sp
Dump an annotated structure showing how the operation works, helping
developers to understand the schema. The \f(CW$format\fR must be string \*(L"\s-1PERL\s0\*(R".
($format \*(L"\s-1XML\s0\*(R" is not yet supported)
.Sp
When the \f(CW$direction\fR is string \*(L"\s-1INPUT\s0\*(R", it will return the message which
the client sends to the server (input for the server). The \*(L"\s-1OUTPUT\s0\*(R"
message is sent as response by the server.
.Sp
All \f(CW%options\fR besides those described here are passed to
\&\fIXML::Compile::Schema::template()\fR, when \f(CW\*(C`recurse\*(C'\fR is enabled.
.Sp
.Vb 3
\& \-Option     \-\-Default
\&  recurse      <false>
\&  skip_header  <false>
.Ve
.RS 4
.IP "recurse => \s-1BOOLEAN\s0" 2
.IX Item "recurse => BOOLEAN"
Append the templates of all the part structures.
.IP "skip_header => \s-1BOOLEAN\s0" 2
.IX Item "skip_header => BOOLEAN"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBparsedWSDL\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBparsedWSDL\fR(%options)" 4
.IX Item "$obj->parsedWSDL(%options)"
.PD
Inherited, see \*(L"Helpers\*(R" in XML::Compile::SOAP::Operation
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of XML-Compile-SOAP distribution version 3.21,
built on January 11, 2017. Website: \fIhttp://perl.overmeer.net/xml\-compile/\fR
.PP
Please post questions or ideas to the mailinglist at
\&\fIhttp://lists.scsys.co.uk/cgi\-bin/mailman/listinfo/xml\-compile\fR .
For live contact with other developers, visit the \f(CW\*(C`#xml\-compile\*(C'\fR channel
on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2017 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
