.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Any::Adapter 3"
.TH Log::Any::Adapter 3 "2009-10-28" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Any::Adapter \-\- Tell Log::Any where to send its logs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Log::Any::Adapter;
\&
\&    # Use Log::Log4perl for all categories
\&    #
\&    Log::Log4perl::init(\*(Aq/etc/log4perl.conf\*(Aq);
\&    Log::Any::Adapter\->set(\*(AqLog4perl\*(Aq);
\&
\&    # Use Log::Dispatch for Foo::Baz
\&    #
\&    use Log::Dispatch;
\&    my $log = Log::Dispatch\->new(outputs => [[ ... ]]);
\&    Log::Any::Adapter\->set( { category => \*(AqFoo::Baz\*(Aq },
\&        \*(AqDispatch\*(Aq, dispatcher => $log );
\&
\&    # Use Log::Dispatch::Config for Foo::Baz and its subcategories
\&    #
\&    use Log::Dispatch::Config;
\&    Log::Dispatch::Config\->configure(\*(Aq/path/to/log.conf\*(Aq);
\&    Log::Any::Adapter\->set(
\&        { category => qr/^Foo::Baz/ },
\&        \*(AqDispatch\*(Aq, dispatcher => Log::Dispatch::Config\->instance() );
\&
\&    # Use your own adapter for all categories
\&    #
\&    Log::Any::Adapter\->set(\*(Aq+My::Log::Any::Adapter\*(Aq, ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Log\-Any\-Adapter\*(C'\fR distribution implements Log::Any class
methods to specify where logs should be sent. It is a separate distribution so
as to keep \f(CW\*(C`Log::Any\*(C'\fR itself as simple and unchanging as possible.
.PP
You do not have to use anything in this distribution explicitly. It will be
auto-loaded when you call one of the methods below.
.SH "ADAPTERS"
.IX Header "ADAPTERS"
In order to use a logging mechanism with \f(CW\*(C`Log::Any\*(C'\fR, there needs to be an
adapter class for it. Typically this is named Log::Any::Adapter::\fIsomething\fR.
.PP
The following adapters are available on \s-1CPAN\s0 as of this writing:
.IP "\(bu" 4
Log::Any::Adapter::Log4perl \- work with log4perl
.IP "\(bu" 4
Log::Any::Adapter::Dispatch \- work with
Log::Dispatch or Log::Dispatch::Config
.PP
You may also find other adapters on \s-1CPAN\s0 by searching for \*(L"Log::Any::Adapter\*(R",
or create your own adapter. See
Log::Any::Adapter::Development for more
information on the latter.
.SH "SETTING AND REMOVING ADAPTERS"
.IX Header "SETTING AND REMOVING ADAPTERS"
.IP "Log::Any::Adapter\->set ([options, ]adapter_name, adapter_params...)" 4
.IX Item "Log::Any::Adapter->set ([options, ]adapter_name, adapter_params...)"
This method sets the adapter to use for all log categories, or for a particular
set of categories.
.Sp
\&\fIadapter_name\fR is the name of an adapter. It is automatically prepended with
\&\*(L"Log::Any::Adapter::\*(R". If instead you want to pass the full name of an adapter,
prefix it with a \*(L"+\*(R". e.g.
.Sp
.Vb 2
\&    # Use My::Adapter class
\&    Log::Any::Adapter\->set(\*(Aq+My::Adapter\*(Aq, arg => $value);
.Ve
.Sp
\&\fIadapter_params\fR are passed along to the adapter constructor. See the
documentation for the individual adapter classes for more information.
.Sp
An optional hash of \fIoptions\fR may be passed as the first argument. Options
are:
.RS 4
.IP "category" 4
.IX Item "category"
A string containing a category name, or a regex (created with qr//) matching
multiple categories.  If not specified, all categories will be affected.
.IP "lexically" 4
.IX Item "lexically"
A reference to a lexical variable. When the variable goes out of scope, the
adapter setting will be removed. e.g.
.Sp
.Vb 2
\&    {
\&        Log::Any::Adapter\->set({lexically => \emy $lex}, ...);
\&
\&        # in effect here
\&        ...
\&    }
\&    # no longer in effect here
.Ve
.RE
.RS 4
.Sp
\&\f(CW\*(C`set\*(C'\fR returns an entry object, which can be passed to \f(CW\*(C`remove\*(C'\fR.
.RE
.IP "Log::Any::Adapter\->remove (entry)" 4
.IX Item "Log::Any::Adapter->remove (entry)"
Remove an \fIentry\fR previously returned by \f(CW\*(C`set\*(C'\fR.
.SH "MULTIPLE ADAPTER SETTINGS"
.IX Header "MULTIPLE ADAPTER SETTINGS"
\&\f(CW\*(C`Log::Any\*(C'\fR maintains a stack of entries created via \f(CW\*(C`set\*(C'\fR.
.PP
When you get a logger for a particular category, \f(CW\*(C`Log::Any\*(C'\fR will work its way
down the stack and use the first matching entry.
.PP
Whenever the stack changes, any \f(CW\*(C`Log::Any\*(C'\fR loggers that have previously been
created will automatically adjust to the new stack. For example:
.PP
.Vb 9
\&    my $log = Log::Any\->get_logger();
\&    $log\->error("aiggh!");   # this goes nowhere
\&    ...
\&    {
\&        Log::Any::Adapter\->set({ local => \emy $lex }, \*(AqLog4perl\*(Aq);
\&        $log\->error("aiggh!");   # this goes to log4perl
\&        ...
\&    }
\&    $log\->error("aiggh!");   # this goes nowhere again
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Any
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Swartz
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2009 Jonathan Swartz.
.PP
Log::Any is provided \*(L"as is\*(R" and without any express or implied warranties,
including, without limitation, the implied warranties of merchantibility and
fitness for a particular purpose.
.PP
This program is free software; you canredistribute it and/or modify it under
the same terms as Perl itself.
