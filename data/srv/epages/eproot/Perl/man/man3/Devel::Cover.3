.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::Cover 3"
.TH Devel::Cover 3 "2011-08-05" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::Cover \- Code coverage metrics for Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To get coverage for an uninstalled module:
.PP
.Vb 1
\& cover \-test
.Ve
.PP
or
.PP
.Vb 3
\& cover \-delete
\& HARNESS_PERL_SWITCHES=\-MDevel::Cover make test
\& cover
.Ve
.PP
To get coverage for an uninstalled module which uses Module::Build (0.26 or
later):
.PP
.Vb 1
\& ./Build testcover
.Ve
.PP
If the module does not use the t/*.t framework:
.PP
.Vb 1
\& PERL5OPT=\-MDevel::Cover make test
.Ve
.PP
If you want to get coverage for a program:
.PP
.Vb 2
\& perl \-MDevel::Cover yourprog args
\& cover
\&
\& perl \-MDevel::Cover=\-db,cover_db,\-coverage,statement,time yourprog args
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides code coverage metrics for Perl. Code coverage
metrics describe how thoroughly tests exercise code. By using
Devel::Cover you can discover areas of code not exercised by your tests
and determine which tests to create to increase coverage. Code coverage
can be considered as an indirect measure of quality.
.PP
I consider this software to have an alpha status.  By that I mean that I
reserve the right to alter the interface in a backwards incompatible manner
without incrementing the major version number.  I specifically do not mean
that this software is full of bugs or missing key features.  Although I'm
making no guarantees on that front either.  In short, if you are looking for
code coverage software for Perl, you have probably come to the end of your
search.  For more of my opinions on this subject, see
http://pjcj.sytes.net/notes/2007/03/14#alpha
.PP
Code coverage data are collected using a pluggable runops function which
counts how many times each op is executed.  These data are then mapped
back to reality using the B compiler modules.  There is also a statement
profiling facility which needs a better backend to be really useful.
This release also includes an experimental mode which replaces ops
instead of using a pluggable runops function.  This provides a nice
speed increase, but needs better testing before it becomes the default.
You probably don't care about any of this.
.PP
The \fIcover\fR program can be used to generate coverage reports.
.PP
Statement, branch, condition, subroutine, pod and time coverage information is
reported.  Statement coverage data should be reasonable, although there may be
some statements which are not reported.  Branch and condition coverage data
should be mostly accurate too, although not always what one might initially
expect.  Subroutine coverage should be as accurate as statement coverage.  Pod
coverage comes from Pod::Coverage.  If Pod::Coverage::CountParents is
available it will be used instead.  Coverage data for path coverage are not yet
collected.
.PP
The \fIgcov2perl\fR program can be used to convert gcov files to
\&\f(CW\*(C`Devel::Cover\*(C'\fR databases.
.PP
You may find that the results don't match your expectations.  I would
imagine that at least one of them is wrong.
.PP
The most appropriate mailing list on which to discuss this module would
be perl-qa.  Discussion has migrated there from perl-qa-metrics which is
now defunct.  See http://lists.perl.org/list/perl\-qa.html <http://lists.perl.org/list/perl-qa.html>.
.PP
The Devel::Cover repository can be found at
http://github.com/pjcj/Devel\*(--Cover <http://github.com/pjcj/Devel--Cover>.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
.IP "\(bu" 4
Perl 5.6.1 or greater.  Perl 5.8.8 or greater is recommended.
.Sp
Perl 5.7.0 is unsupported.  Perl 5.8.8 or greater is recommended.  Perl
5.8.7 has problems and may crash.  Whilst Perl 5.6 should mostly work
you will probably miss out on coverage information which would be
available using a more modern version and will likely run into bugs in
perl.  Perl 5.8.0 will give slightly different results to more recent
versions due to changes in the op tree.
.IP "\(bu" 4
The ability to compile \s-1XS\s0 extensions.
.Sp
This means a working compiler and make program at least.
.IP "\(bu" 4
Storable and Digest::MD5
.Sp
Both are in the core in Perl 5.8.0 and above.
.IP "\(bu" 4
Template and \s-1PPI::HTML\s0 or Perl::Tidy
.Sp
if you want syntax highlighted \s-1HTML\s0 reports.
.IP "\(bu" 4
Pod::Coverage
.Sp
if you want Pod coverage.
.IP "\(bu" 4
Test::More
.Sp
in order to run the tests
.IP "\(bu" 4
Test::Warn
.Sp
in order to run some of the tests
.IP "\(bu" 4
Test::Differences
.Sp
if the tests fail and you would like nice output telling you why.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 10
\& \-blib               \- "use blib" and ignore files matching \ebt/ (default true
\&                       iff blib directory exists).
\& \-coverage criterion \- Turn on coverage for the specified criterion.  Criteria
\&                       include statement, branch, condition, path, subroutine,
\&                       pod, time, all and none (default all available).
\& \-db cover_db        \- Store results in coverage db (default ./cover_db).
\& \-dir path           \- Directory in which coverage will be collected (default
\&                       cwd).
\& \-ignore RE          \- Set REs of files to ignore (default "/Devel/Cover\eb").
\& +ignore RE          \- Append to REs of files to ignore.
\& \-inc path           \- Set prefixes of files to ignore (default @INC).
\& +inc path           \- Append to prefixes of files to ignore.
\& \-merge val          \- Merge databases, for multiple test benches (default on).
\& \-select RE          \- Set REs of files to select (default none).
\& +select RE          \- Append to REs of files to select.
\& \-silent val         \- Don\*(Aqt print informational messages (default off).
\& \-subs_only val      \- Only cover code in subroutine bodies (default off).
\& \-replace_ops val    \- Use op replacing rather than runops (default on).
\& \-summary val        \- Print summary information iff val is true (default on).
.Ve
.SS "More on Coverage Options"
.IX Subsection "More on Coverage Options"
You can specify options to some coverage criteria.  At the moment only pod
coverage takes any options.  These are the parameters which are passed into the
Pod::Coverage constructor.  The extra options are separated by dashes, and you
may specify as many as you wish.  For example, to specify that all subroutines
containing xx are private, call Devel::Cover with the option
\&\-coverage,pod\-also_private\-xx.
.SH "SELECTING FILES TO COVER"
.IX Header "SELECTING FILES TO COVER"
You may select which files you want covered using the select, ignore and inc
options.  The system works as follows:
.PP
Any file matching a \s-1RE\s0 given as a select option is selected.
.PP
Otherwise, any file matching a \s-1RE\s0 given as an ignore option is ignored.
.PP
Otherwise, any file in one of the inc directories is ignored.
.PP
Otherwise the file is selected.
.PP
You may add to the REs to select by using +select, or you may reset the
selections using \-select.  The same principle applies to the REs to
ignore.
.PP
The inc directories are initially populated with the contents of the
\&\f(CW@INC\fR array at the time Devel::Cover was built.  You may reset these
directories using \-inc, or add to them using +inc.
.PP
Although these options take regular expressions, you should not enclose the \s-1RE\s0
within // or any other quoting characters.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The \-silent option is turned on when Devel::Cover is invoked via
\&\f(CW$HARNESS_PERL_SWITCHES\fR or \f(CW$PERL5OPT\fR.  Devel::Cover tries to do the right
thing when \f(CW$MOD_PERL\fR is set.  \f(CW$DEVEL_COVER_OPTIONS\fR is appended to any
options passed into Devel::Cover.
.PP
When running Devel::Cover's own test suite, \f(CW$DEVEL_COVER_DEBUG\fR turns on
debugging information, \f(CW$DEVEL_COVER_GOLDEN_VERSION\fR overrides
Devel::Cover's own idea of which golden results it should test against,
and \f(CW$DEVEL_COVER_NO_COVERAGE\fR runs the tests without collecting coverage.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Some code and ideas cribbed from:
.PP
.Vb 3
\& Devel::OpProf
\& B::Concise
\& B::Deparse
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 3
\& Devel::Cover::Tutorial
\& B
\& Pod::Coverage
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
There are things that Devel::Cover can't cover.
.SS "Absence of shared dependencies"
.IX Subsection "Absence of shared dependencies"
Perl keeps track of which modules have been loaded (to avoid reloading
them).  Because of this, it isn't possible to get coverage for a path
where a runtime import fails if the module being imported is one that
Devel::Cover uses internally.  For example, suppose your program has
this function:
.PP
.Vb 8
\& sub foo {
\&     eval { require Storable };
\&     if ($@) {
\&         carp "Can\*(Aqt find Storable";
\&         return;
\&     }
\&     # ...
\& }
.Ve
.PP
You might write a test for the failure mode as
.PP
.Vb 3
\& BEGIN { @INC = () }
\& foo();
\& # check for error message
.Ve
.PP
Because Devel::Cover uses Storable internally, the import will succeed
(and the test will fail) under a coverage run.
.PP
Modules used by Devel::Cover while gathering coverage:
.IP "\(bu" 4
B
.IP "\(bu" 4
B::Debug
.IP "\(bu" 4
B::Deparse
.IP "\(bu" 4
Carp
.IP "\(bu" 4
Cwd
.IP "\(bu" 4
Digest::MD5
.IP "\(bu" 4
File::Path
.IP "\(bu" 4
File::Spec
.IP "\(bu" 4
Storable
.SS "mod_perl"
.IX Subsection "mod_perl"
By adding \f(CW\*(C`use Devel::Cover;\*(C'\fR to your mod_perl startup script, you
should be able to collect coverage information when running under
mod_perl.  You can also add any options you need at this point.  I would
suggest adding this as early as possible in your startup script in order
to collect as much coverage information as possible.
.SS "Redefined subroutines"
.IX Subsection "Redefined subroutines"
If you redefine a subroutine you may find that the original subroutine is not
reported on.  This is because I haven't yet found a way to locate the original
\&\s-1CV\s0.  Hints, tips or patches to resolve this will be gladly accepted.
.SH "BUGS"
.IX Header "BUGS"
Almost certainly.
.PP
See the \s-1BUGS\s0 file.  And the \s-1TODO\s0 file.
.SH "VERSION"
.IX Header "VERSION"
Version 0.79 \- 5th August 2011
.SH "LICENCE"
.IX Header "LICENCE"
Copyright 2001\-2011, Paul Johnson (pjcj@cpan.org)
.PP
This software is free.  It is licensed under the same terms as Perl itself.
.PP
The latest version of this software should be available from my homepage:
http://www.pjcj.net
