.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::OpenSSL::DSA 3"
.TH Crypt::OpenSSL::DSA 3 "2015-02-03" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::OpenSSL::DSA \- Digital Signature Algorithm using OpenSSL
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Crypt::OpenSSL::DSA;
\&
\&  # generate keys and write out to PEM files
\&  my $dsa = Crypt::OpenSSL::DSA\->generate_parameters( 512 );
\&  $dsa\->generate_key;
\&  $dsa\->write_pub_key( $filename );
\&  $dsa\->write_priv_key( $filename );
\&
\&  # using keys from PEM files
\&  my $dsa_priv = Crypt::OpenSSL::DSA\->read_priv_key( $filename );
\&  my $sig      = $dsa_priv\->sign($message);
\&  my $dsa_pub  = Crypt::OpenSSL::DSA\->read_pub_key( $filename );
\&  my $valid    = $dsa_pub\->verify($message, $sig);
\&
\&  # using keys from PEM strings
\&  my $dsa_priv = Crypt::OpenSSL::DSA\->read_priv_key_str( $key_string );
\&  my $sig      = $dsa_priv\->sign($message);
\&  my $dsa_pub  = Crypt::OpenSSL::DSA\->read_pub_key_str( $key_string );
\&  my $valid    = $dsa_pub\->verify($message, $sig);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Crypt::OpenSSL::DSA implements the \s-1DSA\s0
(Digital Signature Algorithm) signature verification system.
.PP
It is a thin \s-1XS\s0 wrapper to the \s-1DSA\s0 functions contained in the 
OpenSSL crypto library, located at http://www.openssl.org
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.ie n .IP "$dsa = Crypt::OpenSSL::DSA\->generate_parameters( $bits, $seed );" 4
.el .IP "\f(CW$dsa\fR = Crypt::OpenSSL::DSA\->generate_parameters( \f(CW$bits\fR, \f(CW$seed\fR );" 4
.IX Item "$dsa = Crypt::OpenSSL::DSA->generate_parameters( $bits, $seed );"
Returns a new \s-1DSA\s0 object and generates the p, q and g
parameters necessary to generate keys.
.Sp
bits is the length of the prime to be generated; the \s-1DSS\s0 allows a maximum of 1024 bits.
.ie n .IP "$dsa = Crypt::OpenSSL::DSA\->read_params( $filename );" 4
.el .IP "\f(CW$dsa\fR = Crypt::OpenSSL::DSA\->read_params( \f(CW$filename\fR );" 4
.IX Item "$dsa = Crypt::OpenSSL::DSA->read_params( $filename );"
Reads in a parameter \s-1PEM\s0 file and returns a new \s-1DSA\s0 object with the p, q and g
parameters necessary to generate keys.
.ie n .IP "$dsa = Crypt::OpenSSL::DSA\->read_pub_key( $filename );" 4
.el .IP "\f(CW$dsa\fR = Crypt::OpenSSL::DSA\->read_pub_key( \f(CW$filename\fR );" 4
.IX Item "$dsa = Crypt::OpenSSL::DSA->read_pub_key( $filename );"
Reads in a public key \s-1PEM\s0 file and returns a new \s-1DSA\s0 object that can be used
to verify \s-1DSA\s0 signatures.
.ie n .IP "$dsa = Crypt::OpenSSL::DSA\->read_priv_key( $filename );" 4
.el .IP "\f(CW$dsa\fR = Crypt::OpenSSL::DSA\->read_priv_key( \f(CW$filename\fR );" 4
.IX Item "$dsa = Crypt::OpenSSL::DSA->read_priv_key( $filename );"
Reads in a private key \s-1PEM\s0 file and returns a new \s-1DSA\s0 object that can be used
to sign messages.
.ie n .IP "$dsa = Crypt::OpenSSL::DSA\->read_pub_key_str( $key_string );" 4
.el .IP "\f(CW$dsa\fR = Crypt::OpenSSL::DSA\->read_pub_key_str( \f(CW$key_string\fR );" 4
.IX Item "$dsa = Crypt::OpenSSL::DSA->read_pub_key_str( $key_string );"
Reads in a public key \s-1PEM\s0 string and returns a new \s-1DSA\s0 object that can be used
to verify \s-1DSA\s0 signatures.
The string should include the \-\-\-\-\-BEGIN...\-\-\-\-\- and \-\-\-\-\-END...\-\-\-\-\- lines.
.ie n .IP "$dsa = Crypt::OpenSSL::DSA\->read_priv_key_str( $key_string );" 4
.el .IP "\f(CW$dsa\fR = Crypt::OpenSSL::DSA\->read_priv_key_str( \f(CW$key_string\fR );" 4
.IX Item "$dsa = Crypt::OpenSSL::DSA->read_priv_key_str( $key_string );"
Reads in a private key \s-1PEM\s0 string and returns a new \s-1DSA\s0 object that can be used
to sign messages.
The string should include the \-\-\-\-\-BEGIN...\-\-\-\-\- and \-\-\-\-\-END...\-\-\-\-\- lines.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.ie n .IP "$dsa\->generate_key;" 4
.el .IP "\f(CW$dsa\fR\->generate_key;" 4
.IX Item "$dsa->generate_key;"
Generates private and public keys, assuming that \f(CW$dsa\fR is the return
value of generate_parameters.
.ie n .IP "$sig = $dsa\->sign( $message );" 4
.el .IP "\f(CW$sig\fR = \f(CW$dsa\fR\->sign( \f(CW$message\fR );" 4
.IX Item "$sig = $dsa->sign( $message );"
Signs \f(CW$message\fR, returning the signature.  Note that \f(CW$meesage\fR cannot exceed
20 characters in length.
.Sp
\&\f(CW$dsa\fR is the signer's private key.
.ie n .IP "$sig_obj = $dsa\->do_sign( $message );" 4
.el .IP "\f(CW$sig_obj\fR = \f(CW$dsa\fR\->do_sign( \f(CW$message\fR );" 4
.IX Item "$sig_obj = $dsa->do_sign( $message );"
Similar to \f(CW\*(C`sign\*(C'\fR, but returns a Crypt::OpenSSL::DSA::Signature object.
.ie n .IP "$valid = $dsa\->verify( $message, $sig );" 4
.el .IP "\f(CW$valid\fR = \f(CW$dsa\fR\->verify( \f(CW$message\fR, \f(CW$sig\fR );" 4
.IX Item "$valid = $dsa->verify( $message, $sig );"
Verifies that the \f(CW$sig\fR signature for \f(CW$message\fR is valid.
.Sp
\&\f(CW$dsa\fR is the signer's public key.
.Sp
Note: it croaks if the underlying library call returns error (\-1).
.ie n .IP "$valid = $dsa\->do_verify( $message, $sig_obj );" 4
.el .IP "\f(CW$valid\fR = \f(CW$dsa\fR\->do_verify( \f(CW$message\fR, \f(CW$sig_obj\fR );" 4
.IX Item "$valid = $dsa->do_verify( $message, $sig_obj );"
Similar to \f(CW\*(C`verify\*(C'\fR, but uses a Crypt::OpenSSL::DSA::Signature object.
.Sp
Note: it croaks if the underlying library call returns error (\-1).
.ie n .IP "$dsa\->write_params( $filename );" 4
.el .IP "\f(CW$dsa\fR\->write_params( \f(CW$filename\fR );" 4
.IX Item "$dsa->write_params( $filename );"
Writes the parameters into a \s-1PEM\s0 file.
.ie n .IP "$dsa\->write_pub_key( $filename );" 4
.el .IP "\f(CW$dsa\fR\->write_pub_key( \f(CW$filename\fR );" 4
.IX Item "$dsa->write_pub_key( $filename );"
Writes the public key into a \s-1PEM\s0 file.
.ie n .IP "$dsa\->write_priv_key( $filename );" 4
.el .IP "\f(CW$dsa\fR\->write_priv_key( \f(CW$filename\fR );" 4
.IX Item "$dsa->write_priv_key( $filename );"
Writes the private key into a \s-1PEM\s0 file.
.ie n .IP "$p = $dsa\->get_p, $dsa\->set_p($p)" 4
.el .IP "\f(CW$p\fR = \f(CW$dsa\fR\->get_p, \f(CW$dsa\fR\->set_p($p)" 4
.IX Item "$p = $dsa->get_p, $dsa->set_p($p)"
Gets/sets the prime number in binary format.
.ie n .IP "$q = $dsa\->get_q, $dsa\->set_q($q)" 4
.el .IP "\f(CW$q\fR = \f(CW$dsa\fR\->get_q, \f(CW$dsa\fR\->set_q($q)" 4
.IX Item "$q = $dsa->get_q, $dsa->set_q($q)"
Gets/sets the subprime number (q | p\-1) in binary format.
.ie n .IP "$g = $dsa\->get_g, $dsa\->set_g($g)" 4
.el .IP "\f(CW$g\fR = \f(CW$dsa\fR\->get_g, \f(CW$dsa\fR\->set_g($g)" 4
.IX Item "$g = $dsa->get_g, $dsa->set_g($g)"
Gets/sets the generator of subgroup in binary format.
.ie n .IP "$pub_key = $dsa\->get_pub_key, $dsa\->set_pub_key($pub_key)" 4
.el .IP "\f(CW$pub_key\fR = \f(CW$dsa\fR\->get_pub_key, \f(CW$dsa\fR\->set_pub_key($pub_key)" 4
.IX Item "$pub_key = $dsa->get_pub_key, $dsa->set_pub_key($pub_key)"
Gets/sets the public key (y = g^x) in binary format.
.ie n .IP "$priv_key = $dsa\->get_priv_key, $dsa\->set_priv_key($priv_key)" 4
.el .IP "\f(CW$priv_key\fR = \f(CW$dsa\fR\->get_priv_key, \f(CW$dsa\fR\->set_priv_key($priv_key)" 4
.IX Item "$priv_key = $dsa->get_priv_key, $dsa->set_priv_key($priv_key)"
Gets/sets the private key in binary format.
.SH "NOTES"
.IX Header "NOTES"
Crpyt::DSA is a more mature Perl \s-1DSA\s0 module, but can be difficult to
install, because of the Math::Pari requirement.
.PP
Comments, suggestions, and patches welcome.
.SH "AUTHOR"
.IX Header "AUTHOR"
T.J. Mather, <tjmather@maxmind.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002 T.J. Mather.  Crypt::OpenSSL::DSA is free software;
you may redistribute it and/or modify it under the same terms as Perl itself.
.PP
Paid support is available from directly from the author of this package.
Please see <http://www.maxmind.com/app/opensourceservices> for more details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Crypt::OpenSSL::DSA::Signature
.PP
Crypt::DSA, Crypt::OpenSSL::RSA
.PP
Net::DNS::SEC
