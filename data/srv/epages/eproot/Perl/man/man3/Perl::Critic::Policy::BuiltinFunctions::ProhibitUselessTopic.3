.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Policy::BuiltinFunctions::ProhibitUselessTopic 3"
.TH Perl::Critic::Policy::BuiltinFunctions::ProhibitUselessTopic 3 "2017-06-14" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Policy::BuiltinFunctions::ProhibitUselessTopic \- Don't pass $_ to built\-in functions that assume it, or to most filetest operators.
.SH "AFFILIATION"
.IX Header "AFFILIATION"
This Policy is part of the Perl::Critic distribution.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
There are a number of places where \f(CW$_\fR, or \*(L"the topic\*(R" variable,
is unnecessary.
.SS "Topic unnecessary for certain Perl built-in functions"
.IX Subsection "Topic unnecessary for certain Perl built-in functions"
Many Perl built-in functions will operate on \f(CW$_\fR if no argument
is passed.  For example, the \f(CW\*(C`length\*(C'\fR function will operate on
\&\f(CW$_\fR by default.  This snippet:
.PP
.Vb 2
\&    for ( @list ) {
\&        if ( length( $_ ) == 4 ) { ...
.Ve
.PP
is more idiomatically written as:
.PP
.Vb 2
\&    for ( @list ) {
\&        if ( length == 4 ) { ...
.Ve
.PP
In the case of the \f(CW\*(C`split\*(C'\fR function, the second argument is the
one that defaults to \f(CW$_\fR.  This snippet:
.PP
.Vb 2
\&    for ( @list ) {
\&        my @args = split /\et/, $_;
.Ve
.PP
is better written as:
.PP
.Vb 2
\&    for ( @list ) {
\&        my @args = split /\et/;
.Ve
.PP
There is one built-in that this policy does \fBnot\fR check for:
\&\f(CW\*(C`reverse\*(C'\fR called with \f(CW$_\fR.
.PP
The \f(CW\*(C`reverse\*(C'\fR function only operates on \f(CW$_\fR if called in scalar
context.  Therefore:
.PP
.Vb 2
\&    for ( @list ) {
\&        my $backwards = reverse $_;
.Ve
.PP
is better written as:
.PP
.Vb 2
\&    for ( @list ) {
\&        my $backwards = reverse;
.Ve
.PP
However, the distinction for scalar vs. list context on \f(CW\*(C`reverse\*(C'\fR
is not yet working.  See \s-1KNOWN\s0 \s-1BUGS\s0 below.
.SS "Topic unnecessary for most filetest operators"
.IX Subsection "Topic unnecessary for most filetest operators"
Another place that \f(CW$_\fR is unnecessary is with a filetest operator.
.PP
.Vb 3
\&    # These are identical.
\&    my $size = \-s $_;
\&    my $size = \-s;
\&
\&    # These are identical.
\&    if ( \-r $_ ) { ...
\&    if ( \-r ) { ...
.Ve
.PP
The exception is after the \f(CW\*(C`\-t\*(C'\fR filetest operator, which instead of
defaulting to \f(CW$_\fR defaults to \f(CW\*(C`STDIN\*(C'\fR.
.PP
.Vb 3
\&    # These are NOT identical.
\&    if ( \-t $_ ) { ...
\&    if ( \-t ) { ...  # Checks STDIN, not $_
.Ve
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
This policy flags a false positive on \f(CW\*(C`reverse\*(C'\fR called in list
context, since \f(CW\*(C`reverse\*(C'\fR in list context does \fInot\fR assume \f(CW$_\fR.
.PP
.Vb 2
\&    my $s = reverse( $_ ); # $_ is useless.
\&    my @a = reverse( $_ ); # $_ is not useless here.
.Ve
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
This Policy is not configurable except for the standard options.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Lester <andy@petdance.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2013 Andy Lester <andy@petdance.com>
.PP
This library is free software; you can redistribute it and/or modify it
under the terms of the Artistic License 2.0.
