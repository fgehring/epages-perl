.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MP3::Cut::Gapless 3"
.TH MP3::Cut::Gapless 3 "2010-06-08" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MP3::Cut::Gapless \- Split an MP3 file without gaps (based on pcutmp3)
.SH "VERSION"
.IX Header "VERSION"
version 0.02
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MP3::Cut::Gapless;
\&    
\&    # Cut file using a cue sheet
\&    my $cut = MP3::Cut::Gapless\->new(
\&        cue => \*(Aqfile.cue\*(Aq
\&    );
\&    for my $track ( $cut\->tracks ) {
\&        $cut\->write( $track );
\&    }
\&    
\&    # Or, cut at defined points and stream the rewritten file
\&    my $cut = MP3::Cut::Gapless\->new(
\&        file      => \*(Aqlong.mp3\*(Aq,
\&        cache_dir => \*(Aq/var/cache/mp3cut\*(Aq,
\&        start_ms  => 15000,
\&        end_ms    => 30000,
\&    );
\&    open my $out, \*(Aq>\*(Aq, \*(Aq15\-30.mp3\*(Aq;
\&    while ( $cut\->read( my $buf, 4096 ) ) {
\&        syswrite $out, $buf;
\&    }
\&    close $out;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module performs sample-granular splitting of an \s-1MP3\s0 file.  Most \s-1MP3\s0 splitters only split
on frame boundaries which can leave gaps or noise between files due to \s-1MP3\s0's bit reservoir.
This module, which is based on the Java pcutmp3 tool, rewrites the \s-1LAME\s0 tag and adjusts the
audio frames as necessary to make the split completely gapless when played with a compatible
decoder that supports \s-1LAME\s0 encoder delay and padding.
.PP
There are two main ways to use this module.
.PP
1. Using a cue sheet, you can split a large input file into a series of tracks.
.PP
2. Realtime transcoding can be performed by specifying an input file and a start/end time,
after which the rewritten \s-1MP3\s0 can be streamed to an audio device.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( %args )"
.el .SS "new( \f(CW%args\fP )"
.IX Subsection "new( %args )"
Arguments:
.Sp
.Vb 1
\&    cue => $cue_sheet
.Ve
.Sp
.RS 4
Optional. Cue sheet to use to determine cut points.
.Sp
.Vb 1
\&    file => $file_to_cut
.Ve
.Sp
If not specified, the \s-1FILE\s0 entry from the cue will be used.
.Sp
.Vb 2
\&    start_ms => $start_time_in_milliseconds
\&    end_ms   => $end_time_in_milliseconds
.Ve
.Sp
Optional, can be used to manually define cut points.
.Sp
.Vb 1
\&    cache_dir => "/path/to/cache/dir"
.Ve
.Sp
Optional. When \fInew()\fR is called, a complete scan must be done of the
\&\s-1MP3\s0 file to determine the number of frames and their locations. This 
can be somewhat time-consuming depending on the size of the file,
disk/network speed, and so on. A cache file can be created to avoid this
operation if the file needs to be cut a second time. This is most useful
when manually cutting a file several times.
.RE
.SS "\fItracks()\fP"
.IX Subsection "tracks()"
Returns an array of MP3::Cut::Gapless::Track objects. Only available if a cue sheet was used.
.ie n .SS "write( $track, [ $filename ] )"
.el .SS "write( \f(CW$track\fP, [ \f(CW$filename\fP ] )"
.IX Subsection "write( $track, [ $filename ] )"
Write the given MP3::Cut::Gapless::Track object to a file. If no filename is provided, the
default filename is \*(L"<position> \- <performer> \- <title>.mp3\*(R". If the file already exists, it
will not be overwritten.
.ie n .SS "read( $buf, $block_size_hint )"
.el .SS "read( \f(CW$buf\fP, \f(CW$block_size_hint\fP )"
.IX Subsection "read( $buf, $block_size_hint )"
Reads a chunk of the rewritten \s-1MP3\s0 file into \f(CW$buf\fR. Returns the number of bytes read.
Only complete \s-1MP3\s0 frames are returned, so you may receive more or less data than \f(CW$block_size_hint\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
pcutmp3 originally by Sebastian Gesemann <http://wiki.themixingbowl.org/Pcutmp3>
.PP
Audio::Scan
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Grundman, <andy@slimdevices.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 Logitech, Inc.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
