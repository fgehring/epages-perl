.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Manip::Config 3"
.TH Date::Manip::Config 3 "2011-06-03" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Manip::Config \- Date::Manip configuration
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This documents the configuration information which is stored in
each Date::Manip::Base object, how to modify this information,
and how the information is used in the other Date::Manip modules.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Date::Manip is a very configurable bundle of modules. Many of it's
behaviors can be modified to change how date operations are done.  To
do this, a list of configuration variables may be set which define
many Date::Manip behaviors.
.PP
There are three ways to set config variables. The first two are to
pass them in when creating an object, or to pass them to the config
method after the object is created. All of the main Date::Manip
modules (Date::Manip::Base, Date::Manip::TZ, Date::Manip::Date,
Date::Manip::Delta, and Date::Manip::Recur) have the config method.
.PP
As an example, you can create and configure a
Date::Manip::Date object using the commands:
.PP
.Vb 2
\&   $date = new Date::Manip::Date;
\&   $date\->config($var1,$val1,$var2,$val2,...);
.Ve
.PP
This can be shortened to:
.PP
.Vb 1
\&   $date = new Date::Manip::Date [$var1,$val1,...];
.Ve
.PP
The values of the config variables are stored in the Date::Manip::Base
object. So, if you have a Date::Manip::Date object, it has a
Date::Manip::Base object associated with it, and the configuration
information is stored there. The same Date::Manip::Base object may be
used by any number of higher objects, and all will share the same
configuration. If multiple Date::Manip::Date objects share the same
Date::Manip::Base object, setting a configuration variable on any of
them affects all of the Date::Manip::Date objects. If you need to work
with different configurations simultaneously, it is necessary to work
with multiple Date::Manip::Base objects. This is covered in the
Date::Manip::Objects document.
.PP
The third way to set config variables is to store them in a config
file. The config file is read in by passing the appropriate values to
the config method as described below.  A config file is a good way to
easily change a large number of settings. They are also necessary for
other purposes (such as events and holidays which are covered
in the Date::Manip::Holidays document).
.SH "CONFIG FILES"
.IX Header "CONFIG FILES"
One of the variables that can be passed to the config method is
\&\*(L"ConfigFile\*(R". The value of this variable is the path to a config
file. A description of the file format and contents is described
below.
.PP
When any Date::Manip::* object is configured, any number of config
files may be read (and the config files can specify additional files
to read).
.PP
The starting section of a config file contains general configuration
variables. A list of all config variables is given below.
.PP
Following this, any number of special sections may be included in
the config file. The special sections are used to specify other
types of information, such as a list of holidays or special events.
These special sections are described elsewhere in the documentation.
.PP
The syntax of the config file is very simple. Every line is of
the form:
.PP
.Vb 1
\&   VAR = VAL
.Ve
.PP
or
.PP
.Vb 1
\&   *SECTION
.Ve
.PP
Blank lines and lines beginning with a pound sign (#) are ignored.
All whitespace is optional. Variables names in the main section and
section names are case insensitive (though values in the main section
are typically case sensitive). Strings in other sections (both variables
and values) are case sensitive.
.PP
The following is a sample config file:
.PP
.Vb 2
\&   DateFormat = US
\&   Language   = English
\&
\&   *Holidays
\&
\&   Dec 25 =  Christmas
\&   Jan 1  =  New Year\*(Aqs
.Ve
.PP
All config variables that may appear in the main part of a config file
are described in the next section. Other sections are described elsewhere.
The *Holidays and *Events sections are both described in the
Date::Manip::Holidays documentation.
.PP
A sample config file is included with the Date::Manip distribution.
Modify it as appropriate and copy it to some appropriate directory and
use the ConfigFile variable to access it. For example, if a config
file is stored in /home/foo/Manip.cnf, you can load it by:
.PP
.Vb 1
\&   $date\->config("ConfigFile","/home/foo/Manip.cnf");
.Ve
.PP
\&\s-1NOTE:\s0 if you use business mode calculations, you must have a config
file since this is the only place where you can define holidays.
.PP
In the top section, only variables described below may be used. In
other sections, checking (if any) is done in the module that uses
the data from that section.
.SH "BASIC CONFIGURATION VARIABLES"
.IX Header "BASIC CONFIGURATION VARIABLES"
This section describes the basic Date::Manip configuration variables
which can be used in a config file, or which may be passed in using
the appropriate functions for each module.
.PP
Variable names are case insensitive, both as arguments to the config
function and in the config file. The values are case sensitive except
where specified otherwise.
.IP "\fBDefaults\fR" 4
.IX Item "Defaults"
The value for this config variable is ignored. Whenever the Defaults
config variable is encountered, the defaults for all config variables
are restored, overriding \s-1ALL\s0 changes that have been made.
.Sp
In other words, in the following call:
.Sp
.Vb 2
\&   $date\->config("Language","Russian",
\&                 "Defaults","1");
.Ve
.Sp
the first option will end up being ignored since the Defaults config
variable will set the language back to it's default value which is
English.
.IP "\fBConfigFile\fR" 4
.IX Item "ConfigFile"
The ConfigFile variable defines a config file which will be parsed for
configuration information. It may be included any number of times, each
one including the path to a single config file. The value of this
variable is a full path to a file.
.Sp
An example call to the config function might be:
.Sp
.Vb 2
\&   $date\->config("ConfigFile","/tmp/file1",
\&                 "ConfigFile","/tmp/file2");
.Ve
.Sp
Config files are parsed immediately. So if the file '/tmp/file1'
contains the following lines:
.Sp
.Vb 2
\&   ConfigFile = /tmp/file3
\&   ConfigFile = /tmp/file4
.Ve
.Sp
the following sequence of events occur:
.Sp
First, /tmp/file1 is opened. All options from it are parsed until
you get to the first ConfigFile line.
.Sp
At that point, /tmp/file3 is parsed and all config variables stored
(and they override any previously stored from /tmp/file1).
.Sp
Next, you continue with /tmp/file1 until the second ConfigFile line
is seen at which point /tmp/file4 is parsed.
.Sp
Finally, any remaining lines in /tmp/file1 are parsed. Then /tmp/file2
is parsed.
.Sp
The path to the file may be specified in any way valid for the
operating system. If a file is not found, a warning will be issued,
but execution will continue.
.IP "\fBLanguage\fR" 4
.IX Item "Language"
Date::Manip can be used to parse dates in many different languages.
Currently, it contains translations for the following languages (the
version in which they added is included for historical interest):
.Sp
.Vb 10
\&   English      (default)
\&   French       (5.02)
\&   Swedish      (5.05)
\&   German       (5.31)
\&   Dutch        (5.32)     aka Nederlands
\&   Polish       (5.32)
\&   Spanish      (5.33)
\&   Portuguese   (5.34)
\&   Romanian     (5.35)
\&   Italian      (5.35)
\&   Russian      (5.41)
\&   Turkish      (5.41)
\&   Danish       (5.41)
\&   Catalan      (5.43)
\&   Norwegian    (6.21)
.Ve
.Sp
To parse dates in a different language, just use the Language config
variable with the name of the language as the value. Language names
are case insensitive.
.Sp
Additional languages may be added with the help of someone fluent in
English and the other language.  If you are interested in providing a
translation for a new language, please refer to the Date::Manip::Lang
document for instructions.
.IP "\fBEncoding\fR" 4
.IX Item "Encoding"
Date::Manip has some support for handling date strings encoded in
alternate character encodings.
.Sp
By default, input strings may be tested using multiple encodings that
are commonly used for the specific languages, as well as using
standard perl escape sequences, and output is done in \s-1UTF\-8\s0.
.Sp
The input, output, or both can be overridden using the Encoding
variable.
.Sp
Setting Encoding to the name of a single encoding (a name supported
by the Encoding perl module), will force all input and output to be
done in that encoding.
.Sp
So, setting:
.Sp
.Vb 1
\&   Encoding = iso\-8859\-1
.Ve
.Sp
means that all input and output will be in that encoding. The
encoding 'perl' has the special meaning of storing the string in
perl escape sequences.
.Sp
Encoding can also be set to the name of two encoding (separated
by a comma).
.Sp
.Vb 1
\&   Encoding = iso\-8859\-1,utf\-16
.Ve
.Sp
which means that all input is in iso\-8859\-1 encoding, but all output
will be utf\-16.
.Sp
Encoding may also be set as follows:
.Sp
.Vb 1
\&   Encoding = iso\-8859\-1,
.Ve
.Sp
meaning that input is in iso\-8859\-1 and output is in the default (i.e.
\&\s-1UTF\-8\s0) encoding.
.Sp
.Vb 1
\&   Encoding = ,utf\-16
.Ve
.Sp
means to check the input in all of the encodings, but all output will
be in utf\-16 encoding.
.Sp
Note that any time you change languages, it will reset the encodings,
so you should set this config variable \s-1AFTER\s0 setting the language.
.IP "\fBDateFormat\fR" 4
.IX Item "DateFormat"
Different countries look at the date 12/10 as Dec 10 or Oct 12.  In
the United States, the first is most common, but this certainly
doesn't hold true for other countries.  Setting DateFormat to \*(L"\s-1US\s0\*(R"
(case insensitive) forces the first behavior (Dec 10).  Setting
DateFormat to anything else forces the second behavior (Oct 12).  The
\&\*(L"\s-1US\s0\*(R" setting is the default (sorry about that...  I live in the \s-1US\s0
:\-).
.IP "\fBYYtoYYYY\fR" 4
.IX Item "YYtoYYYY"
When parsing a date containing a 2\-digit year, the year must be converted
to 4 digits. This config variable determines how this is done.
.Sp
By default, a 2 digit year is treated as falling in the 100 year period of
\&\s-1CURR\-89\s0 to \s-1CURR+10\s0. So in the year 2005, a two digit year will be somewhere
in the range 1916 to 2015.
.Sp
YYtoYYYY may be set to any integer N to force a 2 digit year into the
period CURR-N to \s-1CURR+\s0(99\-N).  A value of 0 forces the year to be the
current year or later.  A value of 99 forces the year to be the
current year or earlier.  Although the most common choice of values
will be somewhere between 0 and 99, there is no restriction on N that
forces it to be so. It can actually be any positive or negative number
you want to force it into any 100 year period desired.
.Sp
YYtoYYYY can also be set to \*(L"C\*(R" to force it into the current century, or
to \*(L"C##\*(R" to force it into a specific century.  So, in 1998, \*(L"C\*(R" forces
2 digit years to be 1900\-1999.  \*(L"C18\*(R" would always force a 2 digit year to
be in the range 1800\-1899. Note: I'm aware that the actual definitions of
century are 1901\-2000, \s-1NOT\s0 1900\-1999, so for purists, treat this as
the way to supply the first two digits rather than as supplying a
century.
.Sp
It can also be set to the form \*(L"C####\*(R" to force it into a specific 100
year period.  C1950 refers to 1950\-2049.
.IP "\fBFirstDay\fR" 4
.IX Item "FirstDay"
It is sometimes necessary to know what day of week is regarded as
first.  By default, this is set to Monday as that conforms to \s-1ISO\s0
8601, but many countries and people will prefer Sunday (and in a few
cases, a different day may be desired).  Set the FirstDay variable to
be the first day of the week (1=Monday, 7=Sunday).
.IP "\fBJan1Week1\fR" 4
.IX Item "Jan1Week1"
\&\s-1ISO\s0 8601 states that the first week of the year is the one which contains
Jan 4 (i.e. it is the first week in which most of the days in that week
fall in that year).  This means that the first 3 days of the year may
be treated as belonging to the last week of the previous year.  If this
is set to non-nil, the \s-1ISO\s0 8601 standard will be ignored and the first
week of the year contains Jan 1.
.IP "\fBPrintable\fR" 4
.IX Item "Printable"
Some commands may produce a printable version of a date. By default,
the printable version of the date is of the format:
.Sp
.Vb 1
\&   YYYYMMDDHH:MN:SS
.Ve
.Sp
Two other simple versions have been created. If the Printable variable is
set to 1, the format is:
.Sp
.Vb 1
\&   YYYYMMDDHHMNSS
.Ve
.Sp
If Printable is set to 2, the format is:
.Sp
.Vb 1
\&   YYYY\-MM\-DD\-HH:MN:SS
.Ve
.Sp
This config variable is present in order to maintain backward
compatibility, and may actually be deprecated at some point. As such,
additional formats will not be added. Instead, use the printf method
in the Date::Manip::Date module to extract information with complete
flexibility.
.IP "\fBDefaultTime\fR" 4
.IX Item "DefaultTime"
When a date is parsed from one of the formats listed in the \*(L"Common date formats\*(R"
or \*(L"Less common formats\*(R" sections of the Date::Manip::Date document, and no time
is explicitly included, the default time can be determined by the value of this
variable. The two possible values are:
.Sp
.Vb 2
\&   midnight   the default time is 00:00:00
\&   curr       the default time is the current time
.Ve
.Sp
\&\*(L"midnight\*(R" is the default value.
.Sp
\&\s-1NOTE:\s0 this only applies to dates parsed with the parse method. Dates parsed
using the parse_date method always default to 00:00:00.
.SH "BUSINESS CONFIGURATION VARIABLES"
.IX Header "BUSINESS CONFIGURATION VARIABLES"
These are configuration variables used to define work days and
holidays used in business mode calculations. Refer to the
Date::Manip::Calc documentation for details on these calculations.
.IP "\fBWorkWeekBeg\fR" 4
.IX Item "WorkWeekBeg"
.PD 0
.IP "\fBWorkWeekEnd\fR" 4
.IX Item "WorkWeekEnd"
.PD
The first and last days of the work week.  These default to Monday and
Friday.  Days are numbered from 1 (Monday) to 7 (Sunday).  WorkWeekBeg
must come before WorkWeekEnd numerically so there is no way to handle
a work week of Sunday to Thursday using these variables.
.Sp
There is also no way to handle an odd work schedule such as 10 days
on, 4 days off.
.Sp
However, both of these situations can be handled using a fairly simple
workaround.
.Sp
To handle a work week of Sunday to Thursday, just set WorkWeekBeg=1
and WorkWeekEnd=7 and defined a holiday that occurs every Friday and
Saturday.
.Sp
To handle a 10 days on, 4 days off schedule, do something similar
but defined a holiday that occurs on all of the 4 days off.
.Sp
Both of these can be done using recurrences. Refer to the Date::Manip::Recur
documentation for details.
.IP "\fBWorkDay24Hr\fR" 4
.IX Item "WorkDay24Hr"
.PD 0
.IP "\fBWorkDayBeg\fR" 4
.IX Item "WorkDayBeg"
.IP "\fBWorkDayEnd\fR" 4
.IX Item "WorkDayEnd"
.PD
If WorkDay24Hr is non-zero, a work day is treated as being 24 hours long.
The WorkDayBeg and WorkDayEnd variables are ignored in this case.
.Sp
By default, WorkDay24Hr is zero, and the work day is defined by the
WorkDayBeg and WorkDayEnd variables. These are the times when the work
day starts and ends respectively. WorkDayBeg must come before
WorkDayEnd (i.e. there is no way to handle the night shift where the
work day starts one day and ends another).
.Sp
The time in both should be a valid time format (H, H:M, or H:M:S).
.Sp
Note that setting WorkDay24Hr to a non-zero value automatically sets
WorkDayBeg and WorkDayEnd to \*(L"00:00:00\*(R" and \*(L"24:00:00\*(R" respectively,
so to switch back to a non\-24 hour day, you will need to reset both
of those config variables.
.Sp
Similarly, setting either the WorkDayBeg or WorkDayEnd variables
automatically turns off WorkDay24Hr.
.IP "\fBTomorrowFirst\fR" 4
.IX Item "TomorrowFirst"
Periodically, if a day is not a business day, we need to find the
nearest business day to it.  By default, we'll look to \*(L"tomorrow\*(R"
first, but if this variable is set to 0, we'll look to \*(L"yesterday\*(R"
first.  This is only used in the
Date::Manip::Date::nearest_business_day method (and the
Date_NearestWorkDay function) and is easily overridden (see
documentation for the nearest_business_day method).
.IP "\fBEraseHolidays\fR" 4
.IX Item "EraseHolidays"
.PD 0
.IP "\fBEraseEvents\fR" 4
.IX Item "EraseEvents"
.PD
If these variables are used (a value must be passed in, but is
ignored), the current list of defined holidays or events is erased.  A
new set will be set the next time a config file is read in.
.Sp
Although these variables are supported, the best way to have multiple
holiday or events lists will be to create multiple Date::Manip::Base
objects based on separate config files.
.SH "RECURRENCE CONFIGURATION VARIABLES"
.IX Header "RECURRENCE CONFIGURATION VARIABLES"
The following config variables help in the handling of recurrences.
.IP "\fBRecurRange\fR" 4
.IX Item "RecurRange"
When a recurrence is created, it begins with a default range (start
and end date). The range selected depends on the value of this
variable, and can be set to any of the following:
.Sp
.Vb 6
\&   none     no default range supplied
\&   year     the current year
\&   month    the current month
\&   week     the current week
\&   day      the current day
\&   all      Jan 2, 0001 to Dec 30, 9999
.Ve
.Sp
The default value is \*(L"none\*(R".
.SH "TIME ZONE RELATED CONFIGURATION VARIABLES"
.IX Header "TIME ZONE RELATED CONFIGURATION VARIABLES"
The following configuration variables may alter the current
time zone. As such, they are only available once the Date::Manip::TZ
module is available. An easy way to handle this is to only pass them
to the config method of a Date::Manip::TZ object or one of the high
level objects (Date::Manip::Date, Date::Manip::Delta, or
Date::Manip::Recur).
.PP
Many of Date::Manip's operations rely on knowing what time it is
now. This consists of three things: knowing what date and time it is,
knowing what time zone it is, and knowing whether it is daylight
saving or not. All of this is necessary in order to correctly handle
every possible date.
.PP
The daylight saving time is only used for a couple hours each year
during daylight saving time changes (at all other times, the date,
time, and time zone are sufficient information), so it is optional, and
defaults to standard time if omitted.
.PP
The default behavior of Date::Manip is to use the system localtime
function to determine the date, time, and daylight saving time
information, and to use various methods (see \s-1DETERMINING\s0 \s-1THE\s0 \s-1SYSTEM\s0
\&\s-1TIME\s0 \s-1ZONE\s0 in the Date::Manip::TZ documentation) to determine what
time zone the computer is in.
.IP "\fB\s-1TZ\s0\fR" 4
.IX Item "TZ"
This variable is deprecated, but will be supported for several
releases. The SetDate or ForceDate variables (described next) should be
used instead.
.Sp
The following are equivalent:
.Sp
.Vb 2
\&    $date\->config("tz","Europe/Rome");
\&    $date\->config("setdate","now,Europe/Rome");
.Ve
.IP "\fBSetDate\fR" 4
.IX Item "SetDate"
The SetDate config variable is used to set the current date, time, or
time zone, but then allow it to change over time using the rules of
that time zone.
.Sp
There are several cases where this may be useful.
.Sp
Often, you may want to use the system time to get the date and time, but
you want to work in another time zone. For this, use the call:
.Sp
.Vb 1
\&   $date\->config("setdate","now,ZONE");
.Ve
.Sp
If it is currently
.Sp
.Vb 1
\&   Jun 6, 2009 12:00:00 in the America/New_York time zone
.Ve
.Sp
and you call:
.Sp
.Vb 1
\&   $date\->config("setdate","Europe/Rome");
.Ve
.Sp
the Date::Manip will treat that exact instant as
.Sp
.Vb 1
\&   Jun 6, 2009 12:00:00 in the Europe/Rome time zone
.Ve
.Sp
At that precise moment, looking at the system time and parsing the
date \*(L"now\*(R" in Date::Manip will give the same date and time.
.Sp
The time will continue to advance, but it will use time change rules
from the Europe/Rome time zone. What that means is that if a daylight
saving time occurs on the computer, but \s-1NOT\s0 in the Europe/Rome
time zone (or vice versa), the system date and time will no longer
match the results of parsing the date \*(L"now\*(R" in Date::Manip.
.Sp
In general (unless the program runs for an extended period of
time), the system date and time \s-1WILL\s0 match the value of \*(L"now\*(R", so
this is a good way to simulate placing the computer in another
time zone.
.Sp
If the current date/time is ambiguous (i.e. it exists in both
standard and daylight saving time in the alternate zone), you
can use the call:
.Sp
.Vb 1
\&   $date\->config("setdate","now,DSTFLAG,ZONE");
.Ve
.Sp
to force it to be in one or the other. \s-1DSTFLAG\s0 can be \*(L"std\*(R",
\&\*(L"dst\*(R", \*(L"stdonly\*(R", or \*(L"dstonly\*(R". \*(L"std\*(R" and \*(L"dst\*(R" mean that
the date can be in either standard or saving time, but will
try standard first (for \*(L"dst\*(R") or saving time first (if \*(L"dst\*(R"),
and will only try the other if the date is not valid. If
\&\*(L"stdonly\*(R" or \*(L"dstonly\*(R" is used, the date will be forced to
be standard or saving time respectively (an error will be
triggered if there is no valid date in that time).
.Sp
If the current date/time doesn't exist in the alternate zone,
an error will occur.
.Sp
The other common operation is that you might want to see results
as they would appear on a computer running in a different time zone.
.Sp
This can be done using the call:
.Sp
.Vb 2
\&   $date\->config("setdate","zone,ZONE");
\&   $date\->config("setdate","zone,DSTFLAG,ZONE");
.Ve
.Sp
If it is currently
.Sp
.Vb 1
\&   Jun 6, 2009 12:00:00 in the America/New_York time zone
.Ve
.Sp
and you call:
.Sp
.Vb 1
\&   $date\->config("setdate","zone,America/Chicago");
.Ve
.Sp
then parsing \*(L"now\*(R" at precisely that moment will return \*(L"Jun 6, 2009
11:00:00\*(R".  This is equivalent to working in the current zone, but
then converting everything to the alternate zone.
.Sp
Note that \s-1DSTFLAG\s0 is only used if \s-1ZONE\s0 is entered as an offset.
.Sp
The final case where the SetDate config variable is used is to alter
the date and time to some other value (completely independent of
the current date and time) and allow it to advance normally from
that point.
.Sp
.Vb 3
\&   $date\->config("setdate","DATE");
\&   $date\->config("setdate","DATE,ZONE");
\&   $date\->config("setdate","DATE,DSTFLAG,ZONE");
.Ve
.Sp
set both the date/time and zone.
.Sp
If \s-1DATE\s0 is not valid in the time zone (either the local time zone
or the specified one), and error occurs.
.Sp
The call:
.Sp
.Vb 1
\&   $date\->config("setdate","now");
.Ve
.Sp
resets everything to use the current date/time and zone and lets it
advance normally.
.IP "\fBForceDate\fR" 4
.IX Item "ForceDate"
The ForceDate config variable is similar to the SetDate variable, except
that once \*(L"now\*(R" is set, it is not allowed to change. Parsing the date \*(L"now\*(R"
will not change, regardless of how long the program runs (unless either
the SetDate or ForceDate variables are set to some other value).
.Sp
.Vb 8
\&   $date\->config("forcedate","now,ZONE");
\&   $date\->config("forcedate","now,DSTFLAG,ZONE");
\&   $date\->config("forcedate","zone,ZONE");
\&   $date\->config("forcedate","zone,DSTFLAG,ZONE");
\&   $date\->config("forcedate","DATE");
\&   $date\->config("forcedate","DATE,ZONE");
\&   $date\->config("forcedate","DATE,DSTFLAG,ZONE");
\&   $date\->config("forcedate","now");
.Ve
.Sp
all set \*(L"now\*(R" in the same way as the SetDate variable.
.PP
\&\s-1ZONE\s0 can be any time zone name, alias, abbreviation, or offset, and
the best time zone will be determined from all given information.
.PP
It should be noted that setting the SetDate or ForceDate variable
twice will always refer to the system date/time as a starting point.
For example, if a program is running, and calls the method:
.PP
.Vb 1
\&   $date\->config("forcedate","now");
.Ve
.PP
at Jun 6, 2009 at 12:00, that time will be treated as now from that
point on. If the same call is done an hour later, \*(L"now\*(R" will then
be Jun 6, 2009 at 13:00 from that moment on.
.PP
Since the current date is used in the date parsing routines, no
parsing can be done on the \s-1DATE\s0 value in any of the calls.  Instead,
\&\s-1DATE\s0 must be a date in one of the two formats:
.PP
.Vb 2
\&   YYYY\-MM\-DD\-HH:MN:SS
\&   YYYYMMDDHH:MN:SS
.Ve
.SH "DEPRECATED CONFIGURATION VARIABLES"
.IX Header "DEPRECATED CONFIGURATION VARIABLES"
The following config variables are currently supported, but are
deprecated.  They will be removed in a future Date::Manip release:
.IP "\fBGlobalCnf\fR" 4
.IX Item "GlobalCnf"
.PD 0
.IP "\fBIgnoreGlobalCnf\fR" 4
.IX Item "IgnoreGlobalCnf"
.IP "\fBPersonalCnf\fR" 4
.IX Item "PersonalCnf"
.IP "\fBPersonalCnfPath\fR" 4
.IX Item "PersonalCnfPath"
.IP "\fBPathSep\fR" 4
.IX Item "PathSep"
.PD
These variables are currently supported, but will be removed. These
have been replaced in favor of ConfigFile.
.Sp
GlobalCnf (which is ignored in a config file, and is only useful
in the Date_Init call) sets the full path to a global config file.
.Sp
IgnoreGlobalCnf is ignored completely at this point.
.Sp
PersonalCnf is the name of a personal (or local) config file which
will be read in after the global config file. The file will be
searched for in a list of directories specified by PersonalCnfPath.
The list of directories is delimited by the value of PathSep.
.Sp
In the future, the distinction between a global and personal config
file will be removed, and there will be no searching across a path
of directories. Instead, full paths will be specified using the ConfigFile
variable.
.IP "\fBInternal\fR" 4
.IX Item "Internal"
This is an alias for Printable. Internal was used previously because
the actual format of the date stored by Date::Manip would actually change
based on this value. Now, the internal form will never change... just
the printable version of it. The variable name has been changed to reflect
that change.
.IP "\fBDeltaSigns\fR" 4
.IX Item "DeltaSigns"
This is ignored. Use the Date::Manip::Delta::printf format to format
deltas as desired.
.IP "\fBUpdateCurrTZ\fR" 4
.IX Item "UpdateCurrTZ"
This is ignored. With real time zone support, daylight saving time changes
are handled automatically and correctly.
.IP "\fBConvTZ\fR" 4
.IX Item "ConvTZ"
This is ignored. Calculations automatically handle multiple time zones,
so this is no longer necessary.
.IP "\fB\s-1TZ\s0\fR" 4
.IX Item "TZ"
This is discussed above. Use SetDate or ForceDate instead.
.IP "\fBIntCharSet\fR" 4
.IX Item "IntCharSet"
If set to 0, use the \s-1US\s0 character set (7\-bit \s-1ASCII\s0) to return strings such
as the month name.  If set to 1, use the appropriate international character
set.  For example, If you want your French representation of December to
have the accent over the first \*(L"e\*(R", you'll want to set this to 1.
.IP "\fBRecurNumFudgeDays\fR" 4
.IX Item "RecurNumFudgeDays"
This is no longer used since recurrences were reworked in 6.20.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
None known.
.SH "BUGS AND QUESTIONS"
.IX Header "BUGS AND QUESTIONS"
Please refer to the Date::Manip::Problems documentation for
information on submitting bug reports or questions to the author.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Manip        \- main module documentation
.SH "LICENSE"
.IX Header "LICENSE"
This script is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
