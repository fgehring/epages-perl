.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Report::Dispatcher::File 3"
.TH Log::Report::Dispatcher::File 3 "2016-10-21" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Report::Dispatcher::File \- send messages to a file or file\-handle
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Log::Report::Dispatcher::File
\&   is a Log::Report::Dispatcher
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& dispatcher Log::Report::Dispatcher::File => \*(Aqstderr\*(Aq
\&   , to => \e*STDERR, accept => \*(AqNOTICE\-\*(Aq;
\&
\& # close a dispatcher
\& dispatcher close => \*(Aqstderr\*(Aq;
\&
\& # let dispatcher open and close the file
\& dispatcher FILE => \*(Aqmylog\*(Aq, to => \*(Aq/var/log/mylog\*(Aq
\&   , charset => \*(Aqutf\-8\*(Aq;
\& ...
\& dispatcher close => \*(Aqmylog\*(Aq;  # will close file
\&
\& # open yourself, then also close yourself
\& open OUT, ">:encoding(\*(Aqiso\-8859\-1\*(Aq)", \*(Aq/var/log/mylog\*(Aq
\&     or fault "...";
\& dispatcher FILE => \*(Aqmylog\*(Aq, to => \e*OUT;
\& ...
\& dispatcher close => \*(Aqmylog\*(Aq;  
\& close OUT;
\&
\& # dispatch into a scalar
\& my $output = \*(Aq\*(Aq;
\& open $outfile, \*(Aq>\*(Aq, \e$output;
\& dispatcher FILE => \*(Aqinto\-scalar\*(Aq, to => \e$outfile;
\& ...
\& dispatcher close => \*(Aqinto\-scalar\*(Aq;
\& print $output;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This basic file logger accepts an file-handle or filename as destination.
.PP
[1.00] writing to the file protected by a lock, so multiple processes
can write to the same file.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Log::Report::Dispatcher.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Log::Report::Dispatcher.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Log::Report::Dispatcher.
.ie n .IP "Log::Report::Dispatcher::File\->\fBnew\fR($type, $name, %options)" 4
.el .IP "Log::Report::Dispatcher::File\->\fBnew\fR($type, \f(CW$name\fR, \f(CW%options\fR)" 4
.IX Item "Log::Report::Dispatcher::File->new($type, $name, %options)"
.Vb 9
\& \-Option       \-\-Defined in             \-\-Default
\&  accept         Log::Report::Dispatcher  depend on mode
\&  charset        Log::Report::Dispatcher  LOCALE
\&  format                                  <adds timestamp>
\&  format_reason  Log::Report::Dispatcher  \*(AqLOWERCASE\*(Aq
\&  locale         Log::Report::Dispatcher  <system locale>
\&  mode           Log::Report::Dispatcher  \*(AqNORMAL\*(Aq
\&  replace                                 false
\&  to                                      <required>
.Ve
.RS 4
.IP "accept => \s-1REASONS\s0" 2
.IX Item "accept => REASONS"
.PD 0
.IP "charset => \s-1CHARSET\s0" 2
.IX Item "charset => CHARSET"
.IP "format => CODE|'\s-1LONG\s0'" 2
.IX Item "format => CODE|'LONG'"
.PD
[1.00] process each printed line.  By default, this adds a timestamp,
but you may want to add hostname, process number, or more.
.Sp
.Vb 3
\&   format => sub { \*(Aq[\*(Aq.localtime().\*(Aq] \*(Aq.$_[0] }
\&   format => sub { shift }   # no timestamp
\&   format => \*(AqLONG\*(Aq
.Ve
.Sp
The first parameter to format is the string to print; it is already
translated and trailed by a newline.  The second parameter is the
text-domain (if known). [1.10] As third parameter, you get the \f(CW$msg\fR
raw object as well (maybe you want to use the message context?)
.Sp
The \*(L"\s-1LONG\s0\*(R" format is equivalent to:
.Sp
.Vb 2
\&  my $t = strftime "%FT%T", gmtime;
\&  "[$t $$] $_[1] $_[0]"
.Ve
.Sp
Use of context:
.Sp
.Vb 4
\&   format => sub { my ($msgstr, $domain, $msg) = @_;
\&      my $host = $msg\->context\->{host};
\&      "$host $msgstr";
\&   }
.Ve
.IP "format_reason => '\s-1UPPERCASE\s0'|'\s-1LOWERCASE\s0'|'\s-1UCFIRST\s0'|'\s-1IGNORE\s0'|CODE" 2
.IX Item "format_reason => 'UPPERCASE'|'LOWERCASE'|'UCFIRST'|'IGNORE'|CODE"
.PD 0
.IP "locale => \s-1LOCALE\s0" 2
.IX Item "locale => LOCALE"
.IP "mode => '\s-1NORMAL\s0'|'\s-1VERBOSE\s0'|'\s-1ASSERT\s0'|'\s-1DEBUG\s0'|0..3" 2
.IX Item "mode => 'NORMAL'|'VERBOSE'|'ASSERT'|'DEBUG'|0..3"
.IP "replace => \s-1BOOLEAN\s0" 2
.IX Item "replace => BOOLEAN"
.PD
Only used in combination with a \s-1FILENAME:\s0 throw away the old file
if it exists.  Probably you wish to append to existing information.
.Sp
Use the \s-1LOCALE\s0 setting by default, which is \s-1LC_CTYPE\s0 or \s-1LC_ALL\s0 or \s-1LANG\s0
(in that order).  If these contain a character-set which Perl understands,
then that is used, otherwise silently ignored.
.IP "to => FILENAME|FILEHANDLE|OBJECT|CODE" 2
.IX Item "to => FILENAME|FILEHANDLE|OBJECT|CODE"
You can either specify a \s-1FILENAME\s0, which is opened in append mode with
autoflush on. Or pass any kind of FILE-HANDLE or some \s-1OBJECT\s0 which
implements a \f(CW\*(C`print()\*(C'\fR method. You probably want to have autoflush
enabled on your FILE-HANDLES.
.Sp
When cleaning-up the dispatcher, the file will only be closed in case
of a \s-1FILENAME\s0.
.Sp
[1.10] When you pass a \s-1CODE\s0, then for each log message the function is
called with two arguments: this dispatcher object and the message object.
In some way (maybe via the message context) you have to determine the
log filename.  This means that probably many log-files are open at the
same time.
.Sp
.Vb 3
\&   # configuration time
\&   dispatcher FILE => \*(Aqlogfile\*(Aq, to =>
\&       sub { my ($disp, $msg) = @_; $msg\->context\->{logfile} };
\&
\&   # whenever you want to change the logfile
\&   textdomain\->updateContext(logfile => \*(Aq/var/log/app\*(Aq);
\&   (textdomain \*(Aqmydomain\*(Aq)\->setContext(logfile => \*(Aq/var/log/app\*(Aq);
\&
\&   # or
\&   error _\|_x"help", _context => {logfile => \*(Aq/dev/tty\*(Aq};
\&   error _\|_x"help", _context => "logfile=/dev/tty";
.Ve
.RE
.RS 4
.RE
.SS "Accessors"
.IX Subsection "Accessors"
Extends \*(L"Accessors\*(R" in Log::Report::Dispatcher.
.ie n .IP "$obj\->\fBfilename\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfilename\fR()" 4
.IX Item "$obj->filename()"
Returns the name of the opened file, or \f(CW\*(C`undef\*(C'\fR in case this dispatcher
was started from a file-handle or file-object.
.ie n .IP "$obj\->\fBformat\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBformat\fR()" 4
.IX Item "$obj->format()"
.PD 0
.ie n .IP "$obj\->\fBisDisabled\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDisabled\fR()" 4
.IX Item "$obj->isDisabled()"
.PD
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBmode\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmode\fR()" 4
.IX Item "$obj->mode()"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBneeds\fR( [$reason] )" 4
.el .IP "\f(CW$obj\fR\->\fBneeds\fR( [$reason] )" 4
.IX Item "$obj->needs( [$reason] )"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBoutput\fR($msg)" 4
.el .IP "\f(CW$obj\fR\->\fBoutput\fR($msg)" 4
.IX Item "$obj->output($msg)"
Returns the file-handle to write the log lines to. [1.10] This may
depend on the \f(CW$msg\fR (especially message context)
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
Inherited, see \*(L"Accessors\*(R" in Log::Report::Dispatcher
.SS "File maintenance"
.IX Subsection "File maintenance"
.ie n .IP "$obj\->\fBclose\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR()" 4
.IX Item "$obj->close()"
Only when initiated with a \s-1FILENAME\s0, the file will be closed.  In any
other case, nothing will be done.
.ie n .IP "$obj\->\fBrotate\fR($filename|CODE)" 4
.el .IP "\f(CW$obj\fR\->\fBrotate\fR($filename|CODE)" 4
.IX Item "$obj->rotate($filename|CODE)"
[1.00] Move the current file to \f(CW$filename\fR, and start a new file.
.SS "Logging"
.IX Subsection "Logging"
Extends \*(L"Logging\*(R" in Log::Report::Dispatcher.
.ie n .IP "$obj\->\fBaddSkipStack\fR(@CODE)" 4
.el .IP "\f(CW$obj\fR\->\fBaddSkipStack\fR(@CODE)" 4
.IX Item "$obj->addSkipStack(@CODE)"
.PD 0
.IP "Log::Report::Dispatcher::File\->\fBaddSkipStack\fR(@CODE)" 4
.IX Item "Log::Report::Dispatcher::File->addSkipStack(@CODE)"
.PD
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBcollectLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcollectLocation\fR()" 4
.IX Item "$obj->collectLocation()"
.PD 0
.IP "Log::Report::Dispatcher::File\->\fBcollectLocation\fR()" 4
.IX Item "Log::Report::Dispatcher::File->collectLocation()"
.PD
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBcollectStack\fR( [$maxdepth] )" 4
.el .IP "\f(CW$obj\fR\->\fBcollectStack\fR( [$maxdepth] )" 4
.IX Item "$obj->collectStack( [$maxdepth] )"
.PD 0
.IP "Log::Report::Dispatcher::File\->\fBcollectStack\fR( [$maxdepth] )" 4
.IX Item "Log::Report::Dispatcher::File->collectStack( [$maxdepth] )"
.PD
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBlog\fR(HASH\-$of\-%options, $reason, $message, $domain)" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR(HASH\-$of\-%options, \f(CW$reason\fR, \f(CW$message\fR, \f(CW$domain\fR)" 4
.IX Item "$obj->log(HASH-$of-%options, $reason, $message, $domain)"
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBskipStack\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBskipStack\fR()" 4
.IX Item "$obj->skipStack()"
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBstackTraceLine\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBstackTraceLine\fR(%options)" 4
.IX Item "$obj->stackTraceLine(%options)"
.PD 0
.IP "Log::Report::Dispatcher::File\->\fBstackTraceLine\fR(%options)" 4
.IX Item "Log::Report::Dispatcher::File->stackTraceLine(%options)"
.PD
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.ie n .IP "$obj\->\fBtranslate\fR(HASH\-$of\-%options, $reason, $message)" 4
.el .IP "\f(CW$obj\fR\->\fBtranslate\fR(HASH\-$of\-%options, \f(CW$reason\fR, \f(CW$message\fR)" 4
.IX Item "$obj->translate(HASH-$of-%options, $reason, $message)"
Inherited, see \*(L"Logging\*(R" in Log::Report::Dispatcher
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\s0\*(R" in Log::Report::Dispatcher.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Log-Report distribution version 1.18,
built on October 21, 2016. Website: \fIhttp://perl.overmeer.net/log\-report/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2007\-2016 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
